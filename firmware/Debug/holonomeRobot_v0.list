
holonomeRobot_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009778  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009958  08009958  00019958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dac  08009dac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009dac  08009dac  00019dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009db4  08009db4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009db4  08009db4  00019db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009db8  08009db8  00019db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001dc  08009f98  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08009f98  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4fa  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ca  00000000  00000000  0003b706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  000402f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002102d  00000000  00000000  000417a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b818  00000000  00000000  000627d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccea1  00000000  00000000  0007dfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ae8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f04  00000000  00000000  0014aee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009940 	.word	0x08009940

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08009940 	.word	0x08009940

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f001 fac5 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CSN_Pin|LED_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <MX_GPIO_Init+0xc0>)
 8000f6e:	f001 fabf 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin;
 8000f72:	2320      	movs	r3, #32
 8000f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CE_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f001 f92e 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|LED_Pin;
 8000f90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_GPIO_Init+0xc0>)
 8000faa:	f001 f91f 	bl	80021ec <HAL_GPIO_Init>

}
 8000fae:	bf00      	nop
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <MX_I2C1_Init+0x78>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <MX_I2C1_Init+0x7c>)
 8000fce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ffc:	f001 fa90 	bl	8002520 <HAL_I2C_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001006:	f000 f969 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <MX_I2C1_Init+0x74>)
 800100e:	f001 ffeb 	bl	8002fe8 <HAL_I2CEx_ConfigAnalogFilter>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001018:	f000 f960 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800101c:	2100      	movs	r1, #0
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_I2C1_Init+0x74>)
 8001020:	f002 f82d 	bl	800307e <HAL_I2CEx_ConfigDigitalFilter>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800102a:	f000 f957 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001f8 	.word	0x200001f8
 8001038:	40005400 	.word	0x40005400
 800103c:	30a0a7fb 	.word	0x30a0a7fb

08001040 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b09c      	sub	sp, #112	; 0x70
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	2244      	movs	r2, #68	; 0x44
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f005 fd6d 	bl	8006b40 <memset>
  if(i2cHandle->Instance==I2C1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <HAL_I2C_MspInit+0xe0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d153      	bne.n	8001118 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001070:	2340      	movs	r3, #64	; 0x40
 8001072:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	4618      	mov	r0, r3
 800107e:	f002 fe55 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f000 f928 	bl	80012dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	4a24      	ldr	r2, [pc, #144]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c2:	2312      	movs	r3, #18
 80010c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ce:	2304      	movs	r3, #4
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f001 f886 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	2312      	movs	r3, #18
 80010e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f0:	2304      	movs	r3, #4
 80010f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010f8:	4619      	mov	r1, r3
 80010fa:	480b      	ldr	r0, [pc, #44]	; (8001128 <HAL_I2C_MspInit+0xe8>)
 80010fc:	f001 f876 	bl	80021ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 8001106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800110a:	6593      	str	r3, [r2, #88]	; 0x58
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	3770      	adds	r7, #112	; 0x70
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40005400 	.word	0x40005400
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int stringLength;
	int inc = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001136:	f000 ff20 	bl	8001f7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113a:	f000 f871 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113e:	f7ff fedd 	bl	8000efc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001142:	f000 fe4d 	bl	8001de0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001146:	f7ff ff3b 	bl	8000fc0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800114a:	f000 fb49 	bl	80017e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800114e:	f000 fc0f 	bl	8001970 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001152:	f000 fc61 	bl	8001a18 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001156:	f000 fcb5 	bl	8001ac4 <MX_TIM4_Init>
  MX_SPI1_Init();
 800115a:	f000 f91d 	bl	8001398 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"*** Starting ***\r\n",spiRxBuffer[0]);
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <main+0xd0>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4a27      	ldr	r2, [pc, #156]	; (8001200 <main+0xd4>)
 8001164:	2140      	movs	r1, #64	; 0x40
 8001166:	4827      	ldr	r0, [pc, #156]	; (8001204 <main+0xd8>)
 8001168:	f006 f95c 	bl	8007424 <sniprintf>
 800116c:	6038      	str	r0, [r7, #0]
	HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b29a      	uxth	r2, r3
 8001172:	2364      	movs	r3, #100	; 0x64
 8001174:	4923      	ldr	r1, [pc, #140]	; (8001204 <main+0xd8>)
 8001176:	4824      	ldr	r0, [pc, #144]	; (8001208 <main+0xdc>)
 8001178:	f004 fe9e 	bl	8005eb8 <HAL_UART_Transmit>
	MPU6050_Init();
 800117c:	f000 f8b4 	bl	80012e8 <MPU6050_Init>
		}
		stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"Speed (%1.3f,%1.3f,%1.3f)\r\n",accel.x,accel.y,accel.z);
		HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
		stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"Gyro (%3.3f,%3.3f,%3.3f)\r\n",gyro.x,gyro.y,gyro.z);
		HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);*/
		HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	4821      	ldr	r0, [pc, #132]	; (800120c <main+0xe0>)
 8001186:	f001 f9b3 	bl	80024f0 <HAL_GPIO_WritePin>

		//if(HAL_OK != HAL_SPI_TransmitReceive(&hspi1, spiTxBuffer, spiRxBuffer, 1, 1000)){
		spiTxBuffer[0] = inc++;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <main+0xe4>)
 8001194:	701a      	strb	r2, [r3, #0]
		if(HAL_ERROR == HAL_SPI_Transmit(&hspi1, spiTxBuffer, 1, 1000)){
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	2201      	movs	r2, #1
 800119c:	491c      	ldr	r1, [pc, #112]	; (8001210 <main+0xe4>)
 800119e:	481d      	ldr	r0, [pc, #116]	; (8001214 <main+0xe8>)
 80011a0:	f003 f85f 	bl	8004262 <HAL_SPI_Transmit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d10f      	bne.n	80011ca <main+0x9e>
			stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"SPI Error\r\n",spiRxBuffer[0]);
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <main+0xd0>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	4a1a      	ldr	r2, [pc, #104]	; (8001218 <main+0xec>)
 80011b0:	2140      	movs	r1, #64	; 0x40
 80011b2:	4814      	ldr	r0, [pc, #80]	; (8001204 <main+0xd8>)
 80011b4:	f006 f936 	bl	8007424 <sniprintf>
 80011b8:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	4910      	ldr	r1, [pc, #64]	; (8001204 <main+0xd8>)
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <main+0xdc>)
 80011c4:	f004 fe78 	bl	8005eb8 <HAL_UART_Transmit>
 80011c8:	e00e      	b.n	80011e8 <main+0xbc>
		}
		else{
			stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"SPI data received : Ox%2x\r\n",spiRxBuffer[0]);
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <main+0xd0>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4a13      	ldr	r2, [pc, #76]	; (800121c <main+0xf0>)
 80011d0:	2140      	movs	r1, #64	; 0x40
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <main+0xd8>)
 80011d4:	f006 f926 	bl	8007424 <sniprintf>
 80011d8:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	2364      	movs	r3, #100	; 0x64
 80011e0:	4908      	ldr	r1, [pc, #32]	; (8001204 <main+0xd8>)
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <main+0xdc>)
 80011e4:	f004 fe68 	bl	8005eb8 <HAL_UART_Transmit>
		}
		HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <main+0xe0>)
 80011ee:	f001 f97f 	bl	80024f0 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		HAL_Delay(1000);
 80011f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f6:	f000 fef7 	bl	8001fe8 <HAL_Delay>
		HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, RESET);
 80011fa:	e7c1      	b.n	8001180 <main+0x54>
 80011fc:	20000284 	.word	0x20000284
 8001200:	08009958 	.word	0x08009958
 8001204:	20000244 	.word	0x20000244
 8001208:	200004a8 	.word	0x200004a8
 800120c:	48000400 	.word	0x48000400
 8001210:	200002a4 	.word	0x200002a4
 8001214:	200002c4 	.word	0x200002c4
 8001218:	0800996c 	.word	0x0800996c
 800121c:	08009978 	.word	0x08009978

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	; 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	2238      	movs	r2, #56	; 0x38
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fc86 	bl	8006b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001242:	2000      	movs	r0, #0
 8001244:	f001 ff68 	bl	8003118 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001252:	2340      	movs	r3, #64	; 0x40
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800125e:	2304      	movs	r3, #4
 8001260:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001262:	2355      	movs	r3, #85	; 0x55
 8001264:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001266:	2302      	movs	r3, #2
 8001268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800126a:	2302      	movs	r3, #2
 800126c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800126e:	2302      	movs	r3, #2
 8001270:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fff2 	bl	8003260 <HAL_RCC_OscConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001282:	f000 f82b 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	230f      	movs	r3, #15
 8001288:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128a:	2303      	movs	r3, #3
 800128c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2104      	movs	r1, #4
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 faf6 	bl	8003890 <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012aa:	f000 f817 	bl	80012dc <Error_Handler>
  }
}
 80012ae:	bf00      	nop
 80012b0:	3750      	adds	r7, #80	; 0x50
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ca:	f000 fe6f 	bl	8001fac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40001000 	.word	0x40001000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <MPU6050_Init>:
#include "mpu6050.h"



HAL_StatusTypeDef MPU6050_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG,1, &check, 1, 1000);
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	2301      	movs	r3, #1
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2301      	movs	r3, #1
 80012fe:	2275      	movs	r2, #117	; 0x75
 8001300:	21d0      	movs	r1, #208	; 0xd0
 8001302:	4824      	ldr	r0, [pc, #144]	; (8001394 <MPU6050_Init+0xac>)
 8001304:	f001 fab0 	bl	8002868 <HAL_I2C_Mem_Read>

	if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b68      	cmp	r3, #104	; 0x68
 800130c:	d13d      	bne.n	800138a <MPU6050_Init+0xa2>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	2301      	movs	r3, #1
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	1dbb      	adds	r3, r7, #6
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2301      	movs	r3, #1
 8001322:	226b      	movs	r2, #107	; 0x6b
 8001324:	21d0      	movs	r1, #208	; 0xd0
 8001326:	481b      	ldr	r0, [pc, #108]	; (8001394 <MPU6050_Init+0xac>)
 8001328:	f001 f98a 	bl	8002640 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800132c:	2307      	movs	r3, #7
 800132e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2301      	movs	r3, #1
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	1dbb      	adds	r3, r7, #6
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2301      	movs	r3, #1
 8001340:	2219      	movs	r2, #25
 8001342:	21d0      	movs	r1, #208	; 0xd0
 8001344:	4813      	ldr	r0, [pc, #76]	; (8001394 <MPU6050_Init+0xac>)
 8001346:	f001 f97b 	bl	8002640 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
		Data = 0x00;
 800134a:	2300      	movs	r3, #0
 800134c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2301      	movs	r3, #1
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	1dbb      	adds	r3, r7, #6
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	221c      	movs	r2, #28
 8001360:	21d0      	movs	r1, #208	; 0xd0
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <MPU6050_Init+0xac>)
 8001364:	f001 f96c 	bl	8002640 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8001368:	2300      	movs	r3, #0
 800136a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800136c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	1dbb      	adds	r3, r7, #6
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	221b      	movs	r2, #27
 800137e:	21d0      	movs	r1, #208	; 0xd0
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <MPU6050_Init+0xac>)
 8001382:	f001 f95d 	bl	8002640 <HAL_I2C_Mem_Write>

		return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <MPU6050_Init+0xa4>
	}
	else{
		return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
	}

}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200001f8 	.word	0x200001f8

08001398 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_SPI1_Init+0x74>)
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <MX_SPI1_Init+0x78>)
 80013a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_SPI1_Init+0x74>)
 80013a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_SPI1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_SPI1_Init+0x74>)
 80013b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_SPI1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_SPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_SPI1_Init+0x74>)
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_SPI1_Init+0x74>)
 80013ce:	2220      	movs	r2, #32
 80013d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_SPI1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_SPI1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_SPI1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_SPI1_Init+0x74>)
 80013e6:	2207      	movs	r2, #7
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_SPI1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_SPI1_Init+0x74>)
 80013f2:	2208      	movs	r2, #8
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_SPI1_Init+0x74>)
 80013f8:	f002 fe88 	bl	800410c <HAL_SPI_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001402:	f7ff ff6b 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002c4 	.word	0x200002c4
 8001410:	40013000 	.word	0x40013000

08001414 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a17      	ldr	r2, [pc, #92]	; (8001490 <HAL_SPI_MspInit+0x7c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d127      	bne.n	8001486 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_SPI_MspInit+0x80>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	4a16      	ldr	r2, [pc, #88]	; (8001494 <HAL_SPI_MspInit+0x80>)
 800143c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001440:	6613      	str	r3, [r2, #96]	; 0x60
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_SPI_MspInit+0x80>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_SPI_MspInit+0x80>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_SPI_MspInit+0x80>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_SPI_MspInit+0x80>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001466:	2338      	movs	r3, #56	; 0x38
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001476:	2305      	movs	r3, #5
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_SPI_MspInit+0x84>)
 8001482:	f000 feb3 	bl	80021ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40013000 	.word	0x40013000
 8001494:	40021000 	.word	0x40021000
 8001498:	48000400 	.word	0x48000400

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_MspInit+0x44>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_MspInit+0x44>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6613      	str	r3, [r2, #96]	; 0x60
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_MspInit+0x44>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_MspInit+0x44>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_MspInit+0x44>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6593      	str	r3, [r2, #88]	; 0x58
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_MspInit+0x44>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_InitTick+0xcc>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	4a2c      	ldr	r2, [pc, #176]	; (80015b0 <HAL_InitTick+0xcc>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	6593      	str	r3, [r2, #88]	; 0x58
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_InitTick+0xcc>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001512:	f107 020c 	add.w	r2, r7, #12
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f002 fb8d 	bl	8003c3c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001522:	f002 fb5f 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 8001526:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <HAL_InitTick+0xd0>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	3b01      	subs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_InitTick+0xd4>)
 8001538:	4a20      	ldr	r2, [pc, #128]	; (80015bc <HAL_InitTick+0xd8>)
 800153a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_InitTick+0xd4>)
 800153e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001542:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001544:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <HAL_InitTick+0xd4>)
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_InitTick+0xd4>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_InitTick+0xd4>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001556:	4818      	ldr	r0, [pc, #96]	; (80015b8 <HAL_InitTick+0xd4>)
 8001558:	f003 f956 	bl	8004808 <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11b      	bne.n	80015a2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800156a:	4813      	ldr	r0, [pc, #76]	; (80015b8 <HAL_InitTick+0xd4>)
 800156c:	f003 f9a4 	bl	80048b8 <HAL_TIM_Base_Start_IT>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800157a:	2b00      	cmp	r3, #0
 800157c:	d111      	bne.n	80015a2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800157e:	2036      	movs	r0, #54	; 0x36
 8001580:	f000 fe26 	bl	80021d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	d808      	bhi.n	800159c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800158a:	2200      	movs	r2, #0
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	2036      	movs	r0, #54	; 0x36
 8001590:	f000 fe04 	bl	800219c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_InitTick+0xdc>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e002      	b.n	80015a2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3730      	adds	r7, #48	; 0x30
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	431bde83 	.word	0x431bde83
 80015b8:	20000328 	.word	0x20000328
 80015bc:	40001000 	.word	0x40001000
 80015c0:	20000004 	.word	0x20000004

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM6_DAC_IRQHandler+0x10>)
 8001622:	f003 faba 	bl	8004b9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000328 	.word	0x20000328

08001630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
	return 1;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_kill>:

int _kill(int pid, int sig)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800164a:	f005 fa4f 	bl	8006aec <__errno>
 800164e:	4603      	mov	r3, r0
 8001650:	2216      	movs	r2, #22
 8001652:	601a      	str	r2, [r3, #0]
	return -1;
 8001654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_exit>:

void _exit (int status)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ffe7 	bl	8001640 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001672:	e7fe      	b.n	8001672 <_exit+0x12>

08001674 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e00a      	b.n	800169c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001686:	f3af 8000 	nop.w
 800168a:	4601      	mov	r1, r0
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	60ba      	str	r2, [r7, #8]
 8001692:	b2ca      	uxtb	r2, r1
 8001694:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf0      	blt.n	8001686 <_read+0x12>
	}

return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e009      	b.n	80016d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf1      	blt.n	80016c0 <_write+0x12>
	}
	return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_close>:

int _close(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	return -1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170e:	605a      	str	r2, [r3, #4]
	return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_isatty>:

int _isatty(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return 1;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f005 f9b4 	bl	8006aec <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20008000 	.word	0x20008000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	20000374 	.word	0x20000374
 80017b8:	20000550 	.word	0x20000550

080017bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b09c      	sub	sp, #112	; 0x70
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001800:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]
 8001812:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2234      	movs	r2, #52	; 0x34
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f005 f990 	bl	8006b40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001820:	4b51      	ldr	r3, [pc, #324]	; (8001968 <MX_TIM1_Init+0x188>)
 8001822:	4a52      	ldr	r2, [pc, #328]	; (800196c <MX_TIM1_Init+0x18c>)
 8001824:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001826:	4b50      	ldr	r3, [pc, #320]	; (8001968 <MX_TIM1_Init+0x188>)
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182c:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <MX_TIM1_Init+0x188>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001832:	4b4d      	ldr	r3, [pc, #308]	; (8001968 <MX_TIM1_Init+0x188>)
 8001834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001838:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183a:	4b4b      	ldr	r3, [pc, #300]	; (8001968 <MX_TIM1_Init+0x188>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001840:	4b49      	ldr	r3, [pc, #292]	; (8001968 <MX_TIM1_Init+0x188>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001846:	4b48      	ldr	r3, [pc, #288]	; (8001968 <MX_TIM1_Init+0x188>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800184c:	4846      	ldr	r0, [pc, #280]	; (8001968 <MX_TIM1_Init+0x188>)
 800184e:	f002 ffdb 	bl	8004808 <HAL_TIM_Base_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001858:	f7ff fd40 	bl	80012dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001860:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001862:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001866:	4619      	mov	r1, r3
 8001868:	483f      	ldr	r0, [pc, #252]	; (8001968 <MX_TIM1_Init+0x188>)
 800186a:	f003 fc29 	bl	80050c0 <HAL_TIM_ConfigClockSource>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001874:	f7ff fd32 	bl	80012dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001878:	483b      	ldr	r0, [pc, #236]	; (8001968 <MX_TIM1_Init+0x188>)
 800187a:	f003 f887 	bl	800498c <HAL_TIM_PWM_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001884:	f7ff fd2a 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001898:	4619      	mov	r1, r3
 800189a:	4833      	ldr	r0, [pc, #204]	; (8001968 <MX_TIM1_Init+0x188>)
 800189c:	f004 f954 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018a6:	f7ff fd19 	bl	80012dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018aa:	2360      	movs	r3, #96	; 0x60
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b2:	2300      	movs	r3, #0
 80018b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b6:	2300      	movs	r3, #0
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ca:	2200      	movs	r2, #0
 80018cc:	4619      	mov	r1, r3
 80018ce:	4826      	ldr	r0, [pc, #152]	; (8001968 <MX_TIM1_Init+0x188>)
 80018d0:	f003 fae2 	bl	8004e98 <HAL_TIM_PWM_ConfigChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018da:	f7ff fcff 	bl	80012dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018e2:	2204      	movs	r2, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4820      	ldr	r0, [pc, #128]	; (8001968 <MX_TIM1_Init+0x188>)
 80018e8:	f003 fad6 	bl	8004e98 <HAL_TIM_PWM_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80018f2:	f7ff fcf3 	bl	80012dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018fa:	2208      	movs	r2, #8
 80018fc:	4619      	mov	r1, r3
 80018fe:	481a      	ldr	r0, [pc, #104]	; (8001968 <MX_TIM1_Init+0x188>)
 8001900:	f003 faca 	bl	8004e98 <HAL_TIM_PWM_ConfigChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800190a:	f7ff fce7 	bl	80012dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001926:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	4619      	mov	r1, r3
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <MX_TIM1_Init+0x188>)
 800194c:	f004 f97e 	bl	8005c4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001956:	f7ff fcc1 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800195a:	4803      	ldr	r0, [pc, #12]	; (8001968 <MX_TIM1_Init+0x188>)
 800195c:	f000 f9cc 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 8001960:	bf00      	nop
 8001962:	3770      	adds	r7, #112	; 0x70
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000378 	.word	0x20000378
 800196c:	40012c00 	.word	0x40012c00

08001970 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2224      	movs	r2, #36	; 0x24
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f005 f8de 	bl	8006b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	463b      	mov	r3, r7
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <MX_TIM2_Init+0xa4>)
 8001990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001994:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <MX_TIM2_Init+0xa4>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <MX_TIM2_Init+0xa4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <MX_TIM2_Init+0xa4>)
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_TIM2_Init+0xa4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <MX_TIM2_Init+0xa4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019be:	2301      	movs	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ce:	2301      	movs	r3, #1
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <MX_TIM2_Init+0xa4>)
 80019e2:	f003 f834 	bl	8004a4e <HAL_TIM_Encoder_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80019ec:	f7ff fc76 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_TIM2_Init+0xa4>)
 80019fe:	f004 f8a3 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001a08:	f7ff fc68 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	3730      	adds	r7, #48	; 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200003c4 	.word	0x200003c4

08001a18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f005 f88a 	bl	8006b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_TIM3_Init+0xa4>)
 8001a38:	4a21      	ldr	r2, [pc, #132]	; (8001ac0 <MX_TIM3_Init+0xa8>)
 8001a3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_TIM3_Init+0xa4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <MX_TIM3_Init+0xa4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_TIM3_Init+0xa4>)
 8001a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_TIM3_Init+0xa4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_TIM3_Init+0xa4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a64:	2301      	movs	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a74:	2301      	movs	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_TIM3_Init+0xa4>)
 8001a88:	f002 ffe1 	bl	8004a4e <HAL_TIM_Encoder_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a92:	f7ff fc23 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4806      	ldr	r0, [pc, #24]	; (8001abc <MX_TIM3_Init+0xa4>)
 8001aa4:	f004 f850 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001aae:	f7ff fc15 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	3730      	adds	r7, #48	; 0x30
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000410 	.word	0x20000410
 8001ac0:	40000400 	.word	0x40000400

08001ac4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	; 0x30
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	2224      	movs	r2, #36	; 0x24
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f005 f834 	bl	8006b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <MX_TIM4_Init+0xa4>)
 8001ae4:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <MX_TIM4_Init+0xa8>)
 8001ae6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <MX_TIM4_Init+0xa4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <MX_TIM4_Init+0xa4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <MX_TIM4_Init+0xa4>)
 8001af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_TIM4_Init+0xa4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <MX_TIM4_Init+0xa4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b10:	2301      	movs	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b20:	2301      	movs	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	4619      	mov	r1, r3
 8001b32:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_TIM4_Init+0xa4>)
 8001b34:	f002 ff8b 	bl	8004a4e <HAL_TIM_Encoder_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b3e:	f7ff fbcd 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <MX_TIM4_Init+0xa4>)
 8001b50:	f003 fffa 	bl	8005b48 <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b5a:	f7ff fbbf 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	3730      	adds	r7, #48	; 0x30
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000045c 	.word	0x2000045c
 8001b6c:	40000800 	.word	0x40000800

08001b70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_TIM_Base_MspInit+0x38>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10b      	bne.n	8001b9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_TIM_Base_MspInit+0x3c>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_TIM_Base_MspInit+0x3c>)
 8001b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_TIM_Base_MspInit+0x3c>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08e      	sub	sp, #56	; 0x38
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d129      	bne.n	8001c26 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd2:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	4a45      	ldr	r2, [pc, #276]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b40      	ldr	r3, [pc, #256]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	4a3f      	ldr	r2, [pc, #252]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c02:	2303      	movs	r3, #3
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c12:	2301      	movs	r3, #1
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c20:	f000 fae4 	bl	80021ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c24:	e05d      	b.n	8001ce2 <HAL_TIM_Encoder_MspInit+0x132>
  else if(tim_encoderHandle->Instance==TIM3)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a31      	ldr	r2, [pc, #196]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x140>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d129      	bne.n	8001c84 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c30:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	4a27      	ldr	r2, [pc, #156]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001c60:	2350      	movs	r3, #80	; 0x50
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c70:	2302      	movs	r3, #2
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7e:	f000 fab5 	bl	80021ec <HAL_GPIO_Init>
}
 8001c82:	e02e      	b.n	8001ce2 <HAL_TIM_Encoder_MspInit+0x132>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x144>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d129      	bne.n	8001ce2 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	4a16      	ldr	r2, [pc, #88]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001cd0:	230a      	movs	r3, #10
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f000 fa85 	bl	80021ec <HAL_GPIO_Init>
}
 8001ce2:	bf00      	nop
 8001ce4:	3738      	adds	r7, #56	; 0x38
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40000800 	.word	0x40000800

08001cf8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2e      	ldr	r2, [pc, #184]	; (8001dd0 <HAL_TIM_MspPostInit+0xd8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d155      	bne.n	8001dc6 <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_TIM_MspPostInit+0xdc>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a2d      	ldr	r2, [pc, #180]	; (8001dd4 <HAL_TIM_MspPostInit+0xdc>)
 8001d20:	f043 0320 	orr.w	r3, r3, #32
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_TIM_MspPostInit+0xdc>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <HAL_TIM_MspPostInit+0xdc>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <HAL_TIM_MspPostInit+0xdc>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3e:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <HAL_TIM_MspPostInit+0xdc>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_TIM_MspPostInit+0xdc>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_TIM_MspPostInit+0xdc>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_TIM_MspPostInit+0xdc>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d62:	2301      	movs	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d72:	2306      	movs	r3, #6
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4816      	ldr	r0, [pc, #88]	; (8001dd8 <HAL_TIM_MspPostInit+0xe0>)
 8001d7e:	f000 fa35 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d82:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d94:	2306      	movs	r3, #6
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da2:	f000 fa23 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001da6:	2301      	movs	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001db6:	2306      	movs	r3, #6
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <HAL_TIM_MspPostInit+0xe4>)
 8001dc2:	f000 fa13 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	48001400 	.word	0x48001400
 8001ddc:	48000400 	.word	0x48000400

08001de0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001de4:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001de6:	4a23      	ldr	r2, [pc, #140]	; (8001e74 <MX_USART2_UART_Init+0x94>)
 8001de8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001df2:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e06:	220c      	movs	r2, #12
 8001e08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e28:	4811      	ldr	r0, [pc, #68]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e2a:	f003 fff5 	bl	8005e18 <HAL_UART_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e34:	f7ff fa52 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e38:	2100      	movs	r1, #0
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e3c:	f004 fd8c 	bl	8006958 <HAL_UARTEx_SetTxFifoThreshold>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e46:	f7ff fa49 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4808      	ldr	r0, [pc, #32]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e4e:	f004 fdc1 	bl	80069d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e58:	f7ff fa40 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <MX_USART2_UART_Init+0x90>)
 8001e5e:	f004 fd42 	bl	80068e6 <HAL_UARTEx_DisableFifoMode>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e68:	f7ff fa38 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	200004a8 	.word	0x200004a8
 8001e74:	40004400 	.word	0x40004400

08001e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b09a      	sub	sp, #104	; 0x68
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	2244      	movs	r2, #68	; 0x44
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f004 fe51 	bl	8006b40 <memset>
  if(uartHandle->Instance==USART2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_UART_MspInit+0xa8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d136      	bne.n	8001f16 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f001 ff39 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ec0:	f7ff fa0c 	bl	80012dc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_UART_MspInit+0xac>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a16      	ldr	r2, [pc, #88]	; (8001f24 <HAL_UART_MspInit+0xac>)
 8001eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_UART_MspInit+0xac>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_UART_MspInit+0xac>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_UART_MspInit+0xac>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_UART_MspInit+0xac>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001ef4:	230c      	movs	r3, #12
 8001ef6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f04:	2307      	movs	r3, #7
 8001f06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f12:	f000 f96b 	bl	80021ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f16:	bf00      	nop
 8001f18:	3768      	adds	r7, #104	; 0x68
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40004400 	.word	0x40004400
 8001f24:	40021000 	.word	0x40021000

08001f28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f2e:	490e      	ldr	r1, [pc, #56]	; (8001f68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f30:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <LoopForever+0xe>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f44:	4c0b      	ldr	r4, [pc, #44]	; (8001f74 <LoopForever+0x16>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f52:	f7ff fc33 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f56:	f004 fdcf 	bl	8006af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5a:	f7ff f8e7 	bl	800112c <main>

08001f5e <LoopForever>:

LoopForever:
    b LoopForever
 8001f5e:	e7fe      	b.n	8001f5e <LoopForever>
  ldr   r0, =_estack
 8001f60:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f68:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f6c:	08009dbc 	.word	0x08009dbc
  ldr r2, =_sbss
 8001f70:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f74:	2000054c 	.word	0x2000054c

08001f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC1_2_IRQHandler>

08001f7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f000 f8fe 	bl	8002186 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f8a:	200f      	movs	r0, #15
 8001f8c:	f7ff faaa 	bl	80014e4 <HAL_InitTick>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	e001      	b.n	8001fa0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f9c:	f7ff fa7e 	bl	800149c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]

}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_IncTick+0x1c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_IncTick+0x20>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a03      	ldr	r2, [pc, #12]	; (8001fc8 <HAL_IncTick+0x1c>)
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	20000538 	.word	0x20000538
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_GetTick+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000538 	.word	0x20000538

08001fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff ffee 	bl	8001fd0 <HAL_GetTick>
 8001ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002000:	d004      	beq.n	800200c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_Delay+0x40>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4413      	add	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800200c:	bf00      	nop
 800200e:	f7ff ffdf 	bl	8001fd0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	429a      	cmp	r2, r3
 800201c:	d8f7      	bhi.n	800200e <HAL_Delay+0x26>
  {
  }
}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000008 	.word	0x20000008

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff4c 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021aa:	f7ff ff63 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	6978      	ldr	r0, [r7, #20]
 80021b6:	f7ff ffb3 	bl	8002120 <NVIC_EncodePriority>
 80021ba:	4602      	mov	r2, r0
 80021bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff82 	bl	80020cc <__NVIC_SetPriority>
}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff56 	bl	8002090 <__NVIC_EnableIRQ>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021fa:	e15a      	b.n	80024b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 814c 	beq.w	80024ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d005      	beq.n	800222c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002228:	2b02      	cmp	r3, #2
 800222a:	d130      	bne.n	800228e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002262:	2201      	movs	r2, #1
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f003 0201 	and.w	r2, r3, #1
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b03      	cmp	r3, #3
 8002298:	d017      	beq.n	80022ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d123      	bne.n	800231e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	6939      	ldr	r1, [r7, #16]
 800231a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0203 	and.w	r2, r3, #3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80a6 	beq.w	80024ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002360:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <HAL_GPIO_Init+0x2e4>)
 8002362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002364:	4a5a      	ldr	r2, [pc, #360]	; (80024d0 <HAL_GPIO_Init+0x2e4>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6613      	str	r3, [r2, #96]	; 0x60
 800236c:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <HAL_GPIO_Init+0x2e4>)
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002378:	4a56      	ldr	r2, [pc, #344]	; (80024d4 <HAL_GPIO_Init+0x2e8>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023a2:	d01f      	beq.n	80023e4 <HAL_GPIO_Init+0x1f8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a4c      	ldr	r2, [pc, #304]	; (80024d8 <HAL_GPIO_Init+0x2ec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d019      	beq.n	80023e0 <HAL_GPIO_Init+0x1f4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a4b      	ldr	r2, [pc, #300]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_GPIO_Init+0x1f0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a4a      	ldr	r2, [pc, #296]	; (80024e0 <HAL_GPIO_Init+0x2f4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00d      	beq.n	80023d8 <HAL_GPIO_Init+0x1ec>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a49      	ldr	r2, [pc, #292]	; (80024e4 <HAL_GPIO_Init+0x2f8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_Init+0x1e8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a48      	ldr	r2, [pc, #288]	; (80024e8 <HAL_GPIO_Init+0x2fc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_GPIO_Init+0x1e4>
 80023cc:	2305      	movs	r3, #5
 80023ce:	e00a      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023d0:	2306      	movs	r3, #6
 80023d2:	e008      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023d4:	2304      	movs	r3, #4
 80023d6:	e006      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023d8:	2303      	movs	r3, #3
 80023da:	e004      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023dc:	2302      	movs	r3, #2
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_GPIO_Init+0x1fa>
 80023e4:	2300      	movs	r3, #0
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	f002 0203 	and.w	r2, r2, #3
 80023ec:	0092      	lsls	r2, r2, #2
 80023ee:	4093      	lsls	r3, r2
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f6:	4937      	ldr	r1, [pc, #220]	; (80024d4 <HAL_GPIO_Init+0x2e8>)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002404:	4b39      	ldr	r3, [pc, #228]	; (80024ec <HAL_GPIO_Init+0x300>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	43db      	mvns	r3, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002428:	4a30      	ldr	r2, [pc, #192]	; (80024ec <HAL_GPIO_Init+0x300>)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_GPIO_Init+0x300>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002452:	4a26      	ldr	r2, [pc, #152]	; (80024ec <HAL_GPIO_Init+0x300>)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_GPIO_Init+0x300>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_GPIO_Init+0x300>)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_GPIO_Init+0x300>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024a6:	4a11      	ldr	r2, [pc, #68]	; (80024ec <HAL_GPIO_Init+0x300>)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3301      	adds	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f47f ae9d 	bne.w	80021fc <HAL_GPIO_Init+0x10>
  }
}
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010000 	.word	0x40010000
 80024d8:	48000400 	.word	0x48000400
 80024dc:	48000800 	.word	0x48000800
 80024e0:	48000c00 	.word	0x48000c00
 80024e4:	48001000 	.word	0x48001000
 80024e8:	48001400 	.word	0x48001400
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250c:	e002      	b.n	8002514 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e081      	b.n	8002636 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fd7a 	bl	8001040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002570:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002580:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d107      	bne.n	800259a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	e006      	b.n	80025a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d104      	bne.n	80025ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69d9      	ldr	r1, [r3, #28]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1a      	ldr	r2, [r3, #32]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	461a      	mov	r2, r3
 800264e:	4603      	mov	r3, r0
 8002650:	817b      	strh	r3, [r7, #10]
 8002652:	460b      	mov	r3, r1
 8002654:	813b      	strh	r3, [r7, #8]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b20      	cmp	r3, #32
 8002664:	f040 80f9 	bne.w	800285a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_I2C_Mem_Write+0x34>
 800266e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800267a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0ed      	b.n	800285c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_I2C_Mem_Write+0x4e>
 800268a:	2302      	movs	r3, #2
 800268c:	e0e6      	b.n	800285c <HAL_I2C_Mem_Write+0x21c>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002696:	f7ff fc9b 	bl	8001fd0 <HAL_GetTick>
 800269a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2319      	movs	r3, #25
 80026a2:	2201      	movs	r2, #1
 80026a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fac3 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0d1      	b.n	800285c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2221      	movs	r2, #33	; 0x21
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026e0:	88f8      	ldrh	r0, [r7, #6]
 80026e2:	893a      	ldrh	r2, [r7, #8]
 80026e4:	8979      	ldrh	r1, [r7, #10]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	4603      	mov	r3, r0
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f9d3 	bl	8002a9c <I2C_RequestMemoryWrite>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0a9      	b.n	800285c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	d90e      	bls.n	8002730 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	b2da      	uxtb	r2, r3
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	2300      	movs	r3, #0
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fc2b 	bl	8002f84 <I2C_TransferConfig>
 800272e:	e00f      	b.n	8002750 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	b2da      	uxtb	r2, r3
 8002740:	8979      	ldrh	r1, [r7, #10]
 8002742:	2300      	movs	r3, #0
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fc1a 	bl	8002f84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 faad 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e07b      	b.n	800285c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d034      	beq.n	8002808 <HAL_I2C_Mem_Write+0x1c8>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d130      	bne.n	8002808 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	2200      	movs	r2, #0
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fa3f 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e04d      	b.n	800285c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2bff      	cmp	r3, #255	; 0xff
 80027c8:	d90e      	bls.n	80027e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	22ff      	movs	r2, #255	; 0xff
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	8979      	ldrh	r1, [r7, #10]
 80027d8:	2300      	movs	r3, #0
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fbcf 	bl	8002f84 <I2C_TransferConfig>
 80027e6:	e00f      	b.n	8002808 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	8979      	ldrh	r1, [r7, #10]
 80027fa:	2300      	movs	r3, #0
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fbbe 	bl	8002f84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d19e      	bne.n	8002750 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fa8c 	bl	8002d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e01a      	b.n	800285c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2220      	movs	r2, #32
 800282c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_I2C_Mem_Write+0x224>)
 800283a:	400b      	ands	r3, r1
 800283c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	fe00e800 	.word	0xfe00e800

08002868 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	460b      	mov	r3, r1
 800287c:	813b      	strh	r3, [r7, #8]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b20      	cmp	r3, #32
 800288c:	f040 80fd 	bne.w	8002a8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_I2C_Mem_Read+0x34>
 8002896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0f1      	b.n	8002a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_I2C_Mem_Read+0x4e>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e0ea      	b.n	8002a8c <HAL_I2C_Mem_Read+0x224>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028be:	f7ff fb87 	bl	8001fd0 <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	2319      	movs	r3, #25
 80028ca:	2201      	movs	r2, #1
 80028cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f9af 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0d5      	b.n	8002a8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2222      	movs	r2, #34	; 0x22
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2240      	movs	r2, #64	; 0x40
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a3a      	ldr	r2, [r7, #32]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002908:	88f8      	ldrh	r0, [r7, #6]
 800290a:	893a      	ldrh	r2, [r7, #8]
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4603      	mov	r3, r0
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f913 	bl	8002b44 <I2C_RequestMemoryRead>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0ad      	b.n	8002a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2bff      	cmp	r3, #255	; 0xff
 8002938:	d90e      	bls.n	8002958 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	22ff      	movs	r2, #255	; 0xff
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	b2da      	uxtb	r2, r3
 8002946:	8979      	ldrh	r1, [r7, #10]
 8002948:	4b52      	ldr	r3, [pc, #328]	; (8002a94 <HAL_I2C_Mem_Read+0x22c>)
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fb17 	bl	8002f84 <I2C_TransferConfig>
 8002956:	e00f      	b.n	8002978 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	b2da      	uxtb	r2, r3
 8002968:	8979      	ldrh	r1, [r7, #10]
 800296a:	4b4a      	ldr	r3, [pc, #296]	; (8002a94 <HAL_I2C_Mem_Read+0x22c>)
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fb06 	bl	8002f84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	2200      	movs	r2, #0
 8002980:	2104      	movs	r1, #4
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f956 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07c      	b.n	8002a8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d034      	beq.n	8002a38 <HAL_I2C_Mem_Read+0x1d0>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d130      	bne.n	8002a38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	2200      	movs	r2, #0
 80029de:	2180      	movs	r1, #128	; 0x80
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f927 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04d      	b.n	8002a8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2bff      	cmp	r3, #255	; 0xff
 80029f8:	d90e      	bls.n	8002a18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	22ff      	movs	r2, #255	; 0xff
 80029fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	8979      	ldrh	r1, [r7, #10]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fab7 	bl	8002f84 <I2C_TransferConfig>
 8002a16:	e00f      	b.n	8002a38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 faa6 	bl	8002f84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d19a      	bne.n	8002978 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f974 	bl	8002d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e01a      	b.n	8002a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_I2C_Mem_Read+0x230>)
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
  }
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	80002400 	.word	0x80002400
 8002a98:	fe00e800 	.word	0xfe00e800

08002a9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	817b      	strh	r3, [r7, #10]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	813b      	strh	r3, [r7, #8]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	8979      	ldrh	r1, [r7, #10]
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <I2C_RequestMemoryWrite+0xa4>)
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fa5d 	bl	8002f84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	69b9      	ldr	r1, [r7, #24]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f8f0 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e02c      	b.n	8002b38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae4:	893b      	ldrh	r3, [r7, #8]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
 8002aee:	e015      	b.n	8002b1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002af0:	893b      	ldrh	r3, [r7, #8]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	69b9      	ldr	r1, [r7, #24]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f8d6 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e012      	b.n	8002b38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b12:	893b      	ldrh	r3, [r7, #8]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2200      	movs	r2, #0
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f884 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	80002000 	.word	0x80002000

08002b44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	4611      	mov	r1, r2
 8002b50:	461a      	mov	r2, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	817b      	strh	r3, [r7, #10]
 8002b56:	460b      	mov	r3, r1
 8002b58:	813b      	strh	r3, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	8979      	ldrh	r1, [r7, #10]
 8002b64:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <I2C_RequestMemoryRead+0xa4>)
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fa0a 	bl	8002f84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f89d 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e02c      	b.n	8002bde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d105      	bne.n	8002b96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b8a:	893b      	ldrh	r3, [r7, #8]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
 8002b94:	e015      	b.n	8002bc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b96:	893b      	ldrh	r3, [r7, #8]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	69b9      	ldr	r1, [r7, #24]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f883 	bl	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e012      	b.n	8002bde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb8:	893b      	ldrh	r3, [r7, #8]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2140      	movs	r1, #64	; 0x40
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f831 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	80002000 	.word	0x80002000

08002bec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d103      	bne.n	8002c0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d007      	beq.n	8002c28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	619a      	str	r2, [r3, #24]
  }
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c44:	e022      	b.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c4c:	d01e      	beq.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7ff f9bf 	bl	8001fd0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d113      	bne.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e00f      	b.n	8002cac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d0cd      	beq.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cc0:	e02c      	b.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f870 	bl	8002dac <I2C_IsErrorOccurred>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e02a      	b.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cdc:	d01e      	beq.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7ff f977 	bl	8001fd0 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d113      	bne.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	f043 0220 	orr.w	r2, r3, #32
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e007      	b.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d1cb      	bne.n	8002cc2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d40:	e028      	b.n	8002d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f830 	bl	8002dac <I2C_IsErrorOccurred>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e026      	b.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7ff f93b 	bl	8001fd0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d113      	bne.n	8002d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e007      	b.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d1cf      	bne.n	8002d42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d075      	beq.n	8002ec4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2210      	movs	r2, #16
 8002dde:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002de0:	e056      	b.n	8002e90 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de8:	d052      	beq.n	8002e90 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7ff f8f1 	bl	8001fd0 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_IsErrorOccurred+0x54>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d147      	bne.n	8002e90 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e22:	d12e      	bne.n	8002e82 <I2C_IsErrorOccurred+0xd6>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e2a:	d02a      	beq.n	8002e82 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002e2c:	7cfb      	ldrb	r3, [r7, #19]
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d027      	beq.n	8002e82 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e40:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e42:	f7ff f8c5 	bl	8001fd0 <HAL_GetTick>
 8002e46:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e48:	e01b      	b.n	8002e82 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e4a:	f7ff f8c1 	bl	8001fd0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b19      	cmp	r3, #25
 8002e56:	d914      	bls.n	8002e82 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d1dc      	bne.n	8002e4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d003      	beq.n	8002ea6 <I2C_IsErrorOccurred+0xfa>
 8002e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d09d      	beq.n	8002de2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00b      	beq.n	8002eee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	f043 0308 	orr.w	r3, r3, #8
 8002efe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01c      	beq.n	8002f74 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7ff fe56 	bl	8002bec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <I2C_IsErrorOccurred+0x1d4>)
 8002f4c:	400b      	ands	r3, r1
 8002f4e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3728      	adds	r7, #40	; 0x28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	fe00e800 	.word	0xfe00e800

08002f84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	817b      	strh	r3, [r7, #10]
 8002f92:	4613      	mov	r3, r2
 8002f94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f96:	897b      	ldrh	r3, [r7, #10]
 8002f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f9c:	7a7b      	ldrb	r3, [r7, #9]
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fa4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fb2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	0d5b      	lsrs	r3, r3, #21
 8002fbe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <I2C_TransferConfig+0x60>)
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	ea02 0103 	and.w	r1, r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	03ff63ff 	.word	0x03ff63ff

08002fe8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d138      	bne.n	8003070 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003008:	2302      	movs	r3, #2
 800300a:	e032      	b.n	8003072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800303a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6819      	ldr	r1, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	d139      	bne.n	8003108 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800309e:	2302      	movs	r3, #2
 80030a0:	e033      	b.n	800310a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2224      	movs	r2, #36	; 0x24
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0201 	bic.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	e000      	b.n	800310a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d141      	bne.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003126:	4b4b      	ldr	r3, [pc, #300]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800312e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003132:	d131      	bne.n	8003198 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003134:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313a:	4a46      	ldr	r2, [pc, #280]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003144:	4b43      	ldr	r3, [pc, #268]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800314c:	4a41      	ldr	r2, [pc, #260]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003152:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003154:	4b40      	ldr	r3, [pc, #256]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2232      	movs	r2, #50	; 0x32
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	4a3f      	ldr	r2, [pc, #252]	; (800325c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	0c9b      	lsrs	r3, r3, #18
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800316a:	e002      	b.n	8003172 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	3b01      	subs	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317e:	d102      	bne.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f2      	bne.n	800316c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003186:	4b33      	ldr	r3, [pc, #204]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003192:	d158      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e057      	b.n	8003248 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003198:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800319e:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031a8:	e04d      	b.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b0:	d141      	bne.n	8003236 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031b2:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031be:	d131      	bne.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c0:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c6:	4a23      	ldr	r2, [pc, #140]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031d8:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2232      	movs	r2, #50	; 0x32
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	4a1c      	ldr	r2, [pc, #112]	; (800325c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	0c9b      	lsrs	r3, r3, #18
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031f6:	e002      	b.n	80031fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320a:	d102      	bne.n	8003212 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f2      	bne.n	80031f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321e:	d112      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e011      	b.n	8003248 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003234:	e007      	b.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003236:	4b07      	ldr	r3, [pc, #28]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800323e:	4a05      	ldr	r2, [pc, #20]	; (8003254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003240:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003244:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	40007000 	.word	0x40007000
 8003258:	20000000 	.word	0x20000000
 800325c:	431bde83 	.word	0x431bde83

08003260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e306      	b.n	8003880 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d075      	beq.n	800336a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327e:	4b97      	ldr	r3, [pc, #604]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003288:	4b94      	ldr	r3, [pc, #592]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b0c      	cmp	r3, #12
 8003296:	d102      	bne.n	800329e <HAL_RCC_OscConfig+0x3e>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_OscConfig+0x44>
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d10b      	bne.n	80032bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	4b8d      	ldr	r3, [pc, #564]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d05b      	beq.n	8003368 <HAL_RCC_OscConfig+0x108>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d157      	bne.n	8003368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e2e1      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c4:	d106      	bne.n	80032d4 <HAL_RCC_OscConfig+0x74>
 80032c6:	4b85      	ldr	r3, [pc, #532]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a84      	ldr	r2, [pc, #528]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e01d      	b.n	8003310 <HAL_RCC_OscConfig+0xb0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x98>
 80032de:	4b7f      	ldr	r3, [pc, #508]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7e      	ldr	r2, [pc, #504]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80032e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b7c      	ldr	r3, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7b      	ldr	r2, [pc, #492]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_OscConfig+0xb0>
 80032f8:	4b78      	ldr	r3, [pc, #480]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a77      	ldr	r2, [pc, #476]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b75      	ldr	r3, [pc, #468]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a74      	ldr	r2, [pc, #464]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 800330a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d013      	beq.n	8003340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fe5a 	bl	8001fd0 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003320:	f7fe fe56 	bl	8001fd0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e2a6      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003332:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0xc0>
 800333e:	e014      	b.n	800336a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fe46 	bl	8001fd0 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003348:	f7fe fe42 	bl	8001fd0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e292      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800335a:	4b60      	ldr	r3, [pc, #384]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0xe8>
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d075      	beq.n	8003462 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003376:	4b59      	ldr	r3, [pc, #356]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003380:	4b56      	ldr	r3, [pc, #344]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d102      	bne.n	8003396 <HAL_RCC_OscConfig+0x136>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d002      	beq.n	800339c <HAL_RCC_OscConfig+0x13c>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11f      	bne.n	80033dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339c:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_OscConfig+0x154>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e265      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	4946      	ldr	r1, [pc, #280]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033c8:	4b45      	ldr	r3, [pc, #276]	; (80034e0 <HAL_RCC_OscConfig+0x280>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe f889 	bl	80014e4 <HAL_InitTick>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d043      	beq.n	8003460 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e251      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d023      	beq.n	800342c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e4:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a3c      	ldr	r2, [pc, #240]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80033ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe fdee 	bl	8001fd0 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f8:	f7fe fdea 	bl	8001fd0 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e23a      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340a:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	061b      	lsls	r3, r3, #24
 8003424:	492d      	ldr	r1, [pc, #180]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
 800342a:	e01a      	b.n	8003462 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 8003432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fdca 	bl	8001fd0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003440:	f7fe fdc6 	bl	8001fd0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e216      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x1e0>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d041      	beq.n	80034f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003476:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 8003478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347c:	4a17      	ldr	r2, [pc, #92]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fe fda3 	bl	8001fd0 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348e:	f7fe fd9f 	bl	8001fd0 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e1ef      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a0:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0ef      	beq.n	800348e <HAL_RCC_OscConfig+0x22e>
 80034ae:	e020      	b.n	80034f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80034b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_RCC_OscConfig+0x27c>)
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fe fd86 	bl	8001fd0 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c6:	e00d      	b.n	80034e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c8:	f7fe fd82 	bl	8001fd0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d906      	bls.n	80034e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1d2      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e4:	4b8c      	ldr	r3, [pc, #560]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80034e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1ea      	bne.n	80034c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80a6 	beq.w	800364c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003500:	2300      	movs	r3, #0
 8003502:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003504:	4b84      	ldr	r3, [pc, #528]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_OscConfig+0x2b4>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x2b6>
 8003514:	2300      	movs	r3, #0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351a:	4b7f      	ldr	r3, [pc, #508]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	4a7e      	ldr	r2, [pc, #504]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003524:	6593      	str	r3, [r2, #88]	; 0x58
 8003526:	4b7c      	ldr	r3, [pc, #496]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003532:	2301      	movs	r3, #1
 8003534:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003536:	4b79      	ldr	r3, [pc, #484]	; (800371c <HAL_RCC_OscConfig+0x4bc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003542:	4b76      	ldr	r3, [pc, #472]	; (800371c <HAL_RCC_OscConfig+0x4bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a75      	ldr	r2, [pc, #468]	; (800371c <HAL_RCC_OscConfig+0x4bc>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354e:	f7fe fd3f 	bl	8001fd0 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fe fd3b 	bl	8001fd0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e18b      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003568:	4b6c      	ldr	r3, [pc, #432]	; (800371c <HAL_RCC_OscConfig+0x4bc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d108      	bne.n	800358e <HAL_RCC_OscConfig+0x32e>
 800357c:	4b66      	ldr	r3, [pc, #408]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	4a65      	ldr	r2, [pc, #404]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800358c:	e024      	b.n	80035d8 <HAL_RCC_OscConfig+0x378>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b05      	cmp	r3, #5
 8003594:	d110      	bne.n	80035b8 <HAL_RCC_OscConfig+0x358>
 8003596:	4b60      	ldr	r3, [pc, #384]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	4a5e      	ldr	r2, [pc, #376]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035a6:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	4a5a      	ldr	r2, [pc, #360]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b6:	e00f      	b.n	80035d8 <HAL_RCC_OscConfig+0x378>
 80035b8:	4b57      	ldr	r3, [pc, #348]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035be:	4a56      	ldr	r2, [pc, #344]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c8:	4b53      	ldr	r3, [pc, #332]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	4a52      	ldr	r2, [pc, #328]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d016      	beq.n	800360e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe fcf6 	bl	8001fd0 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7fe fcf2 	bl	8001fd0 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e140      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fe:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ed      	beq.n	80035e8 <HAL_RCC_OscConfig+0x388>
 800360c:	e015      	b.n	800363a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360e:	f7fe fcdf 	bl	8001fd0 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003614:	e00a      	b.n	800362c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003616:	f7fe fcdb 	bl	8001fd0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f241 3288 	movw	r2, #5000	; 0x1388
 8003624:	4293      	cmp	r3, r2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e129      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800362c:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ed      	bne.n	8003616 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800363a:	7ffb      	ldrb	r3, [r7, #31]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003640:	4b35      	ldr	r3, [pc, #212]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	4a34      	ldr	r2, [pc, #208]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 8003646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d03c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01c      	beq.n	800369a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003660:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 8003662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003666:	4a2c      	ldr	r2, [pc, #176]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fe fcae 	bl	8001fd0 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003678:	f7fe fcaa 	bl	8001fd0 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e0fa      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800368a:	4b23      	ldr	r3, [pc, #140]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 800368c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0ef      	beq.n	8003678 <HAL_RCC_OscConfig+0x418>
 8003698:	e01b      	b.n	80036d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800369a:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 800369c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a0:	4a1d      	ldr	r2, [pc, #116]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fe fc91 	bl	8001fd0 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b2:	f7fe fc8d 	bl	8001fd0 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0dd      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80036c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ef      	bne.n	80036b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80d1 	beq.w	800387e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	f000 808b 	beq.w	8003800 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d15e      	bne.n	80037b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fe fc67 	bl	8001fd0 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003704:	e00c      	b.n	8003720 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe fc63 	bl	8001fd0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d905      	bls.n	8003720 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e0b3      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
 8003718:	40021000 	.word	0x40021000
 800371c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003720:	4b59      	ldr	r3, [pc, #356]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ec      	bne.n	8003706 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800372c:	4b56      	ldr	r3, [pc, #344]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	4b56      	ldr	r3, [pc, #344]	; (800388c <HAL_RCC_OscConfig+0x62c>)
 8003732:	4013      	ands	r3, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6a11      	ldr	r1, [r2, #32]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800373c:	3a01      	subs	r2, #1
 800373e:	0112      	lsls	r2, r2, #4
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003746:	0212      	lsls	r2, r2, #8
 8003748:	4311      	orrs	r1, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800374e:	0852      	lsrs	r2, r2, #1
 8003750:	3a01      	subs	r2, #1
 8003752:	0552      	lsls	r2, r2, #21
 8003754:	4311      	orrs	r1, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800375a:	0852      	lsrs	r2, r2, #1
 800375c:	3a01      	subs	r2, #1
 800375e:	0652      	lsls	r2, r2, #25
 8003760:	4311      	orrs	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003766:	06d2      	lsls	r2, r2, #27
 8003768:	430a      	orrs	r2, r1
 800376a:	4947      	ldr	r1, [pc, #284]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 800376c:	4313      	orrs	r3, r2
 800376e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003770:	4b45      	ldr	r3, [pc, #276]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a44      	ldr	r2, [pc, #272]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 8003776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800377c:	4b42      	ldr	r3, [pc, #264]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4a41      	ldr	r2, [pc, #260]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 8003782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003786:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe fc22 	bl	8001fd0 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003790:	f7fe fc1e 	bl	8001fd0 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e06e      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a2:	4b39      	ldr	r3, [pc, #228]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x530>
 80037ae:	e066      	b.n	800387e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b0:	4b35      	ldr	r3, [pc, #212]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a34      	ldr	r2, [pc, #208]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037bc:	4b32      	ldr	r3, [pc, #200]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a31      	ldr	r2, [pc, #196]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037c8:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a2e      	ldr	r2, [pc, #184]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 80037ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe fbfa 	bl	8001fd0 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fe fbf6 	bl	8001fd0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e046      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f2:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x580>
 80037fe:	e03e      	b.n	800387e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e039      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800380c:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <HAL_RCC_OscConfig+0x628>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0203 	and.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	429a      	cmp	r2, r3
 800381e:	d12c      	bne.n	800387a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	3b01      	subs	r3, #1
 800382c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d123      	bne.n	800387a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d11b      	bne.n	800387a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d113      	bne.n	800387a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	3b01      	subs	r3, #1
 8003860:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d109      	bne.n	800387a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000
 800388c:	019f800c 	.word	0x019f800c

08003890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e11e      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b91      	ldr	r3, [pc, #580]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d910      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b8e      	ldr	r3, [pc, #568]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 020f 	bic.w	r2, r3, #15
 80038be:	498c      	ldr	r1, [pc, #560]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b8a      	ldr	r3, [pc, #552]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e106      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d073      	beq.n	80039cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d129      	bne.n	8003940 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ec:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0f4      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80038fc:	f000 f9d0 	bl	8003ca0 <RCC_GetSysClockFreqFromPLLSource>
 8003900:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4a7c      	ldr	r2, [pc, #496]	; (8003af8 <HAL_RCC_ClockConfig+0x268>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d93f      	bls.n	800398a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800390a:	4b7a      	ldr	r3, [pc, #488]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800391e:	2b00      	cmp	r3, #0
 8003920:	d033      	beq.n	800398a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003926:	2b00      	cmp	r3, #0
 8003928:	d12f      	bne.n	800398a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800392a:	4b72      	ldr	r3, [pc, #456]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003932:	4a70      	ldr	r2, [pc, #448]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003938:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e024      	b.n	800398a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d107      	bne.n	8003958 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003948:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0c6      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003958:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0be      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003968:	f000 f8ce 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 800396c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4a61      	ldr	r2, [pc, #388]	; (8003af8 <HAL_RCC_ClockConfig+0x268>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d909      	bls.n	800398a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003976:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397e:	4a5d      	ldr	r2, [pc, #372]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003984:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800398a:	4b5a      	ldr	r3, [pc, #360]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 0203 	bic.w	r2, r3, #3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4957      	ldr	r1, [pc, #348]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399c:	f7fe fb18 	bl	8001fd0 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a4:	f7fe fb14 	bl	8001fd0 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e095      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	4b4e      	ldr	r3, [pc, #312]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 020c 	and.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d1eb      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d023      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e4:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a42      	ldr	r2, [pc, #264]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 80039ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039fc:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a04:	4a3b      	ldr	r2, [pc, #236]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4936      	ldr	r1, [pc, #216]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d105      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a26:	4b33      	ldr	r3, [pc, #204]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4a32      	ldr	r2, [pc, #200]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a32:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d21d      	bcs.n	8003a7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 020f 	bic.w	r2, r3, #15
 8003a48:	4929      	ldr	r1, [pc, #164]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a50:	f7fe fabe 	bl	8001fd0 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fe faba 	bl	8001fd0 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e03b      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1ed      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4917      	ldr	r1, [pc, #92]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa6:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	490f      	ldr	r1, [pc, #60]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aba:	f000 f825 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	490c      	ldr	r1, [pc, #48]	; (8003afc <HAL_RCC_ClockConfig+0x26c>)
 8003acc:	5ccb      	ldrb	r3, [r1, r3]
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <HAL_RCC_ClockConfig+0x270>)
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ada:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <HAL_RCC_ClockConfig+0x274>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fd fd00 	bl	80014e4 <HAL_InitTick>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40022000 	.word	0x40022000
 8003af4:	40021000 	.word	0x40021000
 8003af8:	04c4b400 	.word	0x04c4b400
 8003afc:	08009994 	.word	0x08009994
 8003b00:	20000000 	.word	0x20000000
 8003b04:	20000004 	.word	0x20000004

08003b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d102      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b1a:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	e047      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d102      	bne.n	8003b32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b2c:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	e03e      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b32:	4b23      	ldr	r3, [pc, #140]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d136      	bne.n	8003bac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3301      	adds	r3, #1
 8003b54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d10c      	bne.n	8003b76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b5c:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b66:	68d2      	ldr	r2, [r2, #12]
 8003b68:	0a12      	lsrs	r2, r2, #8
 8003b6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	617b      	str	r3, [r7, #20]
      break;
 8003b74:	e00c      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b76:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	4a10      	ldr	r2, [pc, #64]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b80:	68d2      	ldr	r2, [r2, #12]
 8003b82:	0a12      	lsrs	r2, r2, #8
 8003b84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
      break;
 8003b8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	0e5b      	lsrs	r3, r3, #25
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	e001      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bb0:	693b      	ldr	r3, [r7, #16]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	00f42400 	.word	0x00f42400
 8003bc8:	007a1200 	.word	0x007a1200

08003bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	; (8003be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000000 	.word	0x20000000

08003be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003be8:	f7ff fff0 	bl	8003bcc <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4904      	ldr	r1, [pc, #16]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	080099a4 	.word	0x080099a4

08003c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c14:	f7ff ffda 	bl	8003bcc <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0adb      	lsrs	r3, r3, #11
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4904      	ldr	r1, [pc, #16]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	080099a4 	.word	0x080099a4

08003c3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	220f      	movs	r2, #15
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0203 	and.w	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <HAL_RCC_GetClockConfig+0x5c>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <HAL_RCC_GetClockConfig+0x5c>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_GetClockConfig+0x5c>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	08db      	lsrs	r3, r3, #3
 8003c76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_RCC_GetClockConfig+0x60>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 020f 	and.w	r2, r3, #15
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40022000 	.word	0x40022000

08003ca0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ca6:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d10c      	bne.n	8003cde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cc4:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cce:	68d2      	ldr	r2, [r2, #12]
 8003cd0:	0a12      	lsrs	r2, r2, #8
 8003cd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	617b      	str	r3, [r7, #20]
    break;
 8003cdc:	e00c      	b.n	8003cf8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	0a12      	lsrs	r2, r2, #8
 8003cec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cf0:	fb02 f303 	mul.w	r3, r2, r3
 8003cf4:	617b      	str	r3, [r7, #20]
    break;
 8003cf6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	0e5b      	lsrs	r3, r3, #25
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	3301      	adds	r3, #1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d12:	687b      	ldr	r3, [r7, #4]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40021000 	.word	0x40021000
 8003d24:	007a1200 	.word	0x007a1200
 8003d28:	00f42400 	.word	0x00f42400

08003d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d34:	2300      	movs	r3, #0
 8003d36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8098 	beq.w	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4e:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10d      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	4a3f      	ldr	r2, [pc, #252]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d64:	6593      	str	r3, [r2, #88]	; 0x58
 8003d66:	4b3d      	ldr	r3, [pc, #244]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d72:	2301      	movs	r3, #1
 8003d74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d76:	4b3a      	ldr	r3, [pc, #232]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a39      	ldr	r2, [pc, #228]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d82:	f7fe f925 	bl	8001fd0 <HAL_GetTick>
 8003d86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d88:	e009      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8a:	f7fe f921 	bl	8001fd0 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d902      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	74fb      	strb	r3, [r7, #19]
        break;
 8003d9c:	e005      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0ef      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d159      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003db0:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01e      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d019      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dcc:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dd8:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	4a1f      	ldr	r2, [pc, #124]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003de8:	4b1c      	ldr	r3, [pc, #112]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003df8:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0a:	f7fe f8e1 	bl	8001fd0 <HAL_GetTick>
 8003e0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e10:	e00b      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fe f8dd 	bl	8001fd0 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d902      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	74fb      	strb	r3, [r7, #19]
            break;
 8003e28:	e006      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ec      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	4903      	ldr	r1, [pc, #12]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e54:	e008      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	74bb      	strb	r3, [r7, #18]
 8003e5a:	e005      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	7cfb      	ldrb	r3, [r7, #19]
 8003e66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e68:	7c7b      	ldrb	r3, [r7, #17]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d105      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6e:	4ba6      	ldr	r3, [pc, #664]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	4aa5      	ldr	r2, [pc, #660]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e86:	4ba0      	ldr	r3, [pc, #640]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f023 0203 	bic.w	r2, r3, #3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	499c      	ldr	r1, [pc, #624]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea8:	4b97      	ldr	r3, [pc, #604]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f023 020c 	bic.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	4994      	ldr	r1, [pc, #592]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eca:	4b8f      	ldr	r3, [pc, #572]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	498b      	ldr	r1, [pc, #556]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eec:	4b86      	ldr	r3, [pc, #536]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	4983      	ldr	r1, [pc, #524]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f0e:	4b7e      	ldr	r3, [pc, #504]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	497a      	ldr	r1, [pc, #488]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f30:	4b75      	ldr	r3, [pc, #468]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	4972      	ldr	r1, [pc, #456]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f52:	4b6d      	ldr	r3, [pc, #436]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	4969      	ldr	r1, [pc, #420]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f74:	4b64      	ldr	r3, [pc, #400]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4961      	ldr	r1, [pc, #388]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f96:	4b5c      	ldr	r3, [pc, #368]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	4958      	ldr	r1, [pc, #352]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d015      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fb8:	4b53      	ldr	r3, [pc, #332]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	4950      	ldr	r1, [pc, #320]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd8:	4b4b      	ldr	r3, [pc, #300]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a4a      	ldr	r2, [pc, #296]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fe2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d015      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ff0:	4b45      	ldr	r3, [pc, #276]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	4942      	ldr	r1, [pc, #264]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800400e:	d105      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004010:	4b3d      	ldr	r3, [pc, #244]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a3c      	ldr	r2, [pc, #240]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d015      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004028:	4b37      	ldr	r3, [pc, #220]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	4934      	ldr	r1, [pc, #208]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004046:	d105      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004048:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a2e      	ldr	r2, [pc, #184]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004052:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d015      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	4926      	ldr	r1, [pc, #152]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407e:	d105      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004080:	4b21      	ldr	r3, [pc, #132]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a20      	ldr	r2, [pc, #128]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d015      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	4918      	ldr	r1, [pc, #96]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b6:	d105      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b8:	4b13      	ldr	r3, [pc, #76]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a12      	ldr	r2, [pc, #72]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d015      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	490a      	ldr	r1, [pc, #40]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ee:	d105      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a04      	ldr	r2, [pc, #16]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000

0800410c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e09d      	b.n	800425a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	2b00      	cmp	r3, #0
 8004124:	d108      	bne.n	8004138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800412e:	d009      	beq.n	8004144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	61da      	str	r2, [r3, #28]
 8004136:	e005      	b.n	8004144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fd f958 	bl	8001414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800417a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004184:	d902      	bls.n	800418c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e002      	b.n	8004192 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800418c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004190:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800419a:	d007      	beq.n	80041ac <HAL_SPI_Init+0xa0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041a4:	d002      	beq.n	80041ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	ea42 0103 	orr.w	r1, r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	0c1b      	lsrs	r3, r3, #16
 8004208:	f003 0204 	and.w	r2, r3, #4
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004228:	ea42 0103 	orr.w	r1, r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004248:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b088      	sub	sp, #32
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_SPI_Transmit+0x22>
 8004280:	2302      	movs	r3, #2
 8004282:	e158      	b.n	8004536 <HAL_SPI_Transmit+0x2d4>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800428c:	f7fd fea0 	bl	8001fd0 <HAL_GetTick>
 8004290:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d002      	beq.n	80042a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
 80042a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042a6:	e13d      	b.n	8004524 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_SPI_Transmit+0x52>
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d102      	bne.n	80042ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042b8:	e134      	b.n	8004524 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2203      	movs	r2, #3
 80042be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	88fa      	ldrh	r2, [r7, #6]
 80042d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	88fa      	ldrh	r2, [r7, #6]
 80042d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004304:	d10f      	bne.n	8004326 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004314:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004324:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d007      	beq.n	8004344 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004342:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800434c:	d94b      	bls.n	80043e6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_SPI_Transmit+0xfa>
 8004356:	8afb      	ldrh	r3, [r7, #22]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d13e      	bne.n	80043da <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	881a      	ldrh	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	1c9a      	adds	r2, r3, #2
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004380:	e02b      	b.n	80043da <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b02      	cmp	r3, #2
 800438e:	d112      	bne.n	80043b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	881a      	ldrh	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	1c9a      	adds	r2, r3, #2
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043b4:	e011      	b.n	80043da <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b6:	f7fd fe0b 	bl	8001fd0 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d803      	bhi.n	80043ce <HAL_SPI_Transmit+0x16c>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043cc:	d102      	bne.n	80043d4 <HAL_SPI_Transmit+0x172>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d102      	bne.n	80043da <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043d8:	e0a4      	b.n	8004524 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ce      	bne.n	8004382 <HAL_SPI_Transmit+0x120>
 80043e4:	e07c      	b.n	80044e0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_SPI_Transmit+0x192>
 80043ee:	8afb      	ldrh	r3, [r7, #22]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d170      	bne.n	80044d6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d912      	bls.n	8004424 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	881a      	ldrh	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	1c9a      	adds	r2, r3, #2
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b02      	subs	r3, #2
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004422:	e058      	b.n	80044d6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800444a:	e044      	b.n	80044d6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d12b      	bne.n	80044b2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	d912      	bls.n	800448a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	881a      	ldrh	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	1c9a      	adds	r2, r3, #2
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b02      	subs	r3, #2
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004488:	e025      	b.n	80044d6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	7812      	ldrb	r2, [r2, #0]
 8004496:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044b0:	e011      	b.n	80044d6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b2:	f7fd fd8d 	bl	8001fd0 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d803      	bhi.n	80044ca <HAL_SPI_Transmit+0x268>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c8:	d102      	bne.n	80044d0 <HAL_SPI_Transmit+0x26e>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044d4:	e026      	b.n	8004524 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1b5      	bne.n	800444c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	6839      	ldr	r1, [r7, #0]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f949 	bl	800477c <SPI_EndRxTxTransaction>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e000      	b.n	8004524 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004522:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004534:	7ffb      	ldrb	r3, [r7, #31]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004550:	f7fd fd3e 	bl	8001fd0 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	4413      	add	r3, r2
 800455e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004560:	f7fd fd36 	bl	8001fd0 <HAL_GetTick>
 8004564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004566:	4b39      	ldr	r3, [pc, #228]	; (800464c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	015b      	lsls	r3, r3, #5
 800456c:	0d1b      	lsrs	r3, r3, #20
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	fb02 f303 	mul.w	r3, r2, r3
 8004574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004576:	e054      	b.n	8004622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457e:	d050      	beq.n	8004622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004580:	f7fd fd26 	bl	8001fd0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	429a      	cmp	r2, r3
 800458e:	d902      	bls.n	8004596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d13d      	bne.n	8004612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ae:	d111      	bne.n	80045d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b8:	d004      	beq.n	80045c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c2:	d107      	bne.n	80045d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045dc:	d10f      	bne.n	80045fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e017      	b.n	8004642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	3b01      	subs	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	bf0c      	ite	eq
 8004632:	2301      	moveq	r3, #1
 8004634:	2300      	movne	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	429a      	cmp	r2, r3
 800463e:	d19b      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000000 	.word	0x20000000

08004650 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004662:	f7fd fcb5 	bl	8001fd0 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	4413      	add	r3, r2
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004672:	f7fd fcad 	bl	8001fd0 <HAL_GetTick>
 8004676:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004680:	4b3d      	ldr	r3, [pc, #244]	; (8004778 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	00da      	lsls	r2, r3, #3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	0d1b      	lsrs	r3, r3, #20
 8004690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004698:	e060      	b.n	800475c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046a0:	d107      	bne.n	80046b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d104      	bne.n	80046b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b8:	d050      	beq.n	800475c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046ba:	f7fd fc89 	bl	8001fd0 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d902      	bls.n	80046d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d13d      	bne.n	800474c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e8:	d111      	bne.n	800470e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f2:	d004      	beq.n	80046fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fc:	d107      	bne.n	800470e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	d10f      	bne.n	8004738 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004736:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e010      	b.n	800476e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	3b01      	subs	r3, #1
 800475a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	4013      	ands	r3, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	d196      	bne.n	800469a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3728      	adds	r7, #40	; 0x28
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000000 	.word	0x20000000

0800477c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2200      	movs	r2, #0
 8004790:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f7ff ff5b 	bl	8004650 <SPI_WaitFifoStateUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a4:	f043 0220 	orr.w	r2, r3, #32
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e027      	b.n	8004800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2200      	movs	r2, #0
 80047b8:	2180      	movs	r1, #128	; 0x80
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff fec0 	bl	8004540 <SPI_WaitFlagStateUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e014      	b.n	8004800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2200      	movs	r2, #0
 80047de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff ff34 	bl	8004650 <SPI_WaitFifoStateUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e000      	b.n	8004800 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e049      	b.n	80048ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fd f99e 	bl	8001b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f000 fd5c 	bl	8005304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d001      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e04a      	b.n	8004966 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a21      	ldr	r2, [pc, #132]	; (8004974 <HAL_TIM_Base_Start_IT+0xbc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d018      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x6c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d013      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x6c>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <HAL_TIM_Base_Start_IT+0xc0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00e      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x6c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1c      	ldr	r2, [pc, #112]	; (800497c <HAL_TIM_Base_Start_IT+0xc4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x6c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <HAL_TIM_Base_Start_IT+0xc8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_TIM_Base_Start_IT+0x6c>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a19      	ldr	r2, [pc, #100]	; (8004984 <HAL_TIM_Base_Start_IT+0xcc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d115      	bne.n	8004950 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	4b17      	ldr	r3, [pc, #92]	; (8004988 <HAL_TIM_Base_Start_IT+0xd0>)
 800492c:	4013      	ands	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b06      	cmp	r3, #6
 8004934:	d015      	beq.n	8004962 <HAL_TIM_Base_Start_IT+0xaa>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493c:	d011      	beq.n	8004962 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494e:	e008      	b.n	8004962 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e000      	b.n	8004964 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800
 8004980:	40013400 	.word	0x40013400
 8004984:	40014000 	.word	0x40014000
 8004988:	00010007 	.word	0x00010007

0800498c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e049      	b.n	8004a32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f841 	bl	8004a3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f000 fc9a 	bl	8005304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e097      	b.n	8004b92 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fd f89a 	bl	8001bb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004a92:	f023 0307 	bic.w	r3, r3, #7
 8004a96:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f000 fc2e 	bl	8005304 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad0:	f023 0303 	bic.w	r3, r3, #3
 8004ad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004aee:	f023 030c 	bic.w	r3, r3, #12
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	011a      	lsls	r2, r3, #4
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	031b      	lsls	r3, r3, #12
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b2c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b34:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	4313      	orrs	r3, r2
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d122      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d11b      	bne.n	8004bf6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0202 	mvn.w	r2, #2
 8004bc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fb73 	bl	80052c8 <HAL_TIM_IC_CaptureCallback>
 8004be2:	e005      	b.n	8004bf0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fb65 	bl	80052b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fb76 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d122      	bne.n	8004c4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d11b      	bne.n	8004c4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f06f 0204 	mvn.w	r2, #4
 8004c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fb49 	bl	80052c8 <HAL_TIM_IC_CaptureCallback>
 8004c36:	e005      	b.n	8004c44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fb3b 	bl	80052b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fb4c 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d122      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d11b      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f06f 0208 	mvn.w	r2, #8
 8004c6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2204      	movs	r2, #4
 8004c74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fb1f 	bl	80052c8 <HAL_TIM_IC_CaptureCallback>
 8004c8a:	e005      	b.n	8004c98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fb11 	bl	80052b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fb22 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d122      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d11b      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f06f 0210 	mvn.w	r2, #16
 8004cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2208      	movs	r2, #8
 8004cc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 faf5 	bl	80052c8 <HAL_TIM_IC_CaptureCallback>
 8004cde:	e005      	b.n	8004cec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fae7 	bl	80052b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 faf8 	bl	80052dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d10e      	bne.n	8004d1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d107      	bne.n	8004d1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f06f 0201 	mvn.w	r2, #1
 8004d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fc facd 	bl	80012b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d28:	2b80      	cmp	r3, #128	; 0x80
 8004d2a:	d10e      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d107      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f001 f82b 	bl	8005da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d58:	d10e      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d64:	2b80      	cmp	r3, #128	; 0x80
 8004d66:	d107      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f001 f81e 	bl	8005db4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d10e      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	d107      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 faa6 	bl	80052f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d10e      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d107      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0220 	mvn.w	r2, #32
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 ffde 	bl	8005d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dde:	d10f      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 ffe4 	bl	8005dc8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e0e:	d10f      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e1e:	d107      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 ffd6 	bl	8005ddc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3e:	d10f      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4e:	d107      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 ffc8 	bl	8005df0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e6e:	d10f      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e7e:	d107      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 ffba 	bl	8005e04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e0ff      	b.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b14      	cmp	r3, #20
 8004ec2:	f200 80f0 	bhi.w	80050a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ec6:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004f21 	.word	0x08004f21
 8004ed0:	080050a7 	.word	0x080050a7
 8004ed4:	080050a7 	.word	0x080050a7
 8004ed8:	080050a7 	.word	0x080050a7
 8004edc:	08004f61 	.word	0x08004f61
 8004ee0:	080050a7 	.word	0x080050a7
 8004ee4:	080050a7 	.word	0x080050a7
 8004ee8:	080050a7 	.word	0x080050a7
 8004eec:	08004fa3 	.word	0x08004fa3
 8004ef0:	080050a7 	.word	0x080050a7
 8004ef4:	080050a7 	.word	0x080050a7
 8004ef8:	080050a7 	.word	0x080050a7
 8004efc:	08004fe3 	.word	0x08004fe3
 8004f00:	080050a7 	.word	0x080050a7
 8004f04:	080050a7 	.word	0x080050a7
 8004f08:	080050a7 	.word	0x080050a7
 8004f0c:	08005025 	.word	0x08005025
 8004f10:	080050a7 	.word	0x080050a7
 8004f14:	080050a7 	.word	0x080050a7
 8004f18:	080050a7 	.word	0x080050a7
 8004f1c:	08005065 	.word	0x08005065
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fa7c 	bl	8005424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0208 	orr.w	r2, r2, #8
 8004f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0204 	bic.w	r2, r2, #4
 8004f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6999      	ldr	r1, [r3, #24]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	619a      	str	r2, [r3, #24]
      break;
 8004f5e:	e0a5      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 faec 	bl	8005544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6999      	ldr	r1, [r3, #24]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	021a      	lsls	r2, r3, #8
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	619a      	str	r2, [r3, #24]
      break;
 8004fa0:	e084      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fb55 	bl	8005658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0208 	orr.w	r2, r2, #8
 8004fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0204 	bic.w	r2, r2, #4
 8004fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	61da      	str	r2, [r3, #28]
      break;
 8004fe0:	e064      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fbbd 	bl	8005768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69d9      	ldr	r1, [r3, #28]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	021a      	lsls	r2, r3, #8
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	61da      	str	r2, [r3, #28]
      break;
 8005022:	e043      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fc26 	bl	800587c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0208 	orr.w	r2, r2, #8
 800503e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0204 	bic.w	r2, r2, #4
 800504e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005062:	e023      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fc6a 	bl	8005944 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800507e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	021a      	lsls	r2, r3, #8
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050a4:	e002      	b.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
      break;
 80050aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop

080050c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_ConfigClockSource+0x1c>
 80050d8:	2302      	movs	r3, #2
 80050da:	e0de      	b.n	800529a <HAL_TIM_ConfigClockSource+0x1da>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80050fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a63      	ldr	r2, [pc, #396]	; (80052a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	f000 80a9 	beq.w	800526e <HAL_TIM_ConfigClockSource+0x1ae>
 800511c:	4a61      	ldr	r2, [pc, #388]	; (80052a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	f200 80ae 	bhi.w	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 8005124:	4a60      	ldr	r2, [pc, #384]	; (80052a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	f000 80a1 	beq.w	800526e <HAL_TIM_ConfigClockSource+0x1ae>
 800512c:	4a5e      	ldr	r2, [pc, #376]	; (80052a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	f200 80a6 	bhi.w	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 8005134:	4a5d      	ldr	r2, [pc, #372]	; (80052ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8005136:	4293      	cmp	r3, r2
 8005138:	f000 8099 	beq.w	800526e <HAL_TIM_ConfigClockSource+0x1ae>
 800513c:	4a5b      	ldr	r2, [pc, #364]	; (80052ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800513e:	4293      	cmp	r3, r2
 8005140:	f200 809e 	bhi.w	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 8005144:	4a5a      	ldr	r2, [pc, #360]	; (80052b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	f000 8091 	beq.w	800526e <HAL_TIM_ConfigClockSource+0x1ae>
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	f200 8096 	bhi.w	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 8005154:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005158:	f000 8089 	beq.w	800526e <HAL_TIM_ConfigClockSource+0x1ae>
 800515c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005160:	f200 808e 	bhi.w	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 8005164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005168:	d03e      	beq.n	80051e8 <HAL_TIM_ConfigClockSource+0x128>
 800516a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516e:	f200 8087 	bhi.w	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005176:	f000 8086 	beq.w	8005286 <HAL_TIM_ConfigClockSource+0x1c6>
 800517a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517e:	d87f      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 8005180:	2b70      	cmp	r3, #112	; 0x70
 8005182:	d01a      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0xfa>
 8005184:	2b70      	cmp	r3, #112	; 0x70
 8005186:	d87b      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 8005188:	2b60      	cmp	r3, #96	; 0x60
 800518a:	d050      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x16e>
 800518c:	2b60      	cmp	r3, #96	; 0x60
 800518e:	d877      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 8005190:	2b50      	cmp	r3, #80	; 0x50
 8005192:	d03c      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x14e>
 8005194:	2b50      	cmp	r3, #80	; 0x50
 8005196:	d873      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d058      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x18e>
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d86f      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 80051a0:	2b30      	cmp	r3, #48	; 0x30
 80051a2:	d064      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x1ae>
 80051a4:	2b30      	cmp	r3, #48	; 0x30
 80051a6:	d86b      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d060      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x1ae>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d867      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d05c      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x1ae>
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d05a      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x1ae>
 80051b8:	e062      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6899      	ldr	r1, [r3, #8]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f000 fc9d 	bl	8005b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	609a      	str	r2, [r3, #8]
      break;
 80051e6:	e04f      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	6899      	ldr	r1, [r3, #8]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f000 fc86 	bl	8005b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800520a:	609a      	str	r2, [r3, #8]
      break;
 800520c:	e03c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	461a      	mov	r2, r3
 800521c:	f000 fbf8 	bl	8005a10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2150      	movs	r1, #80	; 0x50
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fc51 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 800522c:	e02c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6859      	ldr	r1, [r3, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	461a      	mov	r2, r3
 800523c:	f000 fc17 	bl	8005a6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2160      	movs	r1, #96	; 0x60
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fc41 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 800524c:	e01c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6859      	ldr	r1, [r3, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	461a      	mov	r2, r3
 800525c:	f000 fbd8 	bl	8005a10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fc31 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 800526c:	e00c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f000 fc28 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 800527e:	e003      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
      break;
 8005284:	e000      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	00100070 	.word	0x00100070
 80052a8:	00100040 	.word	0x00100040
 80052ac:	00100030 	.word	0x00100030
 80052b0:	00100020 	.word	0x00100020

080052b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a3c      	ldr	r2, [pc, #240]	; (8005408 <TIM_Base_SetConfig+0x104>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00f      	beq.n	800533c <TIM_Base_SetConfig+0x38>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005322:	d00b      	beq.n	800533c <TIM_Base_SetConfig+0x38>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a39      	ldr	r2, [pc, #228]	; (800540c <TIM_Base_SetConfig+0x108>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_Base_SetConfig+0x38>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a38      	ldr	r2, [pc, #224]	; (8005410 <TIM_Base_SetConfig+0x10c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0x38>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a37      	ldr	r2, [pc, #220]	; (8005414 <TIM_Base_SetConfig+0x110>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d108      	bne.n	800534e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2d      	ldr	r2, [pc, #180]	; (8005408 <TIM_Base_SetConfig+0x104>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d01b      	beq.n	800538e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d017      	beq.n	800538e <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2a      	ldr	r2, [pc, #168]	; (800540c <TIM_Base_SetConfig+0x108>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a29      	ldr	r2, [pc, #164]	; (8005410 <TIM_Base_SetConfig+0x10c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00f      	beq.n	800538e <TIM_Base_SetConfig+0x8a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a28      	ldr	r2, [pc, #160]	; (8005414 <TIM_Base_SetConfig+0x110>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00b      	beq.n	800538e <TIM_Base_SetConfig+0x8a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a27      	ldr	r2, [pc, #156]	; (8005418 <TIM_Base_SetConfig+0x114>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d007      	beq.n	800538e <TIM_Base_SetConfig+0x8a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a26      	ldr	r2, [pc, #152]	; (800541c <TIM_Base_SetConfig+0x118>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d003      	beq.n	800538e <TIM_Base_SetConfig+0x8a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a25      	ldr	r2, [pc, #148]	; (8005420 <TIM_Base_SetConfig+0x11c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d108      	bne.n	80053a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a10      	ldr	r2, [pc, #64]	; (8005408 <TIM_Base_SetConfig+0x104>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00f      	beq.n	80053ec <TIM_Base_SetConfig+0xe8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a11      	ldr	r2, [pc, #68]	; (8005414 <TIM_Base_SetConfig+0x110>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00b      	beq.n	80053ec <TIM_Base_SetConfig+0xe8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <TIM_Base_SetConfig+0x114>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_Base_SetConfig+0xe8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a0f      	ldr	r2, [pc, #60]	; (800541c <TIM_Base_SetConfig+0x118>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_Base_SetConfig+0xe8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a0e      	ldr	r2, [pc, #56]	; (8005420 <TIM_Base_SetConfig+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d103      	bne.n	80053f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	615a      	str	r2, [r3, #20]
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40013400 	.word	0x40013400
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800

08005424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0201 	bic.w	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f023 0302 	bic.w	r3, r3, #2
 8005470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a2c      	ldr	r2, [pc, #176]	; (8005530 <TIM_OC1_SetConfig+0x10c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00f      	beq.n	80054a4 <TIM_OC1_SetConfig+0x80>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a2b      	ldr	r2, [pc, #172]	; (8005534 <TIM_OC1_SetConfig+0x110>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00b      	beq.n	80054a4 <TIM_OC1_SetConfig+0x80>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a2a      	ldr	r2, [pc, #168]	; (8005538 <TIM_OC1_SetConfig+0x114>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d007      	beq.n	80054a4 <TIM_OC1_SetConfig+0x80>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a29      	ldr	r2, [pc, #164]	; (800553c <TIM_OC1_SetConfig+0x118>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <TIM_OC1_SetConfig+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a28      	ldr	r2, [pc, #160]	; (8005540 <TIM_OC1_SetConfig+0x11c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d10c      	bne.n	80054be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 0308 	bic.w	r3, r3, #8
 80054aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f023 0304 	bic.w	r3, r3, #4
 80054bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1b      	ldr	r2, [pc, #108]	; (8005530 <TIM_OC1_SetConfig+0x10c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00f      	beq.n	80054e6 <TIM_OC1_SetConfig+0xc2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a1a      	ldr	r2, [pc, #104]	; (8005534 <TIM_OC1_SetConfig+0x110>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_OC1_SetConfig+0xc2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a19      	ldr	r2, [pc, #100]	; (8005538 <TIM_OC1_SetConfig+0x114>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <TIM_OC1_SetConfig+0xc2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a18      	ldr	r2, [pc, #96]	; (800553c <TIM_OC1_SetConfig+0x118>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_OC1_SetConfig+0xc2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a17      	ldr	r2, [pc, #92]	; (8005540 <TIM_OC1_SetConfig+0x11c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d111      	bne.n	800550a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40013400 	.word	0x40013400
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800

08005544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0210 	bic.w	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0320 	bic.w	r3, r3, #32
 8005592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a28      	ldr	r2, [pc, #160]	; (8005644 <TIM_OC2_SetConfig+0x100>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_OC2_SetConfig+0x6c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a27      	ldr	r2, [pc, #156]	; (8005648 <TIM_OC2_SetConfig+0x104>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d10d      	bne.n	80055cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <TIM_OC2_SetConfig+0x100>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00f      	beq.n	80055f4 <TIM_OC2_SetConfig+0xb0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a1c      	ldr	r2, [pc, #112]	; (8005648 <TIM_OC2_SetConfig+0x104>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00b      	beq.n	80055f4 <TIM_OC2_SetConfig+0xb0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1b      	ldr	r2, [pc, #108]	; (800564c <TIM_OC2_SetConfig+0x108>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d007      	beq.n	80055f4 <TIM_OC2_SetConfig+0xb0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a1a      	ldr	r2, [pc, #104]	; (8005650 <TIM_OC2_SetConfig+0x10c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC2_SetConfig+0xb0>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a19      	ldr	r2, [pc, #100]	; (8005654 <TIM_OC2_SetConfig+0x110>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d113      	bne.n	800561c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40013400 	.word	0x40013400
 800564c:	40014000 	.word	0x40014000
 8005650:	40014400 	.word	0x40014400
 8005654:	40014800 	.word	0x40014800

08005658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0303 	bic.w	r3, r3, #3
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a27      	ldr	r2, [pc, #156]	; (8005754 <TIM_OC3_SetConfig+0xfc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_OC3_SetConfig+0x6a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a26      	ldr	r2, [pc, #152]	; (8005758 <TIM_OC3_SetConfig+0x100>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d10d      	bne.n	80056de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <TIM_OC3_SetConfig+0xfc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <TIM_OC3_SetConfig+0xae>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <TIM_OC3_SetConfig+0x100>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_OC3_SetConfig+0xae>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1a      	ldr	r2, [pc, #104]	; (800575c <TIM_OC3_SetConfig+0x104>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_OC3_SetConfig+0xae>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a19      	ldr	r2, [pc, #100]	; (8005760 <TIM_OC3_SetConfig+0x108>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC3_SetConfig+0xae>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a18      	ldr	r2, [pc, #96]	; (8005764 <TIM_OC3_SetConfig+0x10c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d113      	bne.n	800572e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800570c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	621a      	str	r2, [r3, #32]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40013400 	.word	0x40013400
 800575c:	40014000 	.word	0x40014000
 8005760:	40014400 	.word	0x40014400
 8005764:	40014800 	.word	0x40014800

08005768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	031b      	lsls	r3, r3, #12
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a28      	ldr	r2, [pc, #160]	; (8005868 <TIM_OC4_SetConfig+0x100>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_OC4_SetConfig+0x6c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a27      	ldr	r2, [pc, #156]	; (800586c <TIM_OC4_SetConfig+0x104>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d10d      	bne.n	80057f0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	031b      	lsls	r3, r3, #12
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <TIM_OC4_SetConfig+0x100>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00f      	beq.n	8005818 <TIM_OC4_SetConfig+0xb0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a1c      	ldr	r2, [pc, #112]	; (800586c <TIM_OC4_SetConfig+0x104>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00b      	beq.n	8005818 <TIM_OC4_SetConfig+0xb0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <TIM_OC4_SetConfig+0x108>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d007      	beq.n	8005818 <TIM_OC4_SetConfig+0xb0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a1a      	ldr	r2, [pc, #104]	; (8005874 <TIM_OC4_SetConfig+0x10c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC4_SetConfig+0xb0>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a19      	ldr	r2, [pc, #100]	; (8005878 <TIM_OC4_SetConfig+0x110>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d113      	bne.n	8005840 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005826:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	019b      	lsls	r3, r3, #6
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	019b      	lsls	r3, r3, #6
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400
 8005878:	40014800 	.word	0x40014800

0800587c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a17      	ldr	r2, [pc, #92]	; (8005930 <TIM_OC5_SetConfig+0xb4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00f      	beq.n	80058f6 <TIM_OC5_SetConfig+0x7a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a16      	ldr	r2, [pc, #88]	; (8005934 <TIM_OC5_SetConfig+0xb8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00b      	beq.n	80058f6 <TIM_OC5_SetConfig+0x7a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a15      	ldr	r2, [pc, #84]	; (8005938 <TIM_OC5_SetConfig+0xbc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <TIM_OC5_SetConfig+0x7a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a14      	ldr	r2, [pc, #80]	; (800593c <TIM_OC5_SetConfig+0xc0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_OC5_SetConfig+0x7a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a13      	ldr	r2, [pc, #76]	; (8005940 <TIM_OC5_SetConfig+0xc4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d109      	bne.n	800590a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40013400 	.word	0x40013400
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800

08005944 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	021b      	lsls	r3, r3, #8
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800598a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	051b      	lsls	r3, r3, #20
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <TIM_OC6_SetConfig+0xb8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00f      	beq.n	80059c0 <TIM_OC6_SetConfig+0x7c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <TIM_OC6_SetConfig+0xbc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <TIM_OC6_SetConfig+0x7c>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a16      	ldr	r2, [pc, #88]	; (8005a04 <TIM_OC6_SetConfig+0xc0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_OC6_SetConfig+0x7c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <TIM_OC6_SetConfig+0xc4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC6_SetConfig+0x7c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a14      	ldr	r2, [pc, #80]	; (8005a0c <TIM_OC6_SetConfig+0xc8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d109      	bne.n	80059d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	029b      	lsls	r3, r3, #10
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	621a      	str	r2, [r3, #32]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800

08005a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f023 0201 	bic.w	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 030a 	bic.w	r3, r3, #10
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	621a      	str	r2, [r3, #32]
}
 8005a62:	bf00      	nop
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b087      	sub	sp, #28
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f023 0210 	bic.w	r2, r3, #16
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	031b      	lsls	r3, r3, #12
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f043 0307 	orr.w	r3, r3, #7
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	609a      	str	r2, [r3, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e065      	b.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a2c      	ldr	r2, [pc, #176]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a2b      	ldr	r2, [pc, #172]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d108      	bne.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d018      	beq.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd6:	d013      	beq.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00e      	beq.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d009      	beq.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a12      	ldr	r2, [pc, #72]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d10c      	bne.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40013400 	.word	0x40013400
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800
 8005c48:	40014000 	.word	0x40014000

08005c4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e087      	b.n	8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a27      	ldr	r2, [pc, #156]	; (8005d84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d106      	bne.n	8005d04 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d004      	beq.n	8005d18 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1d      	ldr	r2, [pc, #116]	; (8005d88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d126      	bne.n	8005d66 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	051b      	lsls	r3, r3, #20
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a0e      	ldr	r2, [pc, #56]	; (8005d84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a0d      	ldr	r2, [pc, #52]	; (8005d88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d106      	bne.n	8005d66 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40013400 	.word	0x40013400

08005d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e042      	b.n	8005eb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7fc f81b 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2224      	movs	r2, #36	; 0x24
 8005e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f8c2 	bl	8005fe4 <UART_SetConfig>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e022      	b.n	8005eb0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fb82 	bl	800657c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fc09 	bl	80066c0 <UART_CheckIdleState>
 8005eae:	4603      	mov	r3, r0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	f040 8083 	bne.w	8005fda <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_UART_Transmit+0x28>
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e07b      	b.n	8005fdc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Transmit+0x3a>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e074      	b.n	8005fdc <HAL_UART_Transmit+0x124>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2221      	movs	r2, #33	; 0x21
 8005f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f0a:	f7fc f861 	bl	8001fd0 <HAL_GetTick>
 8005f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	88fa      	ldrh	r2, [r7, #6]
 8005f14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	88fa      	ldrh	r2, [r7, #6]
 8005f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f28:	d108      	bne.n	8005f3c <HAL_UART_Transmit+0x84>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d104      	bne.n	8005f3c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	e003      	b.n	8005f44 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005f4c:	e02c      	b.n	8005fa8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	2180      	movs	r1, #128	; 0x80
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fbfc 	bl	8006756 <UART_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e039      	b.n	8005fdc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10b      	bne.n	8005f86 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	3302      	adds	r3, #2
 8005f82:	61bb      	str	r3, [r7, #24]
 8005f84:	e007      	b.n	8005f96 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	3301      	adds	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1cc      	bne.n	8005f4e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2140      	movs	r1, #64	; 0x40
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 fbc9 	bl	8006756 <UART_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e006      	b.n	8005fdc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e000      	b.n	8005fdc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005fda:	2302      	movs	r3, #2
  }
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe8:	b08c      	sub	sp, #48	; 0x30
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	431a      	orrs	r2, r3
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	4313      	orrs	r3, r2
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4bab      	ldr	r3, [pc, #684]	; (80062c0 <UART_SetConfig+0x2dc>)
 8006014:	4013      	ands	r3, r2
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800601c:	430b      	orrs	r3, r1
 800601e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4aa0      	ldr	r2, [pc, #640]	; (80062c4 <UART_SetConfig+0x2e0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d004      	beq.n	8006050 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800604c:	4313      	orrs	r3, r2
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800605a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006064:	430b      	orrs	r3, r1
 8006066:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	f023 010f 	bic.w	r1, r3, #15
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a91      	ldr	r2, [pc, #580]	; (80062c8 <UART_SetConfig+0x2e4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d125      	bne.n	80060d4 <UART_SetConfig+0xf0>
 8006088:	4b90      	ldr	r3, [pc, #576]	; (80062cc <UART_SetConfig+0x2e8>)
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b03      	cmp	r3, #3
 8006094:	d81a      	bhi.n	80060cc <UART_SetConfig+0xe8>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <UART_SetConfig+0xb8>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060ad 	.word	0x080060ad
 80060a0:	080060bd 	.word	0x080060bd
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060c5 	.word	0x080060c5
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060b2:	e0d6      	b.n	8006262 <UART_SetConfig+0x27e>
 80060b4:	2302      	movs	r3, #2
 80060b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ba:	e0d2      	b.n	8006262 <UART_SetConfig+0x27e>
 80060bc:	2304      	movs	r3, #4
 80060be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c2:	e0ce      	b.n	8006262 <UART_SetConfig+0x27e>
 80060c4:	2308      	movs	r3, #8
 80060c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ca:	e0ca      	b.n	8006262 <UART_SetConfig+0x27e>
 80060cc:	2310      	movs	r3, #16
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d2:	e0c6      	b.n	8006262 <UART_SetConfig+0x27e>
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a7d      	ldr	r2, [pc, #500]	; (80062d0 <UART_SetConfig+0x2ec>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d138      	bne.n	8006150 <UART_SetConfig+0x16c>
 80060de:	4b7b      	ldr	r3, [pc, #492]	; (80062cc <UART_SetConfig+0x2e8>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e4:	f003 030c 	and.w	r3, r3, #12
 80060e8:	2b0c      	cmp	r3, #12
 80060ea:	d82d      	bhi.n	8006148 <UART_SetConfig+0x164>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0x110>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006129 	.word	0x08006129
 80060f8:	08006149 	.word	0x08006149
 80060fc:	08006149 	.word	0x08006149
 8006100:	08006149 	.word	0x08006149
 8006104:	08006139 	.word	0x08006139
 8006108:	08006149 	.word	0x08006149
 800610c:	08006149 	.word	0x08006149
 8006110:	08006149 	.word	0x08006149
 8006114:	08006131 	.word	0x08006131
 8006118:	08006149 	.word	0x08006149
 800611c:	08006149 	.word	0x08006149
 8006120:	08006149 	.word	0x08006149
 8006124:	08006141 	.word	0x08006141
 8006128:	2300      	movs	r3, #0
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612e:	e098      	b.n	8006262 <UART_SetConfig+0x27e>
 8006130:	2302      	movs	r3, #2
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006136:	e094      	b.n	8006262 <UART_SetConfig+0x27e>
 8006138:	2304      	movs	r3, #4
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613e:	e090      	b.n	8006262 <UART_SetConfig+0x27e>
 8006140:	2308      	movs	r3, #8
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006146:	e08c      	b.n	8006262 <UART_SetConfig+0x27e>
 8006148:	2310      	movs	r3, #16
 800614a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800614e:	e088      	b.n	8006262 <UART_SetConfig+0x27e>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a5f      	ldr	r2, [pc, #380]	; (80062d4 <UART_SetConfig+0x2f0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d125      	bne.n	80061a6 <UART_SetConfig+0x1c2>
 800615a:	4b5c      	ldr	r3, [pc, #368]	; (80062cc <UART_SetConfig+0x2e8>)
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006160:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006164:	2b30      	cmp	r3, #48	; 0x30
 8006166:	d016      	beq.n	8006196 <UART_SetConfig+0x1b2>
 8006168:	2b30      	cmp	r3, #48	; 0x30
 800616a:	d818      	bhi.n	800619e <UART_SetConfig+0x1ba>
 800616c:	2b20      	cmp	r3, #32
 800616e:	d00a      	beq.n	8006186 <UART_SetConfig+0x1a2>
 8006170:	2b20      	cmp	r3, #32
 8006172:	d814      	bhi.n	800619e <UART_SetConfig+0x1ba>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <UART_SetConfig+0x19a>
 8006178:	2b10      	cmp	r3, #16
 800617a:	d008      	beq.n	800618e <UART_SetConfig+0x1aa>
 800617c:	e00f      	b.n	800619e <UART_SetConfig+0x1ba>
 800617e:	2300      	movs	r3, #0
 8006180:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006184:	e06d      	b.n	8006262 <UART_SetConfig+0x27e>
 8006186:	2302      	movs	r3, #2
 8006188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800618c:	e069      	b.n	8006262 <UART_SetConfig+0x27e>
 800618e:	2304      	movs	r3, #4
 8006190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006194:	e065      	b.n	8006262 <UART_SetConfig+0x27e>
 8006196:	2308      	movs	r3, #8
 8006198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800619c:	e061      	b.n	8006262 <UART_SetConfig+0x27e>
 800619e:	2310      	movs	r3, #16
 80061a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a4:	e05d      	b.n	8006262 <UART_SetConfig+0x27e>
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a4b      	ldr	r2, [pc, #300]	; (80062d8 <UART_SetConfig+0x2f4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d125      	bne.n	80061fc <UART_SetConfig+0x218>
 80061b0:	4b46      	ldr	r3, [pc, #280]	; (80062cc <UART_SetConfig+0x2e8>)
 80061b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061ba:	2bc0      	cmp	r3, #192	; 0xc0
 80061bc:	d016      	beq.n	80061ec <UART_SetConfig+0x208>
 80061be:	2bc0      	cmp	r3, #192	; 0xc0
 80061c0:	d818      	bhi.n	80061f4 <UART_SetConfig+0x210>
 80061c2:	2b80      	cmp	r3, #128	; 0x80
 80061c4:	d00a      	beq.n	80061dc <UART_SetConfig+0x1f8>
 80061c6:	2b80      	cmp	r3, #128	; 0x80
 80061c8:	d814      	bhi.n	80061f4 <UART_SetConfig+0x210>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <UART_SetConfig+0x1f0>
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	d008      	beq.n	80061e4 <UART_SetConfig+0x200>
 80061d2:	e00f      	b.n	80061f4 <UART_SetConfig+0x210>
 80061d4:	2300      	movs	r3, #0
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061da:	e042      	b.n	8006262 <UART_SetConfig+0x27e>
 80061dc:	2302      	movs	r3, #2
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e2:	e03e      	b.n	8006262 <UART_SetConfig+0x27e>
 80061e4:	2304      	movs	r3, #4
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ea:	e03a      	b.n	8006262 <UART_SetConfig+0x27e>
 80061ec:	2308      	movs	r3, #8
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f2:	e036      	b.n	8006262 <UART_SetConfig+0x27e>
 80061f4:	2310      	movs	r3, #16
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fa:	e032      	b.n	8006262 <UART_SetConfig+0x27e>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a30      	ldr	r2, [pc, #192]	; (80062c4 <UART_SetConfig+0x2e0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d12a      	bne.n	800625c <UART_SetConfig+0x278>
 8006206:	4b31      	ldr	r3, [pc, #196]	; (80062cc <UART_SetConfig+0x2e8>)
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006210:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006214:	d01a      	beq.n	800624c <UART_SetConfig+0x268>
 8006216:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800621a:	d81b      	bhi.n	8006254 <UART_SetConfig+0x270>
 800621c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006220:	d00c      	beq.n	800623c <UART_SetConfig+0x258>
 8006222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006226:	d815      	bhi.n	8006254 <UART_SetConfig+0x270>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <UART_SetConfig+0x250>
 800622c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006230:	d008      	beq.n	8006244 <UART_SetConfig+0x260>
 8006232:	e00f      	b.n	8006254 <UART_SetConfig+0x270>
 8006234:	2300      	movs	r3, #0
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623a:	e012      	b.n	8006262 <UART_SetConfig+0x27e>
 800623c:	2302      	movs	r3, #2
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006242:	e00e      	b.n	8006262 <UART_SetConfig+0x27e>
 8006244:	2304      	movs	r3, #4
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800624a:	e00a      	b.n	8006262 <UART_SetConfig+0x27e>
 800624c:	2308      	movs	r3, #8
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006252:	e006      	b.n	8006262 <UART_SetConfig+0x27e>
 8006254:	2310      	movs	r3, #16
 8006256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800625a:	e002      	b.n	8006262 <UART_SetConfig+0x27e>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <UART_SetConfig+0x2e0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	f040 80a8 	bne.w	80063be <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800626e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006272:	2b08      	cmp	r3, #8
 8006274:	d834      	bhi.n	80062e0 <UART_SetConfig+0x2fc>
 8006276:	a201      	add	r2, pc, #4	; (adr r2, 800627c <UART_SetConfig+0x298>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062e1 	.word	0x080062e1
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062e1 	.word	0x080062e1
 800628c:	080062af 	.word	0x080062af
 8006290:	080062e1 	.word	0x080062e1
 8006294:	080062e1 	.word	0x080062e1
 8006298:	080062e1 	.word	0x080062e1
 800629c:	080062b7 	.word	0x080062b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fd fca0 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 80062a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062a6:	e021      	b.n	80062ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <UART_SetConfig+0x2f8>)
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062ac:	e01e      	b.n	80062ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ae:	f7fd fc2b 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 80062b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062b4:	e01a      	b.n	80062ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062bc:	e016      	b.n	80062ec <UART_SetConfig+0x308>
 80062be:	bf00      	nop
 80062c0:	cfff69f3 	.word	0xcfff69f3
 80062c4:	40008000 	.word	0x40008000
 80062c8:	40013800 	.word	0x40013800
 80062cc:	40021000 	.word	0x40021000
 80062d0:	40004400 	.word	0x40004400
 80062d4:	40004800 	.word	0x40004800
 80062d8:	40004c00 	.word	0x40004c00
 80062dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 812a 	beq.w	8006548 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	4a9e      	ldr	r2, [pc, #632]	; (8006574 <UART_SetConfig+0x590>)
 80062fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062fe:	461a      	mov	r2, r3
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	fbb3 f3f2 	udiv	r3, r3, r2
 8006306:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	4413      	add	r3, r2
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	429a      	cmp	r2, r3
 8006316:	d305      	bcc.n	8006324 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	429a      	cmp	r2, r3
 8006322:	d903      	bls.n	800632c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800632a:	e10d      	b.n	8006548 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	2200      	movs	r2, #0
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	60fa      	str	r2, [r7, #12]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	4a8e      	ldr	r2, [pc, #568]	; (8006574 <UART_SetConfig+0x590>)
 800633a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800633e:	b29b      	uxth	r3, r3
 8006340:	2200      	movs	r2, #0
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800634e:	f7fa fc53 	bl	8000bf8 <__aeabi_uldivmod>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4610      	mov	r0, r2
 8006358:	4619      	mov	r1, r3
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	020b      	lsls	r3, r1, #8
 8006364:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006368:	0202      	lsls	r2, r0, #8
 800636a:	6979      	ldr	r1, [r7, #20]
 800636c:	6849      	ldr	r1, [r1, #4]
 800636e:	0849      	lsrs	r1, r1, #1
 8006370:	2000      	movs	r0, #0
 8006372:	460c      	mov	r4, r1
 8006374:	4605      	mov	r5, r0
 8006376:	eb12 0804 	adds.w	r8, r2, r4
 800637a:	eb43 0905 	adc.w	r9, r3, r5
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	469a      	mov	sl, r3
 8006386:	4693      	mov	fp, r2
 8006388:	4652      	mov	r2, sl
 800638a:	465b      	mov	r3, fp
 800638c:	4640      	mov	r0, r8
 800638e:	4649      	mov	r1, r9
 8006390:	f7fa fc32 	bl	8000bf8 <__aeabi_uldivmod>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4613      	mov	r3, r2
 800639a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a2:	d308      	bcc.n	80063b6 <UART_SetConfig+0x3d2>
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063aa:	d204      	bcs.n	80063b6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6a3a      	ldr	r2, [r7, #32]
 80063b2:	60da      	str	r2, [r3, #12]
 80063b4:	e0c8      	b.n	8006548 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063bc:	e0c4      	b.n	8006548 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c6:	d167      	bne.n	8006498 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80063c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d828      	bhi.n	8006422 <UART_SetConfig+0x43e>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0x3f4>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063fd 	.word	0x080063fd
 80063dc:	08006405 	.word	0x08006405
 80063e0:	0800640d 	.word	0x0800640d
 80063e4:	08006423 	.word	0x08006423
 80063e8:	08006413 	.word	0x08006413
 80063ec:	08006423 	.word	0x08006423
 80063f0:	08006423 	.word	0x08006423
 80063f4:	08006423 	.word	0x08006423
 80063f8:	0800641b 	.word	0x0800641b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063fc:	f7fd fbf2 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 8006400:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006402:	e014      	b.n	800642e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006404:	f7fd fc04 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8006408:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800640a:	e010      	b.n	800642e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800640c:	4b5a      	ldr	r3, [pc, #360]	; (8006578 <UART_SetConfig+0x594>)
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006410:	e00d      	b.n	800642e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006412:	f7fd fb79 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8006416:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006418:	e009      	b.n	800642e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800641a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006420:	e005      	b.n	800642e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800642c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 8089 	beq.w	8006548 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	4a4e      	ldr	r2, [pc, #312]	; (8006574 <UART_SetConfig+0x590>)
 800643c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006440:	461a      	mov	r2, r3
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	fbb3 f3f2 	udiv	r3, r3, r2
 8006448:	005a      	lsls	r2, r3, #1
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	441a      	add	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	fbb2 f3f3 	udiv	r3, r2, r3
 800645a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	2b0f      	cmp	r3, #15
 8006460:	d916      	bls.n	8006490 <UART_SetConfig+0x4ac>
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006468:	d212      	bcs.n	8006490 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	b29b      	uxth	r3, r3
 800646e:	f023 030f 	bic.w	r3, r3, #15
 8006472:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	b29b      	uxth	r3, r3
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	b29a      	uxth	r2, r3
 8006480:	8bfb      	ldrh	r3, [r7, #30]
 8006482:	4313      	orrs	r3, r2
 8006484:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	8bfa      	ldrh	r2, [r7, #30]
 800648c:	60da      	str	r2, [r3, #12]
 800648e:	e05b      	b.n	8006548 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006496:	e057      	b.n	8006548 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006498:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800649c:	2b08      	cmp	r3, #8
 800649e:	d828      	bhi.n	80064f2 <UART_SetConfig+0x50e>
 80064a0:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <UART_SetConfig+0x4c4>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064dd 	.word	0x080064dd
 80064b4:	080064f3 	.word	0x080064f3
 80064b8:	080064e3 	.word	0x080064e3
 80064bc:	080064f3 	.word	0x080064f3
 80064c0:	080064f3 	.word	0x080064f3
 80064c4:	080064f3 	.word	0x080064f3
 80064c8:	080064eb 	.word	0x080064eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064cc:	f7fd fb8a 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 80064d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064d2:	e014      	b.n	80064fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d4:	f7fd fb9c 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 80064d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064da:	e010      	b.n	80064fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064dc:	4b26      	ldr	r3, [pc, #152]	; (8006578 <UART_SetConfig+0x594>)
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064e0:	e00d      	b.n	80064fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064e2:	f7fd fb11 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064e8:	e009      	b.n	80064fe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064f0:	e005      	b.n	80064fe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064fc:	bf00      	nop
    }

    if (pclk != 0U)
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d021      	beq.n	8006548 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	4a1a      	ldr	r2, [pc, #104]	; (8006574 <UART_SetConfig+0x590>)
 800650a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800650e:	461a      	mov	r2, r3
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	fbb3 f2f2 	udiv	r2, r3, r2
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	441a      	add	r2, r3
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	fbb2 f3f3 	udiv	r3, r2, r3
 8006526:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	2b0f      	cmp	r3, #15
 800652c:	d909      	bls.n	8006542 <UART_SetConfig+0x55e>
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006534:	d205      	bcs.n	8006542 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	b29a      	uxth	r2, r3
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60da      	str	r2, [r3, #12]
 8006540:	e002      	b.n	8006548 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2201      	movs	r2, #1
 800654c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2201      	movs	r2, #1
 8006554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006564:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006568:	4618      	mov	r0, r3
 800656a:	3730      	adds	r7, #48	; 0x30
 800656c:	46bd      	mov	sp, r7
 800656e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006572:	bf00      	nop
 8006574:	080099ac 	.word	0x080099ac
 8006578:	00f42400 	.word	0x00f42400

0800657c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01a      	beq.n	8006692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800667a:	d10a      	bne.n	8006692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]
  }
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066d0:	f7fb fc7e 	bl	8001fd0 <HAL_GetTick>
 80066d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d10e      	bne.n	8006702 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f82f 	bl	8006756 <UART_WaitOnFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e025      	b.n	800674e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b04      	cmp	r3, #4
 800670e:	d10e      	bne.n	800672e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f819 	bl	8006756 <UART_WaitOnFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e00f      	b.n	800674e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b09c      	sub	sp, #112	; 0x70
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	4613      	mov	r3, r2
 8006764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006766:	e0a9      	b.n	80068bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800676e:	f000 80a5 	beq.w	80068bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006772:	f7fb fc2d 	bl	8001fd0 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <UART_WaitOnFlagUntilTimeout+0x32>
 8006782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006784:	2b00      	cmp	r3, #0
 8006786:	d140      	bne.n	800680a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006798:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800679c:	667b      	str	r3, [r7, #100]	; 0x64
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e6      	bne.n	8006788 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	663b      	str	r3, [r7, #96]	; 0x60
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3308      	adds	r3, #8
 80067d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067da:	64ba      	str	r2, [r7, #72]	; 0x48
 80067dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e5      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e069      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d051      	beq.n	80068bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006826:	d149      	bne.n	80068bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006830:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
 8006852:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e6      	bne.n	8006832 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	613b      	str	r3, [r7, #16]
   return(result);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	66bb      	str	r3, [r7, #104]	; 0x68
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3308      	adds	r3, #8
 8006882:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006884:	623a      	str	r2, [r7, #32]
 8006886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	69f9      	ldr	r1, [r7, #28]
 800688a:	6a3a      	ldr	r2, [r7, #32]
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	61bb      	str	r3, [r7, #24]
   return(result);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e5      	bne.n	8006864 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e010      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69da      	ldr	r2, [r3, #28]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4013      	ands	r3, r2
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	bf0c      	ite	eq
 80068cc:	2301      	moveq	r3, #1
 80068ce:	2300      	movne	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	f43f af46 	beq.w	8006768 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3770      	adds	r7, #112	; 0x70
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_UARTEx_DisableFifoMode+0x16>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e027      	b.n	800694c <HAL_UARTEx_DisableFifoMode+0x66>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2224      	movs	r2, #36	; 0x24
 8006908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800692a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800696c:	2302      	movs	r3, #2
 800696e:	e02d      	b.n	80069cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2224      	movs	r2, #36	; 0x24
 800697c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0201 	bic.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f84f 	bl	8006a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e02d      	b.n	8006a48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2224      	movs	r2, #36	; 0x24
 80069f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0201 	bic.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f811 	bl	8006a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d108      	bne.n	8006a72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a70:	e031      	b.n	8006ad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a72:	2308      	movs	r3, #8
 8006a74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a76:	2308      	movs	r3, #8
 8006a78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	0e5b      	lsrs	r3, r3, #25
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	0f5b      	lsrs	r3, r3, #29
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
 8006a9c:	7b3a      	ldrb	r2, [r7, #12]
 8006a9e:	4911      	ldr	r1, [pc, #68]	; (8006ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8006aa0:	5c8a      	ldrb	r2, [r1, r2]
 8006aa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006aa6:	7b3a      	ldrb	r2, [r7, #12]
 8006aa8:	490f      	ldr	r1, [pc, #60]	; (8006ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8006aaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	7b7a      	ldrb	r2, [r7, #13]
 8006abc:	4909      	ldr	r1, [pc, #36]	; (8006ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8006abe:	5c8a      	ldrb	r2, [r1, r2]
 8006ac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ac4:	7b7a      	ldrb	r2, [r7, #13]
 8006ac6:	4908      	ldr	r1, [pc, #32]	; (8006ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8006ac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	080099c4 	.word	0x080099c4
 8006ae8:	080099cc 	.word	0x080099cc

08006aec <__errno>:
 8006aec:	4b01      	ldr	r3, [pc, #4]	; (8006af4 <__errno+0x8>)
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	2000000c 	.word	0x2000000c

08006af8 <__libc_init_array>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4d0d      	ldr	r5, [pc, #52]	; (8006b30 <__libc_init_array+0x38>)
 8006afc:	4c0d      	ldr	r4, [pc, #52]	; (8006b34 <__libc_init_array+0x3c>)
 8006afe:	1b64      	subs	r4, r4, r5
 8006b00:	10a4      	asrs	r4, r4, #2
 8006b02:	2600      	movs	r6, #0
 8006b04:	42a6      	cmp	r6, r4
 8006b06:	d109      	bne.n	8006b1c <__libc_init_array+0x24>
 8006b08:	4d0b      	ldr	r5, [pc, #44]	; (8006b38 <__libc_init_array+0x40>)
 8006b0a:	4c0c      	ldr	r4, [pc, #48]	; (8006b3c <__libc_init_array+0x44>)
 8006b0c:	f002 ff18 	bl	8009940 <_init>
 8006b10:	1b64      	subs	r4, r4, r5
 8006b12:	10a4      	asrs	r4, r4, #2
 8006b14:	2600      	movs	r6, #0
 8006b16:	42a6      	cmp	r6, r4
 8006b18:	d105      	bne.n	8006b26 <__libc_init_array+0x2e>
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}
 8006b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b20:	4798      	blx	r3
 8006b22:	3601      	adds	r6, #1
 8006b24:	e7ee      	b.n	8006b04 <__libc_init_array+0xc>
 8006b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2a:	4798      	blx	r3
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	e7f2      	b.n	8006b16 <__libc_init_array+0x1e>
 8006b30:	08009db4 	.word	0x08009db4
 8006b34:	08009db4 	.word	0x08009db4
 8006b38:	08009db4 	.word	0x08009db4
 8006b3c:	08009db8 	.word	0x08009db8

08006b40 <memset>:
 8006b40:	4402      	add	r2, r0
 8006b42:	4603      	mov	r3, r0
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d100      	bne.n	8006b4a <memset+0xa>
 8006b48:	4770      	bx	lr
 8006b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4e:	e7f9      	b.n	8006b44 <memset+0x4>

08006b50 <__cvt>:
 8006b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b54:	ec55 4b10 	vmov	r4, r5, d0
 8006b58:	2d00      	cmp	r5, #0
 8006b5a:	460e      	mov	r6, r1
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	462b      	mov	r3, r5
 8006b60:	bfbb      	ittet	lt
 8006b62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b66:	461d      	movlt	r5, r3
 8006b68:	2300      	movge	r3, #0
 8006b6a:	232d      	movlt	r3, #45	; 0x2d
 8006b6c:	700b      	strb	r3, [r1, #0]
 8006b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b74:	4691      	mov	r9, r2
 8006b76:	f023 0820 	bic.w	r8, r3, #32
 8006b7a:	bfbc      	itt	lt
 8006b7c:	4622      	movlt	r2, r4
 8006b7e:	4614      	movlt	r4, r2
 8006b80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b84:	d005      	beq.n	8006b92 <__cvt+0x42>
 8006b86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b8a:	d100      	bne.n	8006b8e <__cvt+0x3e>
 8006b8c:	3601      	adds	r6, #1
 8006b8e:	2102      	movs	r1, #2
 8006b90:	e000      	b.n	8006b94 <__cvt+0x44>
 8006b92:	2103      	movs	r1, #3
 8006b94:	ab03      	add	r3, sp, #12
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	ab02      	add	r3, sp, #8
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	ec45 4b10 	vmov	d0, r4, r5
 8006ba0:	4653      	mov	r3, sl
 8006ba2:	4632      	mov	r2, r6
 8006ba4:	f000 fd00 	bl	80075a8 <_dtoa_r>
 8006ba8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bac:	4607      	mov	r7, r0
 8006bae:	d102      	bne.n	8006bb6 <__cvt+0x66>
 8006bb0:	f019 0f01 	tst.w	r9, #1
 8006bb4:	d022      	beq.n	8006bfc <__cvt+0xac>
 8006bb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bba:	eb07 0906 	add.w	r9, r7, r6
 8006bbe:	d110      	bne.n	8006be2 <__cvt+0x92>
 8006bc0:	783b      	ldrb	r3, [r7, #0]
 8006bc2:	2b30      	cmp	r3, #48	; 0x30
 8006bc4:	d10a      	bne.n	8006bdc <__cvt+0x8c>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4620      	mov	r0, r4
 8006bcc:	4629      	mov	r1, r5
 8006bce:	f7f9 ffa3 	bl	8000b18 <__aeabi_dcmpeq>
 8006bd2:	b918      	cbnz	r0, 8006bdc <__cvt+0x8c>
 8006bd4:	f1c6 0601 	rsb	r6, r6, #1
 8006bd8:	f8ca 6000 	str.w	r6, [sl]
 8006bdc:	f8da 3000 	ldr.w	r3, [sl]
 8006be0:	4499      	add	r9, r3
 8006be2:	2200      	movs	r2, #0
 8006be4:	2300      	movs	r3, #0
 8006be6:	4620      	mov	r0, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7f9 ff95 	bl	8000b18 <__aeabi_dcmpeq>
 8006bee:	b108      	cbz	r0, 8006bf4 <__cvt+0xa4>
 8006bf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006bf4:	2230      	movs	r2, #48	; 0x30
 8006bf6:	9b03      	ldr	r3, [sp, #12]
 8006bf8:	454b      	cmp	r3, r9
 8006bfa:	d307      	bcc.n	8006c0c <__cvt+0xbc>
 8006bfc:	9b03      	ldr	r3, [sp, #12]
 8006bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c00:	1bdb      	subs	r3, r3, r7
 8006c02:	4638      	mov	r0, r7
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	b004      	add	sp, #16
 8006c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0c:	1c59      	adds	r1, r3, #1
 8006c0e:	9103      	str	r1, [sp, #12]
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	e7f0      	b.n	8006bf6 <__cvt+0xa6>

08006c14 <__exponent>:
 8006c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c16:	4603      	mov	r3, r0
 8006c18:	2900      	cmp	r1, #0
 8006c1a:	bfb8      	it	lt
 8006c1c:	4249      	neglt	r1, r1
 8006c1e:	f803 2b02 	strb.w	r2, [r3], #2
 8006c22:	bfb4      	ite	lt
 8006c24:	222d      	movlt	r2, #45	; 0x2d
 8006c26:	222b      	movge	r2, #43	; 0x2b
 8006c28:	2909      	cmp	r1, #9
 8006c2a:	7042      	strb	r2, [r0, #1]
 8006c2c:	dd2a      	ble.n	8006c84 <__exponent+0x70>
 8006c2e:	f10d 0407 	add.w	r4, sp, #7
 8006c32:	46a4      	mov	ip, r4
 8006c34:	270a      	movs	r7, #10
 8006c36:	46a6      	mov	lr, r4
 8006c38:	460a      	mov	r2, r1
 8006c3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c3e:	fb07 1516 	mls	r5, r7, r6, r1
 8006c42:	3530      	adds	r5, #48	; 0x30
 8006c44:	2a63      	cmp	r2, #99	; 0x63
 8006c46:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006c4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c4e:	4631      	mov	r1, r6
 8006c50:	dcf1      	bgt.n	8006c36 <__exponent+0x22>
 8006c52:	3130      	adds	r1, #48	; 0x30
 8006c54:	f1ae 0502 	sub.w	r5, lr, #2
 8006c58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c5c:	1c44      	adds	r4, r0, #1
 8006c5e:	4629      	mov	r1, r5
 8006c60:	4561      	cmp	r1, ip
 8006c62:	d30a      	bcc.n	8006c7a <__exponent+0x66>
 8006c64:	f10d 0209 	add.w	r2, sp, #9
 8006c68:	eba2 020e 	sub.w	r2, r2, lr
 8006c6c:	4565      	cmp	r5, ip
 8006c6e:	bf88      	it	hi
 8006c70:	2200      	movhi	r2, #0
 8006c72:	4413      	add	r3, r2
 8006c74:	1a18      	subs	r0, r3, r0
 8006c76:	b003      	add	sp, #12
 8006c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c82:	e7ed      	b.n	8006c60 <__exponent+0x4c>
 8006c84:	2330      	movs	r3, #48	; 0x30
 8006c86:	3130      	adds	r1, #48	; 0x30
 8006c88:	7083      	strb	r3, [r0, #2]
 8006c8a:	70c1      	strb	r1, [r0, #3]
 8006c8c:	1d03      	adds	r3, r0, #4
 8006c8e:	e7f1      	b.n	8006c74 <__exponent+0x60>

08006c90 <_printf_float>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	ed2d 8b02 	vpush	{d8}
 8006c98:	b08d      	sub	sp, #52	; 0x34
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ca0:	4616      	mov	r6, r2
 8006ca2:	461f      	mov	r7, r3
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	f001 fa6d 	bl	8008184 <_localeconv_r>
 8006caa:	f8d0 a000 	ldr.w	sl, [r0]
 8006cae:	4650      	mov	r0, sl
 8006cb0:	f7f9 fab6 	bl	8000220 <strlen>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	9305      	str	r3, [sp, #20]
 8006cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006cc4:	3307      	adds	r3, #7
 8006cc6:	f023 0307 	bic.w	r3, r3, #7
 8006cca:	f103 0208 	add.w	r2, r3, #8
 8006cce:	f8c8 2000 	str.w	r2, [r8]
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006cda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006cde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ce2:	9307      	str	r3, [sp, #28]
 8006ce4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ce8:	ee08 0a10 	vmov	s16, r0
 8006cec:	4b9f      	ldr	r3, [pc, #636]	; (8006f6c <_printf_float+0x2dc>)
 8006cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cf6:	f7f9 ff41 	bl	8000b7c <__aeabi_dcmpun>
 8006cfa:	bb88      	cbnz	r0, 8006d60 <_printf_float+0xd0>
 8006cfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d00:	4b9a      	ldr	r3, [pc, #616]	; (8006f6c <_printf_float+0x2dc>)
 8006d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d06:	f7f9 ff1b 	bl	8000b40 <__aeabi_dcmple>
 8006d0a:	bb48      	cbnz	r0, 8006d60 <_printf_float+0xd0>
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2300      	movs	r3, #0
 8006d10:	4640      	mov	r0, r8
 8006d12:	4649      	mov	r1, r9
 8006d14:	f7f9 ff0a 	bl	8000b2c <__aeabi_dcmplt>
 8006d18:	b110      	cbz	r0, 8006d20 <_printf_float+0x90>
 8006d1a:	232d      	movs	r3, #45	; 0x2d
 8006d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d20:	4b93      	ldr	r3, [pc, #588]	; (8006f70 <_printf_float+0x2e0>)
 8006d22:	4894      	ldr	r0, [pc, #592]	; (8006f74 <_printf_float+0x2e4>)
 8006d24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d28:	bf94      	ite	ls
 8006d2a:	4698      	movls	r8, r3
 8006d2c:	4680      	movhi	r8, r0
 8006d2e:	2303      	movs	r3, #3
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	9b05      	ldr	r3, [sp, #20]
 8006d34:	f023 0204 	bic.w	r2, r3, #4
 8006d38:	6022      	str	r2, [r4, #0]
 8006d3a:	f04f 0900 	mov.w	r9, #0
 8006d3e:	9700      	str	r7, [sp, #0]
 8006d40:	4633      	mov	r3, r6
 8006d42:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d44:	4621      	mov	r1, r4
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 f9d8 	bl	80070fc <_printf_common>
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	f040 8090 	bne.w	8006e72 <_printf_float+0x1e2>
 8006d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d56:	b00d      	add	sp, #52	; 0x34
 8006d58:	ecbd 8b02 	vpop	{d8}
 8006d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d60:	4642      	mov	r2, r8
 8006d62:	464b      	mov	r3, r9
 8006d64:	4640      	mov	r0, r8
 8006d66:	4649      	mov	r1, r9
 8006d68:	f7f9 ff08 	bl	8000b7c <__aeabi_dcmpun>
 8006d6c:	b140      	cbz	r0, 8006d80 <_printf_float+0xf0>
 8006d6e:	464b      	mov	r3, r9
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	bfbc      	itt	lt
 8006d74:	232d      	movlt	r3, #45	; 0x2d
 8006d76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d7a:	487f      	ldr	r0, [pc, #508]	; (8006f78 <_printf_float+0x2e8>)
 8006d7c:	4b7f      	ldr	r3, [pc, #508]	; (8006f7c <_printf_float+0x2ec>)
 8006d7e:	e7d1      	b.n	8006d24 <_printf_float+0x94>
 8006d80:	6863      	ldr	r3, [r4, #4]
 8006d82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d86:	9206      	str	r2, [sp, #24]
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	d13f      	bne.n	8006e0c <_printf_float+0x17c>
 8006d8c:	2306      	movs	r3, #6
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	9b05      	ldr	r3, [sp, #20]
 8006d92:	6861      	ldr	r1, [r4, #4]
 8006d94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d98:	2300      	movs	r3, #0
 8006d9a:	9303      	str	r3, [sp, #12]
 8006d9c:	ab0a      	add	r3, sp, #40	; 0x28
 8006d9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006da2:	ab09      	add	r3, sp, #36	; 0x24
 8006da4:	ec49 8b10 	vmov	d0, r8, r9
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	6022      	str	r2, [r4, #0]
 8006dac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006db0:	4628      	mov	r0, r5
 8006db2:	f7ff fecd 	bl	8006b50 <__cvt>
 8006db6:	9b06      	ldr	r3, [sp, #24]
 8006db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dba:	2b47      	cmp	r3, #71	; 0x47
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	d108      	bne.n	8006dd2 <_printf_float+0x142>
 8006dc0:	1cc8      	adds	r0, r1, #3
 8006dc2:	db02      	blt.n	8006dca <_printf_float+0x13a>
 8006dc4:	6863      	ldr	r3, [r4, #4]
 8006dc6:	4299      	cmp	r1, r3
 8006dc8:	dd41      	ble.n	8006e4e <_printf_float+0x1be>
 8006dca:	f1ab 0b02 	sub.w	fp, fp, #2
 8006dce:	fa5f fb8b 	uxtb.w	fp, fp
 8006dd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006dd6:	d820      	bhi.n	8006e1a <_printf_float+0x18a>
 8006dd8:	3901      	subs	r1, #1
 8006dda:	465a      	mov	r2, fp
 8006ddc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006de0:	9109      	str	r1, [sp, #36]	; 0x24
 8006de2:	f7ff ff17 	bl	8006c14 <__exponent>
 8006de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006de8:	1813      	adds	r3, r2, r0
 8006dea:	2a01      	cmp	r2, #1
 8006dec:	4681      	mov	r9, r0
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	dc02      	bgt.n	8006df8 <_printf_float+0x168>
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	07d2      	lsls	r2, r2, #31
 8006df6:	d501      	bpl.n	8006dfc <_printf_float+0x16c>
 8006df8:	3301      	adds	r3, #1
 8006dfa:	6123      	str	r3, [r4, #16]
 8006dfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d09c      	beq.n	8006d3e <_printf_float+0xae>
 8006e04:	232d      	movs	r3, #45	; 0x2d
 8006e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e0a:	e798      	b.n	8006d3e <_printf_float+0xae>
 8006e0c:	9a06      	ldr	r2, [sp, #24]
 8006e0e:	2a47      	cmp	r2, #71	; 0x47
 8006e10:	d1be      	bne.n	8006d90 <_printf_float+0x100>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1bc      	bne.n	8006d90 <_printf_float+0x100>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e7b9      	b.n	8006d8e <_printf_float+0xfe>
 8006e1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e1e:	d118      	bne.n	8006e52 <_printf_float+0x1c2>
 8006e20:	2900      	cmp	r1, #0
 8006e22:	6863      	ldr	r3, [r4, #4]
 8006e24:	dd0b      	ble.n	8006e3e <_printf_float+0x1ae>
 8006e26:	6121      	str	r1, [r4, #16]
 8006e28:	b913      	cbnz	r3, 8006e30 <_printf_float+0x1a0>
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	07d0      	lsls	r0, r2, #31
 8006e2e:	d502      	bpl.n	8006e36 <_printf_float+0x1a6>
 8006e30:	3301      	adds	r3, #1
 8006e32:	440b      	add	r3, r1
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e38:	f04f 0900 	mov.w	r9, #0
 8006e3c:	e7de      	b.n	8006dfc <_printf_float+0x16c>
 8006e3e:	b913      	cbnz	r3, 8006e46 <_printf_float+0x1b6>
 8006e40:	6822      	ldr	r2, [r4, #0]
 8006e42:	07d2      	lsls	r2, r2, #31
 8006e44:	d501      	bpl.n	8006e4a <_printf_float+0x1ba>
 8006e46:	3302      	adds	r3, #2
 8006e48:	e7f4      	b.n	8006e34 <_printf_float+0x1a4>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e7f2      	b.n	8006e34 <_printf_float+0x1a4>
 8006e4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e54:	4299      	cmp	r1, r3
 8006e56:	db05      	blt.n	8006e64 <_printf_float+0x1d4>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	6121      	str	r1, [r4, #16]
 8006e5c:	07d8      	lsls	r0, r3, #31
 8006e5e:	d5ea      	bpl.n	8006e36 <_printf_float+0x1a6>
 8006e60:	1c4b      	adds	r3, r1, #1
 8006e62:	e7e7      	b.n	8006e34 <_printf_float+0x1a4>
 8006e64:	2900      	cmp	r1, #0
 8006e66:	bfd4      	ite	le
 8006e68:	f1c1 0202 	rsble	r2, r1, #2
 8006e6c:	2201      	movgt	r2, #1
 8006e6e:	4413      	add	r3, r2
 8006e70:	e7e0      	b.n	8006e34 <_printf_float+0x1a4>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	055a      	lsls	r2, r3, #21
 8006e76:	d407      	bmi.n	8006e88 <_printf_float+0x1f8>
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	4642      	mov	r2, r8
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4628      	mov	r0, r5
 8006e80:	47b8      	blx	r7
 8006e82:	3001      	adds	r0, #1
 8006e84:	d12c      	bne.n	8006ee0 <_printf_float+0x250>
 8006e86:	e764      	b.n	8006d52 <_printf_float+0xc2>
 8006e88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e8c:	f240 80e0 	bls.w	8007050 <_printf_float+0x3c0>
 8006e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e94:	2200      	movs	r2, #0
 8006e96:	2300      	movs	r3, #0
 8006e98:	f7f9 fe3e 	bl	8000b18 <__aeabi_dcmpeq>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d034      	beq.n	8006f0a <_printf_float+0x27a>
 8006ea0:	4a37      	ldr	r2, [pc, #220]	; (8006f80 <_printf_float+0x2f0>)
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	f43f af51 	beq.w	8006d52 <_printf_float+0xc2>
 8006eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	db02      	blt.n	8006ebe <_printf_float+0x22e>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	07d8      	lsls	r0, r3, #31
 8006ebc:	d510      	bpl.n	8006ee0 <_printf_float+0x250>
 8006ebe:	ee18 3a10 	vmov	r3, s16
 8006ec2:	4652      	mov	r2, sl
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	47b8      	blx	r7
 8006eca:	3001      	adds	r0, #1
 8006ecc:	f43f af41 	beq.w	8006d52 <_printf_float+0xc2>
 8006ed0:	f04f 0800 	mov.w	r8, #0
 8006ed4:	f104 091a 	add.w	r9, r4, #26
 8006ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eda:	3b01      	subs	r3, #1
 8006edc:	4543      	cmp	r3, r8
 8006ede:	dc09      	bgt.n	8006ef4 <_printf_float+0x264>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	079b      	lsls	r3, r3, #30
 8006ee4:	f100 8105 	bmi.w	80070f2 <_printf_float+0x462>
 8006ee8:	68e0      	ldr	r0, [r4, #12]
 8006eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eec:	4298      	cmp	r0, r3
 8006eee:	bfb8      	it	lt
 8006ef0:	4618      	movlt	r0, r3
 8006ef2:	e730      	b.n	8006d56 <_printf_float+0xc6>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	464a      	mov	r2, r9
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	f43f af27 	beq.w	8006d52 <_printf_float+0xc2>
 8006f04:	f108 0801 	add.w	r8, r8, #1
 8006f08:	e7e6      	b.n	8006ed8 <_printf_float+0x248>
 8006f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dc39      	bgt.n	8006f84 <_printf_float+0x2f4>
 8006f10:	4a1b      	ldr	r2, [pc, #108]	; (8006f80 <_printf_float+0x2f0>)
 8006f12:	2301      	movs	r3, #1
 8006f14:	4631      	mov	r1, r6
 8006f16:	4628      	mov	r0, r5
 8006f18:	47b8      	blx	r7
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	f43f af19 	beq.w	8006d52 <_printf_float+0xc2>
 8006f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f24:	4313      	orrs	r3, r2
 8006f26:	d102      	bne.n	8006f2e <_printf_float+0x29e>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	07d9      	lsls	r1, r3, #31
 8006f2c:	d5d8      	bpl.n	8006ee0 <_printf_float+0x250>
 8006f2e:	ee18 3a10 	vmov	r3, s16
 8006f32:	4652      	mov	r2, sl
 8006f34:	4631      	mov	r1, r6
 8006f36:	4628      	mov	r0, r5
 8006f38:	47b8      	blx	r7
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f43f af09 	beq.w	8006d52 <_printf_float+0xc2>
 8006f40:	f04f 0900 	mov.w	r9, #0
 8006f44:	f104 0a1a 	add.w	sl, r4, #26
 8006f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f4a:	425b      	negs	r3, r3
 8006f4c:	454b      	cmp	r3, r9
 8006f4e:	dc01      	bgt.n	8006f54 <_printf_float+0x2c4>
 8006f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f52:	e792      	b.n	8006e7a <_printf_float+0x1ea>
 8006f54:	2301      	movs	r3, #1
 8006f56:	4652      	mov	r2, sl
 8006f58:	4631      	mov	r1, r6
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	47b8      	blx	r7
 8006f5e:	3001      	adds	r0, #1
 8006f60:	f43f aef7 	beq.w	8006d52 <_printf_float+0xc2>
 8006f64:	f109 0901 	add.w	r9, r9, #1
 8006f68:	e7ee      	b.n	8006f48 <_printf_float+0x2b8>
 8006f6a:	bf00      	nop
 8006f6c:	7fefffff 	.word	0x7fefffff
 8006f70:	080099d8 	.word	0x080099d8
 8006f74:	080099dc 	.word	0x080099dc
 8006f78:	080099e4 	.word	0x080099e4
 8006f7c:	080099e0 	.word	0x080099e0
 8006f80:	080099e8 	.word	0x080099e8
 8006f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	bfa8      	it	ge
 8006f8c:	461a      	movge	r2, r3
 8006f8e:	2a00      	cmp	r2, #0
 8006f90:	4691      	mov	r9, r2
 8006f92:	dc37      	bgt.n	8007004 <_printf_float+0x374>
 8006f94:	f04f 0b00 	mov.w	fp, #0
 8006f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f9c:	f104 021a 	add.w	r2, r4, #26
 8006fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	eba3 0309 	sub.w	r3, r3, r9
 8006fa8:	455b      	cmp	r3, fp
 8006faa:	dc33      	bgt.n	8007014 <_printf_float+0x384>
 8006fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	db3b      	blt.n	800702c <_printf_float+0x39c>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	07da      	lsls	r2, r3, #31
 8006fb8:	d438      	bmi.n	800702c <_printf_float+0x39c>
 8006fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fbc:	9a05      	ldr	r2, [sp, #20]
 8006fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fc0:	1a9a      	subs	r2, r3, r2
 8006fc2:	eba3 0901 	sub.w	r9, r3, r1
 8006fc6:	4591      	cmp	r9, r2
 8006fc8:	bfa8      	it	ge
 8006fca:	4691      	movge	r9, r2
 8006fcc:	f1b9 0f00 	cmp.w	r9, #0
 8006fd0:	dc35      	bgt.n	800703e <_printf_float+0x3ae>
 8006fd2:	f04f 0800 	mov.w	r8, #0
 8006fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fda:	f104 0a1a 	add.w	sl, r4, #26
 8006fde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	eba3 0309 	sub.w	r3, r3, r9
 8006fe8:	4543      	cmp	r3, r8
 8006fea:	f77f af79 	ble.w	8006ee0 <_printf_float+0x250>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4652      	mov	r2, sl
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b8      	blx	r7
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f43f aeaa 	beq.w	8006d52 <_printf_float+0xc2>
 8006ffe:	f108 0801 	add.w	r8, r8, #1
 8007002:	e7ec      	b.n	8006fde <_printf_float+0x34e>
 8007004:	4613      	mov	r3, r2
 8007006:	4631      	mov	r1, r6
 8007008:	4642      	mov	r2, r8
 800700a:	4628      	mov	r0, r5
 800700c:	47b8      	blx	r7
 800700e:	3001      	adds	r0, #1
 8007010:	d1c0      	bne.n	8006f94 <_printf_float+0x304>
 8007012:	e69e      	b.n	8006d52 <_printf_float+0xc2>
 8007014:	2301      	movs	r3, #1
 8007016:	4631      	mov	r1, r6
 8007018:	4628      	mov	r0, r5
 800701a:	9205      	str	r2, [sp, #20]
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f ae97 	beq.w	8006d52 <_printf_float+0xc2>
 8007024:	9a05      	ldr	r2, [sp, #20]
 8007026:	f10b 0b01 	add.w	fp, fp, #1
 800702a:	e7b9      	b.n	8006fa0 <_printf_float+0x310>
 800702c:	ee18 3a10 	vmov	r3, s16
 8007030:	4652      	mov	r2, sl
 8007032:	4631      	mov	r1, r6
 8007034:	4628      	mov	r0, r5
 8007036:	47b8      	blx	r7
 8007038:	3001      	adds	r0, #1
 800703a:	d1be      	bne.n	8006fba <_printf_float+0x32a>
 800703c:	e689      	b.n	8006d52 <_printf_float+0xc2>
 800703e:	9a05      	ldr	r2, [sp, #20]
 8007040:	464b      	mov	r3, r9
 8007042:	4442      	add	r2, r8
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	d1c1      	bne.n	8006fd2 <_printf_float+0x342>
 800704e:	e680      	b.n	8006d52 <_printf_float+0xc2>
 8007050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007052:	2a01      	cmp	r2, #1
 8007054:	dc01      	bgt.n	800705a <_printf_float+0x3ca>
 8007056:	07db      	lsls	r3, r3, #31
 8007058:	d538      	bpl.n	80070cc <_printf_float+0x43c>
 800705a:	2301      	movs	r3, #1
 800705c:	4642      	mov	r2, r8
 800705e:	4631      	mov	r1, r6
 8007060:	4628      	mov	r0, r5
 8007062:	47b8      	blx	r7
 8007064:	3001      	adds	r0, #1
 8007066:	f43f ae74 	beq.w	8006d52 <_printf_float+0xc2>
 800706a:	ee18 3a10 	vmov	r3, s16
 800706e:	4652      	mov	r2, sl
 8007070:	4631      	mov	r1, r6
 8007072:	4628      	mov	r0, r5
 8007074:	47b8      	blx	r7
 8007076:	3001      	adds	r0, #1
 8007078:	f43f ae6b 	beq.w	8006d52 <_printf_float+0xc2>
 800707c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007080:	2200      	movs	r2, #0
 8007082:	2300      	movs	r3, #0
 8007084:	f7f9 fd48 	bl	8000b18 <__aeabi_dcmpeq>
 8007088:	b9d8      	cbnz	r0, 80070c2 <_printf_float+0x432>
 800708a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708c:	f108 0201 	add.w	r2, r8, #1
 8007090:	3b01      	subs	r3, #1
 8007092:	4631      	mov	r1, r6
 8007094:	4628      	mov	r0, r5
 8007096:	47b8      	blx	r7
 8007098:	3001      	adds	r0, #1
 800709a:	d10e      	bne.n	80070ba <_printf_float+0x42a>
 800709c:	e659      	b.n	8006d52 <_printf_float+0xc2>
 800709e:	2301      	movs	r3, #1
 80070a0:	4652      	mov	r2, sl
 80070a2:	4631      	mov	r1, r6
 80070a4:	4628      	mov	r0, r5
 80070a6:	47b8      	blx	r7
 80070a8:	3001      	adds	r0, #1
 80070aa:	f43f ae52 	beq.w	8006d52 <_printf_float+0xc2>
 80070ae:	f108 0801 	add.w	r8, r8, #1
 80070b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b4:	3b01      	subs	r3, #1
 80070b6:	4543      	cmp	r3, r8
 80070b8:	dcf1      	bgt.n	800709e <_printf_float+0x40e>
 80070ba:	464b      	mov	r3, r9
 80070bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070c0:	e6dc      	b.n	8006e7c <_printf_float+0x1ec>
 80070c2:	f04f 0800 	mov.w	r8, #0
 80070c6:	f104 0a1a 	add.w	sl, r4, #26
 80070ca:	e7f2      	b.n	80070b2 <_printf_float+0x422>
 80070cc:	2301      	movs	r3, #1
 80070ce:	4642      	mov	r2, r8
 80070d0:	e7df      	b.n	8007092 <_printf_float+0x402>
 80070d2:	2301      	movs	r3, #1
 80070d4:	464a      	mov	r2, r9
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	47b8      	blx	r7
 80070dc:	3001      	adds	r0, #1
 80070de:	f43f ae38 	beq.w	8006d52 <_printf_float+0xc2>
 80070e2:	f108 0801 	add.w	r8, r8, #1
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070ea:	1a5b      	subs	r3, r3, r1
 80070ec:	4543      	cmp	r3, r8
 80070ee:	dcf0      	bgt.n	80070d2 <_printf_float+0x442>
 80070f0:	e6fa      	b.n	8006ee8 <_printf_float+0x258>
 80070f2:	f04f 0800 	mov.w	r8, #0
 80070f6:	f104 0919 	add.w	r9, r4, #25
 80070fa:	e7f4      	b.n	80070e6 <_printf_float+0x456>

080070fc <_printf_common>:
 80070fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	4616      	mov	r6, r2
 8007102:	4699      	mov	r9, r3
 8007104:	688a      	ldr	r2, [r1, #8]
 8007106:	690b      	ldr	r3, [r1, #16]
 8007108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800710c:	4293      	cmp	r3, r2
 800710e:	bfb8      	it	lt
 8007110:	4613      	movlt	r3, r2
 8007112:	6033      	str	r3, [r6, #0]
 8007114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007118:	4607      	mov	r7, r0
 800711a:	460c      	mov	r4, r1
 800711c:	b10a      	cbz	r2, 8007122 <_printf_common+0x26>
 800711e:	3301      	adds	r3, #1
 8007120:	6033      	str	r3, [r6, #0]
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	0699      	lsls	r1, r3, #26
 8007126:	bf42      	ittt	mi
 8007128:	6833      	ldrmi	r3, [r6, #0]
 800712a:	3302      	addmi	r3, #2
 800712c:	6033      	strmi	r3, [r6, #0]
 800712e:	6825      	ldr	r5, [r4, #0]
 8007130:	f015 0506 	ands.w	r5, r5, #6
 8007134:	d106      	bne.n	8007144 <_printf_common+0x48>
 8007136:	f104 0a19 	add.w	sl, r4, #25
 800713a:	68e3      	ldr	r3, [r4, #12]
 800713c:	6832      	ldr	r2, [r6, #0]
 800713e:	1a9b      	subs	r3, r3, r2
 8007140:	42ab      	cmp	r3, r5
 8007142:	dc26      	bgt.n	8007192 <_printf_common+0x96>
 8007144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007148:	1e13      	subs	r3, r2, #0
 800714a:	6822      	ldr	r2, [r4, #0]
 800714c:	bf18      	it	ne
 800714e:	2301      	movne	r3, #1
 8007150:	0692      	lsls	r2, r2, #26
 8007152:	d42b      	bmi.n	80071ac <_printf_common+0xb0>
 8007154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007158:	4649      	mov	r1, r9
 800715a:	4638      	mov	r0, r7
 800715c:	47c0      	blx	r8
 800715e:	3001      	adds	r0, #1
 8007160:	d01e      	beq.n	80071a0 <_printf_common+0xa4>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	68e5      	ldr	r5, [r4, #12]
 8007166:	6832      	ldr	r2, [r6, #0]
 8007168:	f003 0306 	and.w	r3, r3, #6
 800716c:	2b04      	cmp	r3, #4
 800716e:	bf08      	it	eq
 8007170:	1aad      	subeq	r5, r5, r2
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	6922      	ldr	r2, [r4, #16]
 8007176:	bf0c      	ite	eq
 8007178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800717c:	2500      	movne	r5, #0
 800717e:	4293      	cmp	r3, r2
 8007180:	bfc4      	itt	gt
 8007182:	1a9b      	subgt	r3, r3, r2
 8007184:	18ed      	addgt	r5, r5, r3
 8007186:	2600      	movs	r6, #0
 8007188:	341a      	adds	r4, #26
 800718a:	42b5      	cmp	r5, r6
 800718c:	d11a      	bne.n	80071c4 <_printf_common+0xc8>
 800718e:	2000      	movs	r0, #0
 8007190:	e008      	b.n	80071a4 <_printf_common+0xa8>
 8007192:	2301      	movs	r3, #1
 8007194:	4652      	mov	r2, sl
 8007196:	4649      	mov	r1, r9
 8007198:	4638      	mov	r0, r7
 800719a:	47c0      	blx	r8
 800719c:	3001      	adds	r0, #1
 800719e:	d103      	bne.n	80071a8 <_printf_common+0xac>
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a8:	3501      	adds	r5, #1
 80071aa:	e7c6      	b.n	800713a <_printf_common+0x3e>
 80071ac:	18e1      	adds	r1, r4, r3
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	2030      	movs	r0, #48	; 0x30
 80071b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071b6:	4422      	add	r2, r4
 80071b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071c0:	3302      	adds	r3, #2
 80071c2:	e7c7      	b.n	8007154 <_printf_common+0x58>
 80071c4:	2301      	movs	r3, #1
 80071c6:	4622      	mov	r2, r4
 80071c8:	4649      	mov	r1, r9
 80071ca:	4638      	mov	r0, r7
 80071cc:	47c0      	blx	r8
 80071ce:	3001      	adds	r0, #1
 80071d0:	d0e6      	beq.n	80071a0 <_printf_common+0xa4>
 80071d2:	3601      	adds	r6, #1
 80071d4:	e7d9      	b.n	800718a <_printf_common+0x8e>
	...

080071d8 <_printf_i>:
 80071d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071dc:	7e0f      	ldrb	r7, [r1, #24]
 80071de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071e0:	2f78      	cmp	r7, #120	; 0x78
 80071e2:	4691      	mov	r9, r2
 80071e4:	4680      	mov	r8, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	469a      	mov	sl, r3
 80071ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071ee:	d807      	bhi.n	8007200 <_printf_i+0x28>
 80071f0:	2f62      	cmp	r7, #98	; 0x62
 80071f2:	d80a      	bhi.n	800720a <_printf_i+0x32>
 80071f4:	2f00      	cmp	r7, #0
 80071f6:	f000 80d8 	beq.w	80073aa <_printf_i+0x1d2>
 80071fa:	2f58      	cmp	r7, #88	; 0x58
 80071fc:	f000 80a3 	beq.w	8007346 <_printf_i+0x16e>
 8007200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007208:	e03a      	b.n	8007280 <_printf_i+0xa8>
 800720a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800720e:	2b15      	cmp	r3, #21
 8007210:	d8f6      	bhi.n	8007200 <_printf_i+0x28>
 8007212:	a101      	add	r1, pc, #4	; (adr r1, 8007218 <_printf_i+0x40>)
 8007214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007218:	08007271 	.word	0x08007271
 800721c:	08007285 	.word	0x08007285
 8007220:	08007201 	.word	0x08007201
 8007224:	08007201 	.word	0x08007201
 8007228:	08007201 	.word	0x08007201
 800722c:	08007201 	.word	0x08007201
 8007230:	08007285 	.word	0x08007285
 8007234:	08007201 	.word	0x08007201
 8007238:	08007201 	.word	0x08007201
 800723c:	08007201 	.word	0x08007201
 8007240:	08007201 	.word	0x08007201
 8007244:	08007391 	.word	0x08007391
 8007248:	080072b5 	.word	0x080072b5
 800724c:	08007373 	.word	0x08007373
 8007250:	08007201 	.word	0x08007201
 8007254:	08007201 	.word	0x08007201
 8007258:	080073b3 	.word	0x080073b3
 800725c:	08007201 	.word	0x08007201
 8007260:	080072b5 	.word	0x080072b5
 8007264:	08007201 	.word	0x08007201
 8007268:	08007201 	.word	0x08007201
 800726c:	0800737b 	.word	0x0800737b
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	1d1a      	adds	r2, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	602a      	str	r2, [r5, #0]
 8007278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800727c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007280:	2301      	movs	r3, #1
 8007282:	e0a3      	b.n	80073cc <_printf_i+0x1f4>
 8007284:	6820      	ldr	r0, [r4, #0]
 8007286:	6829      	ldr	r1, [r5, #0]
 8007288:	0606      	lsls	r6, r0, #24
 800728a:	f101 0304 	add.w	r3, r1, #4
 800728e:	d50a      	bpl.n	80072a6 <_printf_i+0xce>
 8007290:	680e      	ldr	r6, [r1, #0]
 8007292:	602b      	str	r3, [r5, #0]
 8007294:	2e00      	cmp	r6, #0
 8007296:	da03      	bge.n	80072a0 <_printf_i+0xc8>
 8007298:	232d      	movs	r3, #45	; 0x2d
 800729a:	4276      	negs	r6, r6
 800729c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a0:	485e      	ldr	r0, [pc, #376]	; (800741c <_printf_i+0x244>)
 80072a2:	230a      	movs	r3, #10
 80072a4:	e019      	b.n	80072da <_printf_i+0x102>
 80072a6:	680e      	ldr	r6, [r1, #0]
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072ae:	bf18      	it	ne
 80072b0:	b236      	sxthne	r6, r6
 80072b2:	e7ef      	b.n	8007294 <_printf_i+0xbc>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	6820      	ldr	r0, [r4, #0]
 80072b8:	1d19      	adds	r1, r3, #4
 80072ba:	6029      	str	r1, [r5, #0]
 80072bc:	0601      	lsls	r1, r0, #24
 80072be:	d501      	bpl.n	80072c4 <_printf_i+0xec>
 80072c0:	681e      	ldr	r6, [r3, #0]
 80072c2:	e002      	b.n	80072ca <_printf_i+0xf2>
 80072c4:	0646      	lsls	r6, r0, #25
 80072c6:	d5fb      	bpl.n	80072c0 <_printf_i+0xe8>
 80072c8:	881e      	ldrh	r6, [r3, #0]
 80072ca:	4854      	ldr	r0, [pc, #336]	; (800741c <_printf_i+0x244>)
 80072cc:	2f6f      	cmp	r7, #111	; 0x6f
 80072ce:	bf0c      	ite	eq
 80072d0:	2308      	moveq	r3, #8
 80072d2:	230a      	movne	r3, #10
 80072d4:	2100      	movs	r1, #0
 80072d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072da:	6865      	ldr	r5, [r4, #4]
 80072dc:	60a5      	str	r5, [r4, #8]
 80072de:	2d00      	cmp	r5, #0
 80072e0:	bfa2      	ittt	ge
 80072e2:	6821      	ldrge	r1, [r4, #0]
 80072e4:	f021 0104 	bicge.w	r1, r1, #4
 80072e8:	6021      	strge	r1, [r4, #0]
 80072ea:	b90e      	cbnz	r6, 80072f0 <_printf_i+0x118>
 80072ec:	2d00      	cmp	r5, #0
 80072ee:	d04d      	beq.n	800738c <_printf_i+0x1b4>
 80072f0:	4615      	mov	r5, r2
 80072f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80072f6:	fb03 6711 	mls	r7, r3, r1, r6
 80072fa:	5dc7      	ldrb	r7, [r0, r7]
 80072fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007300:	4637      	mov	r7, r6
 8007302:	42bb      	cmp	r3, r7
 8007304:	460e      	mov	r6, r1
 8007306:	d9f4      	bls.n	80072f2 <_printf_i+0x11a>
 8007308:	2b08      	cmp	r3, #8
 800730a:	d10b      	bne.n	8007324 <_printf_i+0x14c>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	07de      	lsls	r6, r3, #31
 8007310:	d508      	bpl.n	8007324 <_printf_i+0x14c>
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	6861      	ldr	r1, [r4, #4]
 8007316:	4299      	cmp	r1, r3
 8007318:	bfde      	ittt	le
 800731a:	2330      	movle	r3, #48	; 0x30
 800731c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007320:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007324:	1b52      	subs	r2, r2, r5
 8007326:	6122      	str	r2, [r4, #16]
 8007328:	f8cd a000 	str.w	sl, [sp]
 800732c:	464b      	mov	r3, r9
 800732e:	aa03      	add	r2, sp, #12
 8007330:	4621      	mov	r1, r4
 8007332:	4640      	mov	r0, r8
 8007334:	f7ff fee2 	bl	80070fc <_printf_common>
 8007338:	3001      	adds	r0, #1
 800733a:	d14c      	bne.n	80073d6 <_printf_i+0x1fe>
 800733c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007340:	b004      	add	sp, #16
 8007342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007346:	4835      	ldr	r0, [pc, #212]	; (800741c <_printf_i+0x244>)
 8007348:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800734c:	6829      	ldr	r1, [r5, #0]
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	f851 6b04 	ldr.w	r6, [r1], #4
 8007354:	6029      	str	r1, [r5, #0]
 8007356:	061d      	lsls	r5, r3, #24
 8007358:	d514      	bpl.n	8007384 <_printf_i+0x1ac>
 800735a:	07df      	lsls	r7, r3, #31
 800735c:	bf44      	itt	mi
 800735e:	f043 0320 	orrmi.w	r3, r3, #32
 8007362:	6023      	strmi	r3, [r4, #0]
 8007364:	b91e      	cbnz	r6, 800736e <_printf_i+0x196>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	f023 0320 	bic.w	r3, r3, #32
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	2310      	movs	r3, #16
 8007370:	e7b0      	b.n	80072d4 <_printf_i+0xfc>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	f043 0320 	orr.w	r3, r3, #32
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	2378      	movs	r3, #120	; 0x78
 800737c:	4828      	ldr	r0, [pc, #160]	; (8007420 <_printf_i+0x248>)
 800737e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007382:	e7e3      	b.n	800734c <_printf_i+0x174>
 8007384:	0659      	lsls	r1, r3, #25
 8007386:	bf48      	it	mi
 8007388:	b2b6      	uxthmi	r6, r6
 800738a:	e7e6      	b.n	800735a <_printf_i+0x182>
 800738c:	4615      	mov	r5, r2
 800738e:	e7bb      	b.n	8007308 <_printf_i+0x130>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	6826      	ldr	r6, [r4, #0]
 8007394:	6961      	ldr	r1, [r4, #20]
 8007396:	1d18      	adds	r0, r3, #4
 8007398:	6028      	str	r0, [r5, #0]
 800739a:	0635      	lsls	r5, r6, #24
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	d501      	bpl.n	80073a4 <_printf_i+0x1cc>
 80073a0:	6019      	str	r1, [r3, #0]
 80073a2:	e002      	b.n	80073aa <_printf_i+0x1d2>
 80073a4:	0670      	lsls	r0, r6, #25
 80073a6:	d5fb      	bpl.n	80073a0 <_printf_i+0x1c8>
 80073a8:	8019      	strh	r1, [r3, #0]
 80073aa:	2300      	movs	r3, #0
 80073ac:	6123      	str	r3, [r4, #16]
 80073ae:	4615      	mov	r5, r2
 80073b0:	e7ba      	b.n	8007328 <_printf_i+0x150>
 80073b2:	682b      	ldr	r3, [r5, #0]
 80073b4:	1d1a      	adds	r2, r3, #4
 80073b6:	602a      	str	r2, [r5, #0]
 80073b8:	681d      	ldr	r5, [r3, #0]
 80073ba:	6862      	ldr	r2, [r4, #4]
 80073bc:	2100      	movs	r1, #0
 80073be:	4628      	mov	r0, r5
 80073c0:	f7f8 ff36 	bl	8000230 <memchr>
 80073c4:	b108      	cbz	r0, 80073ca <_printf_i+0x1f2>
 80073c6:	1b40      	subs	r0, r0, r5
 80073c8:	6060      	str	r0, [r4, #4]
 80073ca:	6863      	ldr	r3, [r4, #4]
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	2300      	movs	r3, #0
 80073d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d4:	e7a8      	b.n	8007328 <_printf_i+0x150>
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	462a      	mov	r2, r5
 80073da:	4649      	mov	r1, r9
 80073dc:	4640      	mov	r0, r8
 80073de:	47d0      	blx	sl
 80073e0:	3001      	adds	r0, #1
 80073e2:	d0ab      	beq.n	800733c <_printf_i+0x164>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	079b      	lsls	r3, r3, #30
 80073e8:	d413      	bmi.n	8007412 <_printf_i+0x23a>
 80073ea:	68e0      	ldr	r0, [r4, #12]
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	4298      	cmp	r0, r3
 80073f0:	bfb8      	it	lt
 80073f2:	4618      	movlt	r0, r3
 80073f4:	e7a4      	b.n	8007340 <_printf_i+0x168>
 80073f6:	2301      	movs	r3, #1
 80073f8:	4632      	mov	r2, r6
 80073fa:	4649      	mov	r1, r9
 80073fc:	4640      	mov	r0, r8
 80073fe:	47d0      	blx	sl
 8007400:	3001      	adds	r0, #1
 8007402:	d09b      	beq.n	800733c <_printf_i+0x164>
 8007404:	3501      	adds	r5, #1
 8007406:	68e3      	ldr	r3, [r4, #12]
 8007408:	9903      	ldr	r1, [sp, #12]
 800740a:	1a5b      	subs	r3, r3, r1
 800740c:	42ab      	cmp	r3, r5
 800740e:	dcf2      	bgt.n	80073f6 <_printf_i+0x21e>
 8007410:	e7eb      	b.n	80073ea <_printf_i+0x212>
 8007412:	2500      	movs	r5, #0
 8007414:	f104 0619 	add.w	r6, r4, #25
 8007418:	e7f5      	b.n	8007406 <_printf_i+0x22e>
 800741a:	bf00      	nop
 800741c:	080099ea 	.word	0x080099ea
 8007420:	080099fb 	.word	0x080099fb

08007424 <sniprintf>:
 8007424:	b40c      	push	{r2, r3}
 8007426:	b530      	push	{r4, r5, lr}
 8007428:	4b17      	ldr	r3, [pc, #92]	; (8007488 <sniprintf+0x64>)
 800742a:	1e0c      	subs	r4, r1, #0
 800742c:	681d      	ldr	r5, [r3, #0]
 800742e:	b09d      	sub	sp, #116	; 0x74
 8007430:	da08      	bge.n	8007444 <sniprintf+0x20>
 8007432:	238b      	movs	r3, #139	; 0x8b
 8007434:	602b      	str	r3, [r5, #0]
 8007436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800743a:	b01d      	add	sp, #116	; 0x74
 800743c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007440:	b002      	add	sp, #8
 8007442:	4770      	bx	lr
 8007444:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007448:	f8ad 3014 	strh.w	r3, [sp, #20]
 800744c:	bf14      	ite	ne
 800744e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007452:	4623      	moveq	r3, r4
 8007454:	9304      	str	r3, [sp, #16]
 8007456:	9307      	str	r3, [sp, #28]
 8007458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800745c:	9002      	str	r0, [sp, #8]
 800745e:	9006      	str	r0, [sp, #24]
 8007460:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007464:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007466:	ab21      	add	r3, sp, #132	; 0x84
 8007468:	a902      	add	r1, sp, #8
 800746a:	4628      	mov	r0, r5
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	f001 fb79 	bl	8008b64 <_svfiprintf_r>
 8007472:	1c43      	adds	r3, r0, #1
 8007474:	bfbc      	itt	lt
 8007476:	238b      	movlt	r3, #139	; 0x8b
 8007478:	602b      	strlt	r3, [r5, #0]
 800747a:	2c00      	cmp	r4, #0
 800747c:	d0dd      	beq.n	800743a <sniprintf+0x16>
 800747e:	9b02      	ldr	r3, [sp, #8]
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	e7d9      	b.n	800743a <sniprintf+0x16>
 8007486:	bf00      	nop
 8007488:	2000000c 	.word	0x2000000c

0800748c <quorem>:
 800748c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	6903      	ldr	r3, [r0, #16]
 8007492:	690c      	ldr	r4, [r1, #16]
 8007494:	42a3      	cmp	r3, r4
 8007496:	4607      	mov	r7, r0
 8007498:	f2c0 8081 	blt.w	800759e <quorem+0x112>
 800749c:	3c01      	subs	r4, #1
 800749e:	f101 0814 	add.w	r8, r1, #20
 80074a2:	f100 0514 	add.w	r5, r0, #20
 80074a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074aa:	9301      	str	r3, [sp, #4]
 80074ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074b4:	3301      	adds	r3, #1
 80074b6:	429a      	cmp	r2, r3
 80074b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80074c4:	d331      	bcc.n	800752a <quorem+0x9e>
 80074c6:	f04f 0e00 	mov.w	lr, #0
 80074ca:	4640      	mov	r0, r8
 80074cc:	46ac      	mov	ip, r5
 80074ce:	46f2      	mov	sl, lr
 80074d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80074d4:	b293      	uxth	r3, r2
 80074d6:	fb06 e303 	mla	r3, r6, r3, lr
 80074da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80074de:	b29b      	uxth	r3, r3
 80074e0:	ebaa 0303 	sub.w	r3, sl, r3
 80074e4:	f8dc a000 	ldr.w	sl, [ip]
 80074e8:	0c12      	lsrs	r2, r2, #16
 80074ea:	fa13 f38a 	uxtah	r3, r3, sl
 80074ee:	fb06 e202 	mla	r2, r6, r2, lr
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	9b00      	ldr	r3, [sp, #0]
 80074f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074fa:	b292      	uxth	r2, r2
 80074fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007504:	f8bd 3000 	ldrh.w	r3, [sp]
 8007508:	4581      	cmp	r9, r0
 800750a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800750e:	f84c 3b04 	str.w	r3, [ip], #4
 8007512:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007516:	d2db      	bcs.n	80074d0 <quorem+0x44>
 8007518:	f855 300b 	ldr.w	r3, [r5, fp]
 800751c:	b92b      	cbnz	r3, 800752a <quorem+0x9e>
 800751e:	9b01      	ldr	r3, [sp, #4]
 8007520:	3b04      	subs	r3, #4
 8007522:	429d      	cmp	r5, r3
 8007524:	461a      	mov	r2, r3
 8007526:	d32e      	bcc.n	8007586 <quorem+0xfa>
 8007528:	613c      	str	r4, [r7, #16]
 800752a:	4638      	mov	r0, r7
 800752c:	f001 f8c6 	bl	80086bc <__mcmp>
 8007530:	2800      	cmp	r0, #0
 8007532:	db24      	blt.n	800757e <quorem+0xf2>
 8007534:	3601      	adds	r6, #1
 8007536:	4628      	mov	r0, r5
 8007538:	f04f 0c00 	mov.w	ip, #0
 800753c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007540:	f8d0 e000 	ldr.w	lr, [r0]
 8007544:	b293      	uxth	r3, r2
 8007546:	ebac 0303 	sub.w	r3, ip, r3
 800754a:	0c12      	lsrs	r2, r2, #16
 800754c:	fa13 f38e 	uxtah	r3, r3, lr
 8007550:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007558:	b29b      	uxth	r3, r3
 800755a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800755e:	45c1      	cmp	r9, r8
 8007560:	f840 3b04 	str.w	r3, [r0], #4
 8007564:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007568:	d2e8      	bcs.n	800753c <quorem+0xb0>
 800756a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800756e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007572:	b922      	cbnz	r2, 800757e <quorem+0xf2>
 8007574:	3b04      	subs	r3, #4
 8007576:	429d      	cmp	r5, r3
 8007578:	461a      	mov	r2, r3
 800757a:	d30a      	bcc.n	8007592 <quorem+0x106>
 800757c:	613c      	str	r4, [r7, #16]
 800757e:	4630      	mov	r0, r6
 8007580:	b003      	add	sp, #12
 8007582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007586:	6812      	ldr	r2, [r2, #0]
 8007588:	3b04      	subs	r3, #4
 800758a:	2a00      	cmp	r2, #0
 800758c:	d1cc      	bne.n	8007528 <quorem+0x9c>
 800758e:	3c01      	subs	r4, #1
 8007590:	e7c7      	b.n	8007522 <quorem+0x96>
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	3b04      	subs	r3, #4
 8007596:	2a00      	cmp	r2, #0
 8007598:	d1f0      	bne.n	800757c <quorem+0xf0>
 800759a:	3c01      	subs	r4, #1
 800759c:	e7eb      	b.n	8007576 <quorem+0xea>
 800759e:	2000      	movs	r0, #0
 80075a0:	e7ee      	b.n	8007580 <quorem+0xf4>
 80075a2:	0000      	movs	r0, r0
 80075a4:	0000      	movs	r0, r0
	...

080075a8 <_dtoa_r>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	ed2d 8b04 	vpush	{d8-d9}
 80075b0:	ec57 6b10 	vmov	r6, r7, d0
 80075b4:	b093      	sub	sp, #76	; 0x4c
 80075b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80075bc:	9106      	str	r1, [sp, #24]
 80075be:	ee10 aa10 	vmov	sl, s0
 80075c2:	4604      	mov	r4, r0
 80075c4:	9209      	str	r2, [sp, #36]	; 0x24
 80075c6:	930c      	str	r3, [sp, #48]	; 0x30
 80075c8:	46bb      	mov	fp, r7
 80075ca:	b975      	cbnz	r5, 80075ea <_dtoa_r+0x42>
 80075cc:	2010      	movs	r0, #16
 80075ce:	f000 fddd 	bl	800818c <malloc>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6260      	str	r0, [r4, #36]	; 0x24
 80075d6:	b920      	cbnz	r0, 80075e2 <_dtoa_r+0x3a>
 80075d8:	4ba7      	ldr	r3, [pc, #668]	; (8007878 <_dtoa_r+0x2d0>)
 80075da:	21ea      	movs	r1, #234	; 0xea
 80075dc:	48a7      	ldr	r0, [pc, #668]	; (800787c <_dtoa_r+0x2d4>)
 80075de:	f001 fbd1 	bl	8008d84 <__assert_func>
 80075e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075e6:	6005      	str	r5, [r0, #0]
 80075e8:	60c5      	str	r5, [r0, #12]
 80075ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075ec:	6819      	ldr	r1, [r3, #0]
 80075ee:	b151      	cbz	r1, 8007606 <_dtoa_r+0x5e>
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	604a      	str	r2, [r1, #4]
 80075f4:	2301      	movs	r3, #1
 80075f6:	4093      	lsls	r3, r2
 80075f8:	608b      	str	r3, [r1, #8]
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 fe1c 	bl	8008238 <_Bfree>
 8007600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	1e3b      	subs	r3, r7, #0
 8007608:	bfaa      	itet	ge
 800760a:	2300      	movge	r3, #0
 800760c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007610:	f8c8 3000 	strge.w	r3, [r8]
 8007614:	4b9a      	ldr	r3, [pc, #616]	; (8007880 <_dtoa_r+0x2d8>)
 8007616:	bfbc      	itt	lt
 8007618:	2201      	movlt	r2, #1
 800761a:	f8c8 2000 	strlt.w	r2, [r8]
 800761e:	ea33 030b 	bics.w	r3, r3, fp
 8007622:	d11b      	bne.n	800765c <_dtoa_r+0xb4>
 8007624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007626:	f242 730f 	movw	r3, #9999	; 0x270f
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007630:	4333      	orrs	r3, r6
 8007632:	f000 8592 	beq.w	800815a <_dtoa_r+0xbb2>
 8007636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007638:	b963      	cbnz	r3, 8007654 <_dtoa_r+0xac>
 800763a:	4b92      	ldr	r3, [pc, #584]	; (8007884 <_dtoa_r+0x2dc>)
 800763c:	e022      	b.n	8007684 <_dtoa_r+0xdc>
 800763e:	4b92      	ldr	r3, [pc, #584]	; (8007888 <_dtoa_r+0x2e0>)
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	3308      	adds	r3, #8
 8007644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	9801      	ldr	r0, [sp, #4]
 800764a:	b013      	add	sp, #76	; 0x4c
 800764c:	ecbd 8b04 	vpop	{d8-d9}
 8007650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007654:	4b8b      	ldr	r3, [pc, #556]	; (8007884 <_dtoa_r+0x2dc>)
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	3303      	adds	r3, #3
 800765a:	e7f3      	b.n	8007644 <_dtoa_r+0x9c>
 800765c:	2200      	movs	r2, #0
 800765e:	2300      	movs	r3, #0
 8007660:	4650      	mov	r0, sl
 8007662:	4659      	mov	r1, fp
 8007664:	f7f9 fa58 	bl	8000b18 <__aeabi_dcmpeq>
 8007668:	ec4b ab19 	vmov	d9, sl, fp
 800766c:	4680      	mov	r8, r0
 800766e:	b158      	cbz	r0, 8007688 <_dtoa_r+0xe0>
 8007670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007672:	2301      	movs	r3, #1
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 856b 	beq.w	8008154 <_dtoa_r+0xbac>
 800767e:	4883      	ldr	r0, [pc, #524]	; (800788c <_dtoa_r+0x2e4>)
 8007680:	6018      	str	r0, [r3, #0]
 8007682:	1e43      	subs	r3, r0, #1
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	e7df      	b.n	8007648 <_dtoa_r+0xa0>
 8007688:	ec4b ab10 	vmov	d0, sl, fp
 800768c:	aa10      	add	r2, sp, #64	; 0x40
 800768e:	a911      	add	r1, sp, #68	; 0x44
 8007690:	4620      	mov	r0, r4
 8007692:	f001 f8b9 	bl	8008808 <__d2b>
 8007696:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800769a:	ee08 0a10 	vmov	s16, r0
 800769e:	2d00      	cmp	r5, #0
 80076a0:	f000 8084 	beq.w	80077ac <_dtoa_r+0x204>
 80076a4:	ee19 3a90 	vmov	r3, s19
 80076a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80076b0:	4656      	mov	r6, sl
 80076b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80076b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80076ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80076be:	4b74      	ldr	r3, [pc, #464]	; (8007890 <_dtoa_r+0x2e8>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	4630      	mov	r0, r6
 80076c4:	4639      	mov	r1, r7
 80076c6:	f7f8 fe07 	bl	80002d8 <__aeabi_dsub>
 80076ca:	a365      	add	r3, pc, #404	; (adr r3, 8007860 <_dtoa_r+0x2b8>)
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	f7f8 ffba 	bl	8000648 <__aeabi_dmul>
 80076d4:	a364      	add	r3, pc, #400	; (adr r3, 8007868 <_dtoa_r+0x2c0>)
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f7f8 fdff 	bl	80002dc <__adddf3>
 80076de:	4606      	mov	r6, r0
 80076e0:	4628      	mov	r0, r5
 80076e2:	460f      	mov	r7, r1
 80076e4:	f7f8 ff46 	bl	8000574 <__aeabi_i2d>
 80076e8:	a361      	add	r3, pc, #388	; (adr r3, 8007870 <_dtoa_r+0x2c8>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f7f8 ffab 	bl	8000648 <__aeabi_dmul>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7f8 fdef 	bl	80002dc <__adddf3>
 80076fe:	4606      	mov	r6, r0
 8007700:	460f      	mov	r7, r1
 8007702:	f7f9 fa51 	bl	8000ba8 <__aeabi_d2iz>
 8007706:	2200      	movs	r2, #0
 8007708:	9000      	str	r0, [sp, #0]
 800770a:	2300      	movs	r3, #0
 800770c:	4630      	mov	r0, r6
 800770e:	4639      	mov	r1, r7
 8007710:	f7f9 fa0c 	bl	8000b2c <__aeabi_dcmplt>
 8007714:	b150      	cbz	r0, 800772c <_dtoa_r+0x184>
 8007716:	9800      	ldr	r0, [sp, #0]
 8007718:	f7f8 ff2c 	bl	8000574 <__aeabi_i2d>
 800771c:	4632      	mov	r2, r6
 800771e:	463b      	mov	r3, r7
 8007720:	f7f9 f9fa 	bl	8000b18 <__aeabi_dcmpeq>
 8007724:	b910      	cbnz	r0, 800772c <_dtoa_r+0x184>
 8007726:	9b00      	ldr	r3, [sp, #0]
 8007728:	3b01      	subs	r3, #1
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	9b00      	ldr	r3, [sp, #0]
 800772e:	2b16      	cmp	r3, #22
 8007730:	d85a      	bhi.n	80077e8 <_dtoa_r+0x240>
 8007732:	9a00      	ldr	r2, [sp, #0]
 8007734:	4b57      	ldr	r3, [pc, #348]	; (8007894 <_dtoa_r+0x2ec>)
 8007736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	ec51 0b19 	vmov	r0, r1, d9
 8007742:	f7f9 f9f3 	bl	8000b2c <__aeabi_dcmplt>
 8007746:	2800      	cmp	r0, #0
 8007748:	d050      	beq.n	80077ec <_dtoa_r+0x244>
 800774a:	9b00      	ldr	r3, [sp, #0]
 800774c:	3b01      	subs	r3, #1
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	2300      	movs	r3, #0
 8007752:	930b      	str	r3, [sp, #44]	; 0x2c
 8007754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007756:	1b5d      	subs	r5, r3, r5
 8007758:	1e6b      	subs	r3, r5, #1
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	bf45      	ittet	mi
 800775e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007762:	9304      	strmi	r3, [sp, #16]
 8007764:	2300      	movpl	r3, #0
 8007766:	2300      	movmi	r3, #0
 8007768:	bf4c      	ite	mi
 800776a:	9305      	strmi	r3, [sp, #20]
 800776c:	9304      	strpl	r3, [sp, #16]
 800776e:	9b00      	ldr	r3, [sp, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	db3d      	blt.n	80077f0 <_dtoa_r+0x248>
 8007774:	9b05      	ldr	r3, [sp, #20]
 8007776:	9a00      	ldr	r2, [sp, #0]
 8007778:	920a      	str	r2, [sp, #40]	; 0x28
 800777a:	4413      	add	r3, r2
 800777c:	9305      	str	r3, [sp, #20]
 800777e:	2300      	movs	r3, #0
 8007780:	9307      	str	r3, [sp, #28]
 8007782:	9b06      	ldr	r3, [sp, #24]
 8007784:	2b09      	cmp	r3, #9
 8007786:	f200 8089 	bhi.w	800789c <_dtoa_r+0x2f4>
 800778a:	2b05      	cmp	r3, #5
 800778c:	bfc4      	itt	gt
 800778e:	3b04      	subgt	r3, #4
 8007790:	9306      	strgt	r3, [sp, #24]
 8007792:	9b06      	ldr	r3, [sp, #24]
 8007794:	f1a3 0302 	sub.w	r3, r3, #2
 8007798:	bfcc      	ite	gt
 800779a:	2500      	movgt	r5, #0
 800779c:	2501      	movle	r5, #1
 800779e:	2b03      	cmp	r3, #3
 80077a0:	f200 8087 	bhi.w	80078b2 <_dtoa_r+0x30a>
 80077a4:	e8df f003 	tbb	[pc, r3]
 80077a8:	59383a2d 	.word	0x59383a2d
 80077ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80077b0:	441d      	add	r5, r3
 80077b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	bfc1      	itttt	gt
 80077ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80077be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80077c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80077c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80077ca:	bfda      	itte	le
 80077cc:	f1c3 0320 	rsble	r3, r3, #32
 80077d0:	fa06 f003 	lslle.w	r0, r6, r3
 80077d4:	4318      	orrgt	r0, r3
 80077d6:	f7f8 febd 	bl	8000554 <__aeabi_ui2d>
 80077da:	2301      	movs	r3, #1
 80077dc:	4606      	mov	r6, r0
 80077de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80077e2:	3d01      	subs	r5, #1
 80077e4:	930e      	str	r3, [sp, #56]	; 0x38
 80077e6:	e76a      	b.n	80076be <_dtoa_r+0x116>
 80077e8:	2301      	movs	r3, #1
 80077ea:	e7b2      	b.n	8007752 <_dtoa_r+0x1aa>
 80077ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80077ee:	e7b1      	b.n	8007754 <_dtoa_r+0x1ac>
 80077f0:	9b04      	ldr	r3, [sp, #16]
 80077f2:	9a00      	ldr	r2, [sp, #0]
 80077f4:	1a9b      	subs	r3, r3, r2
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	4253      	negs	r3, r2
 80077fa:	9307      	str	r3, [sp, #28]
 80077fc:	2300      	movs	r3, #0
 80077fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007800:	e7bf      	b.n	8007782 <_dtoa_r+0x1da>
 8007802:	2300      	movs	r3, #0
 8007804:	9308      	str	r3, [sp, #32]
 8007806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	dc55      	bgt.n	80078b8 <_dtoa_r+0x310>
 800780c:	2301      	movs	r3, #1
 800780e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007812:	461a      	mov	r2, r3
 8007814:	9209      	str	r2, [sp, #36]	; 0x24
 8007816:	e00c      	b.n	8007832 <_dtoa_r+0x28a>
 8007818:	2301      	movs	r3, #1
 800781a:	e7f3      	b.n	8007804 <_dtoa_r+0x25c>
 800781c:	2300      	movs	r3, #0
 800781e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007820:	9308      	str	r3, [sp, #32]
 8007822:	9b00      	ldr	r3, [sp, #0]
 8007824:	4413      	add	r3, r2
 8007826:	9302      	str	r3, [sp, #8]
 8007828:	3301      	adds	r3, #1
 800782a:	2b01      	cmp	r3, #1
 800782c:	9303      	str	r3, [sp, #12]
 800782e:	bfb8      	it	lt
 8007830:	2301      	movlt	r3, #1
 8007832:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007834:	2200      	movs	r2, #0
 8007836:	6042      	str	r2, [r0, #4]
 8007838:	2204      	movs	r2, #4
 800783a:	f102 0614 	add.w	r6, r2, #20
 800783e:	429e      	cmp	r6, r3
 8007840:	6841      	ldr	r1, [r0, #4]
 8007842:	d93d      	bls.n	80078c0 <_dtoa_r+0x318>
 8007844:	4620      	mov	r0, r4
 8007846:	f000 fcb7 	bl	80081b8 <_Balloc>
 800784a:	9001      	str	r0, [sp, #4]
 800784c:	2800      	cmp	r0, #0
 800784e:	d13b      	bne.n	80078c8 <_dtoa_r+0x320>
 8007850:	4b11      	ldr	r3, [pc, #68]	; (8007898 <_dtoa_r+0x2f0>)
 8007852:	4602      	mov	r2, r0
 8007854:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007858:	e6c0      	b.n	80075dc <_dtoa_r+0x34>
 800785a:	2301      	movs	r3, #1
 800785c:	e7df      	b.n	800781e <_dtoa_r+0x276>
 800785e:	bf00      	nop
 8007860:	636f4361 	.word	0x636f4361
 8007864:	3fd287a7 	.word	0x3fd287a7
 8007868:	8b60c8b3 	.word	0x8b60c8b3
 800786c:	3fc68a28 	.word	0x3fc68a28
 8007870:	509f79fb 	.word	0x509f79fb
 8007874:	3fd34413 	.word	0x3fd34413
 8007878:	08009a19 	.word	0x08009a19
 800787c:	08009a30 	.word	0x08009a30
 8007880:	7ff00000 	.word	0x7ff00000
 8007884:	08009a15 	.word	0x08009a15
 8007888:	08009a0c 	.word	0x08009a0c
 800788c:	080099e9 	.word	0x080099e9
 8007890:	3ff80000 	.word	0x3ff80000
 8007894:	08009b20 	.word	0x08009b20
 8007898:	08009a8b 	.word	0x08009a8b
 800789c:	2501      	movs	r5, #1
 800789e:	2300      	movs	r3, #0
 80078a0:	9306      	str	r3, [sp, #24]
 80078a2:	9508      	str	r5, [sp, #32]
 80078a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078ac:	2200      	movs	r2, #0
 80078ae:	2312      	movs	r3, #18
 80078b0:	e7b0      	b.n	8007814 <_dtoa_r+0x26c>
 80078b2:	2301      	movs	r3, #1
 80078b4:	9308      	str	r3, [sp, #32]
 80078b6:	e7f5      	b.n	80078a4 <_dtoa_r+0x2fc>
 80078b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078be:	e7b8      	b.n	8007832 <_dtoa_r+0x28a>
 80078c0:	3101      	adds	r1, #1
 80078c2:	6041      	str	r1, [r0, #4]
 80078c4:	0052      	lsls	r2, r2, #1
 80078c6:	e7b8      	b.n	800783a <_dtoa_r+0x292>
 80078c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078ca:	9a01      	ldr	r2, [sp, #4]
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	9b03      	ldr	r3, [sp, #12]
 80078d0:	2b0e      	cmp	r3, #14
 80078d2:	f200 809d 	bhi.w	8007a10 <_dtoa_r+0x468>
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	f000 809a 	beq.w	8007a10 <_dtoa_r+0x468>
 80078dc:	9b00      	ldr	r3, [sp, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dd32      	ble.n	8007948 <_dtoa_r+0x3a0>
 80078e2:	4ab7      	ldr	r2, [pc, #732]	; (8007bc0 <_dtoa_r+0x618>)
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078f0:	9b00      	ldr	r3, [sp, #0]
 80078f2:	05d8      	lsls	r0, r3, #23
 80078f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80078f8:	d516      	bpl.n	8007928 <_dtoa_r+0x380>
 80078fa:	4bb2      	ldr	r3, [pc, #712]	; (8007bc4 <_dtoa_r+0x61c>)
 80078fc:	ec51 0b19 	vmov	r0, r1, d9
 8007900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007904:	f7f8 ffca 	bl	800089c <__aeabi_ddiv>
 8007908:	f007 070f 	and.w	r7, r7, #15
 800790c:	4682      	mov	sl, r0
 800790e:	468b      	mov	fp, r1
 8007910:	2503      	movs	r5, #3
 8007912:	4eac      	ldr	r6, [pc, #688]	; (8007bc4 <_dtoa_r+0x61c>)
 8007914:	b957      	cbnz	r7, 800792c <_dtoa_r+0x384>
 8007916:	4642      	mov	r2, r8
 8007918:	464b      	mov	r3, r9
 800791a:	4650      	mov	r0, sl
 800791c:	4659      	mov	r1, fp
 800791e:	f7f8 ffbd 	bl	800089c <__aeabi_ddiv>
 8007922:	4682      	mov	sl, r0
 8007924:	468b      	mov	fp, r1
 8007926:	e028      	b.n	800797a <_dtoa_r+0x3d2>
 8007928:	2502      	movs	r5, #2
 800792a:	e7f2      	b.n	8007912 <_dtoa_r+0x36a>
 800792c:	07f9      	lsls	r1, r7, #31
 800792e:	d508      	bpl.n	8007942 <_dtoa_r+0x39a>
 8007930:	4640      	mov	r0, r8
 8007932:	4649      	mov	r1, r9
 8007934:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007938:	f7f8 fe86 	bl	8000648 <__aeabi_dmul>
 800793c:	3501      	adds	r5, #1
 800793e:	4680      	mov	r8, r0
 8007940:	4689      	mov	r9, r1
 8007942:	107f      	asrs	r7, r7, #1
 8007944:	3608      	adds	r6, #8
 8007946:	e7e5      	b.n	8007914 <_dtoa_r+0x36c>
 8007948:	f000 809b 	beq.w	8007a82 <_dtoa_r+0x4da>
 800794c:	9b00      	ldr	r3, [sp, #0]
 800794e:	4f9d      	ldr	r7, [pc, #628]	; (8007bc4 <_dtoa_r+0x61c>)
 8007950:	425e      	negs	r6, r3
 8007952:	4b9b      	ldr	r3, [pc, #620]	; (8007bc0 <_dtoa_r+0x618>)
 8007954:	f006 020f 	and.w	r2, r6, #15
 8007958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	ec51 0b19 	vmov	r0, r1, d9
 8007964:	f7f8 fe70 	bl	8000648 <__aeabi_dmul>
 8007968:	1136      	asrs	r6, r6, #4
 800796a:	4682      	mov	sl, r0
 800796c:	468b      	mov	fp, r1
 800796e:	2300      	movs	r3, #0
 8007970:	2502      	movs	r5, #2
 8007972:	2e00      	cmp	r6, #0
 8007974:	d17a      	bne.n	8007a6c <_dtoa_r+0x4c4>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1d3      	bne.n	8007922 <_dtoa_r+0x37a>
 800797a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8082 	beq.w	8007a86 <_dtoa_r+0x4de>
 8007982:	4b91      	ldr	r3, [pc, #580]	; (8007bc8 <_dtoa_r+0x620>)
 8007984:	2200      	movs	r2, #0
 8007986:	4650      	mov	r0, sl
 8007988:	4659      	mov	r1, fp
 800798a:	f7f9 f8cf 	bl	8000b2c <__aeabi_dcmplt>
 800798e:	2800      	cmp	r0, #0
 8007990:	d079      	beq.n	8007a86 <_dtoa_r+0x4de>
 8007992:	9b03      	ldr	r3, [sp, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d076      	beq.n	8007a86 <_dtoa_r+0x4de>
 8007998:	9b02      	ldr	r3, [sp, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dd36      	ble.n	8007a0c <_dtoa_r+0x464>
 800799e:	9b00      	ldr	r3, [sp, #0]
 80079a0:	4650      	mov	r0, sl
 80079a2:	4659      	mov	r1, fp
 80079a4:	1e5f      	subs	r7, r3, #1
 80079a6:	2200      	movs	r2, #0
 80079a8:	4b88      	ldr	r3, [pc, #544]	; (8007bcc <_dtoa_r+0x624>)
 80079aa:	f7f8 fe4d 	bl	8000648 <__aeabi_dmul>
 80079ae:	9e02      	ldr	r6, [sp, #8]
 80079b0:	4682      	mov	sl, r0
 80079b2:	468b      	mov	fp, r1
 80079b4:	3501      	adds	r5, #1
 80079b6:	4628      	mov	r0, r5
 80079b8:	f7f8 fddc 	bl	8000574 <__aeabi_i2d>
 80079bc:	4652      	mov	r2, sl
 80079be:	465b      	mov	r3, fp
 80079c0:	f7f8 fe42 	bl	8000648 <__aeabi_dmul>
 80079c4:	4b82      	ldr	r3, [pc, #520]	; (8007bd0 <_dtoa_r+0x628>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	f7f8 fc88 	bl	80002dc <__adddf3>
 80079cc:	46d0      	mov	r8, sl
 80079ce:	46d9      	mov	r9, fp
 80079d0:	4682      	mov	sl, r0
 80079d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80079d6:	2e00      	cmp	r6, #0
 80079d8:	d158      	bne.n	8007a8c <_dtoa_r+0x4e4>
 80079da:	4b7e      	ldr	r3, [pc, #504]	; (8007bd4 <_dtoa_r+0x62c>)
 80079dc:	2200      	movs	r2, #0
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f8 fc79 	bl	80002d8 <__aeabi_dsub>
 80079e6:	4652      	mov	r2, sl
 80079e8:	465b      	mov	r3, fp
 80079ea:	4680      	mov	r8, r0
 80079ec:	4689      	mov	r9, r1
 80079ee:	f7f9 f8bb 	bl	8000b68 <__aeabi_dcmpgt>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f040 8295 	bne.w	8007f22 <_dtoa_r+0x97a>
 80079f8:	4652      	mov	r2, sl
 80079fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80079fe:	4640      	mov	r0, r8
 8007a00:	4649      	mov	r1, r9
 8007a02:	f7f9 f893 	bl	8000b2c <__aeabi_dcmplt>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	f040 8289 	bne.w	8007f1e <_dtoa_r+0x976>
 8007a0c:	ec5b ab19 	vmov	sl, fp, d9
 8007a10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f2c0 8148 	blt.w	8007ca8 <_dtoa_r+0x700>
 8007a18:	9a00      	ldr	r2, [sp, #0]
 8007a1a:	2a0e      	cmp	r2, #14
 8007a1c:	f300 8144 	bgt.w	8007ca8 <_dtoa_r+0x700>
 8007a20:	4b67      	ldr	r3, [pc, #412]	; (8007bc0 <_dtoa_r+0x618>)
 8007a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f280 80d5 	bge.w	8007bdc <_dtoa_r+0x634>
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f300 80d1 	bgt.w	8007bdc <_dtoa_r+0x634>
 8007a3a:	f040 826f 	bne.w	8007f1c <_dtoa_r+0x974>
 8007a3e:	4b65      	ldr	r3, [pc, #404]	; (8007bd4 <_dtoa_r+0x62c>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	4640      	mov	r0, r8
 8007a44:	4649      	mov	r1, r9
 8007a46:	f7f8 fdff 	bl	8000648 <__aeabi_dmul>
 8007a4a:	4652      	mov	r2, sl
 8007a4c:	465b      	mov	r3, fp
 8007a4e:	f7f9 f881 	bl	8000b54 <__aeabi_dcmpge>
 8007a52:	9e03      	ldr	r6, [sp, #12]
 8007a54:	4637      	mov	r7, r6
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f040 8245 	bne.w	8007ee6 <_dtoa_r+0x93e>
 8007a5c:	9d01      	ldr	r5, [sp, #4]
 8007a5e:	2331      	movs	r3, #49	; 0x31
 8007a60:	f805 3b01 	strb.w	r3, [r5], #1
 8007a64:	9b00      	ldr	r3, [sp, #0]
 8007a66:	3301      	adds	r3, #1
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	e240      	b.n	8007eee <_dtoa_r+0x946>
 8007a6c:	07f2      	lsls	r2, r6, #31
 8007a6e:	d505      	bpl.n	8007a7c <_dtoa_r+0x4d4>
 8007a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a74:	f7f8 fde8 	bl	8000648 <__aeabi_dmul>
 8007a78:	3501      	adds	r5, #1
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	1076      	asrs	r6, r6, #1
 8007a7e:	3708      	adds	r7, #8
 8007a80:	e777      	b.n	8007972 <_dtoa_r+0x3ca>
 8007a82:	2502      	movs	r5, #2
 8007a84:	e779      	b.n	800797a <_dtoa_r+0x3d2>
 8007a86:	9f00      	ldr	r7, [sp, #0]
 8007a88:	9e03      	ldr	r6, [sp, #12]
 8007a8a:	e794      	b.n	80079b6 <_dtoa_r+0x40e>
 8007a8c:	9901      	ldr	r1, [sp, #4]
 8007a8e:	4b4c      	ldr	r3, [pc, #304]	; (8007bc0 <_dtoa_r+0x618>)
 8007a90:	4431      	add	r1, r6
 8007a92:	910d      	str	r1, [sp, #52]	; 0x34
 8007a94:	9908      	ldr	r1, [sp, #32]
 8007a96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a9e:	2900      	cmp	r1, #0
 8007aa0:	d043      	beq.n	8007b2a <_dtoa_r+0x582>
 8007aa2:	494d      	ldr	r1, [pc, #308]	; (8007bd8 <_dtoa_r+0x630>)
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	f7f8 fef9 	bl	800089c <__aeabi_ddiv>
 8007aaa:	4652      	mov	r2, sl
 8007aac:	465b      	mov	r3, fp
 8007aae:	f7f8 fc13 	bl	80002d8 <__aeabi_dsub>
 8007ab2:	9d01      	ldr	r5, [sp, #4]
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	468b      	mov	fp, r1
 8007ab8:	4649      	mov	r1, r9
 8007aba:	4640      	mov	r0, r8
 8007abc:	f7f9 f874 	bl	8000ba8 <__aeabi_d2iz>
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	f7f8 fd57 	bl	8000574 <__aeabi_i2d>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4640      	mov	r0, r8
 8007acc:	4649      	mov	r1, r9
 8007ace:	f7f8 fc03 	bl	80002d8 <__aeabi_dsub>
 8007ad2:	3630      	adds	r6, #48	; 0x30
 8007ad4:	f805 6b01 	strb.w	r6, [r5], #1
 8007ad8:	4652      	mov	r2, sl
 8007ada:	465b      	mov	r3, fp
 8007adc:	4680      	mov	r8, r0
 8007ade:	4689      	mov	r9, r1
 8007ae0:	f7f9 f824 	bl	8000b2c <__aeabi_dcmplt>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d163      	bne.n	8007bb0 <_dtoa_r+0x608>
 8007ae8:	4642      	mov	r2, r8
 8007aea:	464b      	mov	r3, r9
 8007aec:	4936      	ldr	r1, [pc, #216]	; (8007bc8 <_dtoa_r+0x620>)
 8007aee:	2000      	movs	r0, #0
 8007af0:	f7f8 fbf2 	bl	80002d8 <__aeabi_dsub>
 8007af4:	4652      	mov	r2, sl
 8007af6:	465b      	mov	r3, fp
 8007af8:	f7f9 f818 	bl	8000b2c <__aeabi_dcmplt>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f040 80b5 	bne.w	8007c6c <_dtoa_r+0x6c4>
 8007b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b04:	429d      	cmp	r5, r3
 8007b06:	d081      	beq.n	8007a0c <_dtoa_r+0x464>
 8007b08:	4b30      	ldr	r3, [pc, #192]	; (8007bcc <_dtoa_r+0x624>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4650      	mov	r0, sl
 8007b0e:	4659      	mov	r1, fp
 8007b10:	f7f8 fd9a 	bl	8000648 <__aeabi_dmul>
 8007b14:	4b2d      	ldr	r3, [pc, #180]	; (8007bcc <_dtoa_r+0x624>)
 8007b16:	4682      	mov	sl, r0
 8007b18:	468b      	mov	fp, r1
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f7f8 fd92 	bl	8000648 <__aeabi_dmul>
 8007b24:	4680      	mov	r8, r0
 8007b26:	4689      	mov	r9, r1
 8007b28:	e7c6      	b.n	8007ab8 <_dtoa_r+0x510>
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	f7f8 fd8b 	bl	8000648 <__aeabi_dmul>
 8007b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b34:	9d01      	ldr	r5, [sp, #4]
 8007b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b38:	4682      	mov	sl, r0
 8007b3a:	468b      	mov	fp, r1
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	4640      	mov	r0, r8
 8007b40:	f7f9 f832 	bl	8000ba8 <__aeabi_d2iz>
 8007b44:	4606      	mov	r6, r0
 8007b46:	f7f8 fd15 	bl	8000574 <__aeabi_i2d>
 8007b4a:	3630      	adds	r6, #48	; 0x30
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4640      	mov	r0, r8
 8007b52:	4649      	mov	r1, r9
 8007b54:	f7f8 fbc0 	bl	80002d8 <__aeabi_dsub>
 8007b58:	f805 6b01 	strb.w	r6, [r5], #1
 8007b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5e:	429d      	cmp	r5, r3
 8007b60:	4680      	mov	r8, r0
 8007b62:	4689      	mov	r9, r1
 8007b64:	f04f 0200 	mov.w	r2, #0
 8007b68:	d124      	bne.n	8007bb4 <_dtoa_r+0x60c>
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <_dtoa_r+0x630>)
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	4659      	mov	r1, fp
 8007b70:	f7f8 fbb4 	bl	80002dc <__adddf3>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4640      	mov	r0, r8
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	f7f8 fff4 	bl	8000b68 <__aeabi_dcmpgt>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d173      	bne.n	8007c6c <_dtoa_r+0x6c4>
 8007b84:	4652      	mov	r2, sl
 8007b86:	465b      	mov	r3, fp
 8007b88:	4913      	ldr	r1, [pc, #76]	; (8007bd8 <_dtoa_r+0x630>)
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	f7f8 fba4 	bl	80002d8 <__aeabi_dsub>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4640      	mov	r0, r8
 8007b96:	4649      	mov	r1, r9
 8007b98:	f7f8 ffc8 	bl	8000b2c <__aeabi_dcmplt>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	f43f af35 	beq.w	8007a0c <_dtoa_r+0x464>
 8007ba2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ba4:	1e6b      	subs	r3, r5, #1
 8007ba6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ba8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bac:	2b30      	cmp	r3, #48	; 0x30
 8007bae:	d0f8      	beq.n	8007ba2 <_dtoa_r+0x5fa>
 8007bb0:	9700      	str	r7, [sp, #0]
 8007bb2:	e049      	b.n	8007c48 <_dtoa_r+0x6a0>
 8007bb4:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <_dtoa_r+0x624>)
 8007bb6:	f7f8 fd47 	bl	8000648 <__aeabi_dmul>
 8007bba:	4680      	mov	r8, r0
 8007bbc:	4689      	mov	r9, r1
 8007bbe:	e7bd      	b.n	8007b3c <_dtoa_r+0x594>
 8007bc0:	08009b20 	.word	0x08009b20
 8007bc4:	08009af8 	.word	0x08009af8
 8007bc8:	3ff00000 	.word	0x3ff00000
 8007bcc:	40240000 	.word	0x40240000
 8007bd0:	401c0000 	.word	0x401c0000
 8007bd4:	40140000 	.word	0x40140000
 8007bd8:	3fe00000 	.word	0x3fe00000
 8007bdc:	9d01      	ldr	r5, [sp, #4]
 8007bde:	4656      	mov	r6, sl
 8007be0:	465f      	mov	r7, fp
 8007be2:	4642      	mov	r2, r8
 8007be4:	464b      	mov	r3, r9
 8007be6:	4630      	mov	r0, r6
 8007be8:	4639      	mov	r1, r7
 8007bea:	f7f8 fe57 	bl	800089c <__aeabi_ddiv>
 8007bee:	f7f8 ffdb 	bl	8000ba8 <__aeabi_d2iz>
 8007bf2:	4682      	mov	sl, r0
 8007bf4:	f7f8 fcbe 	bl	8000574 <__aeabi_i2d>
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	464b      	mov	r3, r9
 8007bfc:	f7f8 fd24 	bl	8000648 <__aeabi_dmul>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4630      	mov	r0, r6
 8007c06:	4639      	mov	r1, r7
 8007c08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007c0c:	f7f8 fb64 	bl	80002d8 <__aeabi_dsub>
 8007c10:	f805 6b01 	strb.w	r6, [r5], #1
 8007c14:	9e01      	ldr	r6, [sp, #4]
 8007c16:	9f03      	ldr	r7, [sp, #12]
 8007c18:	1bae      	subs	r6, r5, r6
 8007c1a:	42b7      	cmp	r7, r6
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	d135      	bne.n	8007c8e <_dtoa_r+0x6e6>
 8007c22:	f7f8 fb5b 	bl	80002dc <__adddf3>
 8007c26:	4642      	mov	r2, r8
 8007c28:	464b      	mov	r3, r9
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	f7f8 ff9b 	bl	8000b68 <__aeabi_dcmpgt>
 8007c32:	b9d0      	cbnz	r0, 8007c6a <_dtoa_r+0x6c2>
 8007c34:	4642      	mov	r2, r8
 8007c36:	464b      	mov	r3, r9
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 ff6c 	bl	8000b18 <__aeabi_dcmpeq>
 8007c40:	b110      	cbz	r0, 8007c48 <_dtoa_r+0x6a0>
 8007c42:	f01a 0f01 	tst.w	sl, #1
 8007c46:	d110      	bne.n	8007c6a <_dtoa_r+0x6c2>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	ee18 1a10 	vmov	r1, s16
 8007c4e:	f000 faf3 	bl	8008238 <_Bfree>
 8007c52:	2300      	movs	r3, #0
 8007c54:	9800      	ldr	r0, [sp, #0]
 8007c56:	702b      	strb	r3, [r5, #0]
 8007c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	6018      	str	r0, [r3, #0]
 8007c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f43f acf1 	beq.w	8007648 <_dtoa_r+0xa0>
 8007c66:	601d      	str	r5, [r3, #0]
 8007c68:	e4ee      	b.n	8007648 <_dtoa_r+0xa0>
 8007c6a:	9f00      	ldr	r7, [sp, #0]
 8007c6c:	462b      	mov	r3, r5
 8007c6e:	461d      	mov	r5, r3
 8007c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c74:	2a39      	cmp	r2, #57	; 0x39
 8007c76:	d106      	bne.n	8007c86 <_dtoa_r+0x6de>
 8007c78:	9a01      	ldr	r2, [sp, #4]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d1f7      	bne.n	8007c6e <_dtoa_r+0x6c6>
 8007c7e:	9901      	ldr	r1, [sp, #4]
 8007c80:	2230      	movs	r2, #48	; 0x30
 8007c82:	3701      	adds	r7, #1
 8007c84:	700a      	strb	r2, [r1, #0]
 8007c86:	781a      	ldrb	r2, [r3, #0]
 8007c88:	3201      	adds	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
 8007c8c:	e790      	b.n	8007bb0 <_dtoa_r+0x608>
 8007c8e:	4ba6      	ldr	r3, [pc, #664]	; (8007f28 <_dtoa_r+0x980>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	f7f8 fcd9 	bl	8000648 <__aeabi_dmul>
 8007c96:	2200      	movs	r2, #0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	f7f8 ff3b 	bl	8000b18 <__aeabi_dcmpeq>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d09d      	beq.n	8007be2 <_dtoa_r+0x63a>
 8007ca6:	e7cf      	b.n	8007c48 <_dtoa_r+0x6a0>
 8007ca8:	9a08      	ldr	r2, [sp, #32]
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	f000 80d7 	beq.w	8007e5e <_dtoa_r+0x8b6>
 8007cb0:	9a06      	ldr	r2, [sp, #24]
 8007cb2:	2a01      	cmp	r2, #1
 8007cb4:	f300 80ba 	bgt.w	8007e2c <_dtoa_r+0x884>
 8007cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	f000 80b2 	beq.w	8007e24 <_dtoa_r+0x87c>
 8007cc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007cc4:	9e07      	ldr	r6, [sp, #28]
 8007cc6:	9d04      	ldr	r5, [sp, #16]
 8007cc8:	9a04      	ldr	r2, [sp, #16]
 8007cca:	441a      	add	r2, r3
 8007ccc:	9204      	str	r2, [sp, #16]
 8007cce:	9a05      	ldr	r2, [sp, #20]
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	441a      	add	r2, r3
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	9205      	str	r2, [sp, #20]
 8007cd8:	f000 fb66 	bl	80083a8 <__i2b>
 8007cdc:	4607      	mov	r7, r0
 8007cde:	2d00      	cmp	r5, #0
 8007ce0:	dd0c      	ble.n	8007cfc <_dtoa_r+0x754>
 8007ce2:	9b05      	ldr	r3, [sp, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dd09      	ble.n	8007cfc <_dtoa_r+0x754>
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	9a04      	ldr	r2, [sp, #16]
 8007cec:	bfa8      	it	ge
 8007cee:	462b      	movge	r3, r5
 8007cf0:	1ad2      	subs	r2, r2, r3
 8007cf2:	9204      	str	r2, [sp, #16]
 8007cf4:	9a05      	ldr	r2, [sp, #20]
 8007cf6:	1aed      	subs	r5, r5, r3
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	9b07      	ldr	r3, [sp, #28]
 8007cfe:	b31b      	cbz	r3, 8007d48 <_dtoa_r+0x7a0>
 8007d00:	9b08      	ldr	r3, [sp, #32]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 80af 	beq.w	8007e66 <_dtoa_r+0x8be>
 8007d08:	2e00      	cmp	r6, #0
 8007d0a:	dd13      	ble.n	8007d34 <_dtoa_r+0x78c>
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	4632      	mov	r2, r6
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 fc09 	bl	8008528 <__pow5mult>
 8007d16:	ee18 2a10 	vmov	r2, s16
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 fb58 	bl	80083d4 <__multiply>
 8007d24:	ee18 1a10 	vmov	r1, s16
 8007d28:	4680      	mov	r8, r0
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 fa84 	bl	8008238 <_Bfree>
 8007d30:	ee08 8a10 	vmov	s16, r8
 8007d34:	9b07      	ldr	r3, [sp, #28]
 8007d36:	1b9a      	subs	r2, r3, r6
 8007d38:	d006      	beq.n	8007d48 <_dtoa_r+0x7a0>
 8007d3a:	ee18 1a10 	vmov	r1, s16
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 fbf2 	bl	8008528 <__pow5mult>
 8007d44:	ee08 0a10 	vmov	s16, r0
 8007d48:	2101      	movs	r1, #1
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 fb2c 	bl	80083a8 <__i2b>
 8007d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	4606      	mov	r6, r0
 8007d56:	f340 8088 	ble.w	8007e6a <_dtoa_r+0x8c2>
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	4601      	mov	r1, r0
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 fbe2 	bl	8008528 <__pow5mult>
 8007d64:	9b06      	ldr	r3, [sp, #24]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	4606      	mov	r6, r0
 8007d6a:	f340 8081 	ble.w	8007e70 <_dtoa_r+0x8c8>
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	6933      	ldr	r3, [r6, #16]
 8007d74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d78:	6918      	ldr	r0, [r3, #16]
 8007d7a:	f000 fac5 	bl	8008308 <__hi0bits>
 8007d7e:	f1c0 0020 	rsb	r0, r0, #32
 8007d82:	9b05      	ldr	r3, [sp, #20]
 8007d84:	4418      	add	r0, r3
 8007d86:	f010 001f 	ands.w	r0, r0, #31
 8007d8a:	f000 8092 	beq.w	8007eb2 <_dtoa_r+0x90a>
 8007d8e:	f1c0 0320 	rsb	r3, r0, #32
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	f340 808a 	ble.w	8007eac <_dtoa_r+0x904>
 8007d98:	f1c0 001c 	rsb	r0, r0, #28
 8007d9c:	9b04      	ldr	r3, [sp, #16]
 8007d9e:	4403      	add	r3, r0
 8007da0:	9304      	str	r3, [sp, #16]
 8007da2:	9b05      	ldr	r3, [sp, #20]
 8007da4:	4403      	add	r3, r0
 8007da6:	4405      	add	r5, r0
 8007da8:	9305      	str	r3, [sp, #20]
 8007daa:	9b04      	ldr	r3, [sp, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dd07      	ble.n	8007dc0 <_dtoa_r+0x818>
 8007db0:	ee18 1a10 	vmov	r1, s16
 8007db4:	461a      	mov	r2, r3
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fc10 	bl	80085dc <__lshift>
 8007dbc:	ee08 0a10 	vmov	s16, r0
 8007dc0:	9b05      	ldr	r3, [sp, #20]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	dd05      	ble.n	8007dd2 <_dtoa_r+0x82a>
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fc06 	bl	80085dc <__lshift>
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d06e      	beq.n	8007eb6 <_dtoa_r+0x90e>
 8007dd8:	ee18 0a10 	vmov	r0, s16
 8007ddc:	4631      	mov	r1, r6
 8007dde:	f000 fc6d 	bl	80086bc <__mcmp>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	da67      	bge.n	8007eb6 <_dtoa_r+0x90e>
 8007de6:	9b00      	ldr	r3, [sp, #0]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	ee18 1a10 	vmov	r1, s16
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	220a      	movs	r2, #10
 8007df2:	2300      	movs	r3, #0
 8007df4:	4620      	mov	r0, r4
 8007df6:	f000 fa41 	bl	800827c <__multadd>
 8007dfa:	9b08      	ldr	r3, [sp, #32]
 8007dfc:	ee08 0a10 	vmov	s16, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 81b1 	beq.w	8008168 <_dtoa_r+0xbc0>
 8007e06:	2300      	movs	r3, #0
 8007e08:	4639      	mov	r1, r7
 8007e0a:	220a      	movs	r2, #10
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 fa35 	bl	800827c <__multadd>
 8007e12:	9b02      	ldr	r3, [sp, #8]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	4607      	mov	r7, r0
 8007e18:	f300 808e 	bgt.w	8007f38 <_dtoa_r+0x990>
 8007e1c:	9b06      	ldr	r3, [sp, #24]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	dc51      	bgt.n	8007ec6 <_dtoa_r+0x91e>
 8007e22:	e089      	b.n	8007f38 <_dtoa_r+0x990>
 8007e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e2a:	e74b      	b.n	8007cc4 <_dtoa_r+0x71c>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	1e5e      	subs	r6, r3, #1
 8007e30:	9b07      	ldr	r3, [sp, #28]
 8007e32:	42b3      	cmp	r3, r6
 8007e34:	bfbf      	itttt	lt
 8007e36:	9b07      	ldrlt	r3, [sp, #28]
 8007e38:	9607      	strlt	r6, [sp, #28]
 8007e3a:	1af2      	sublt	r2, r6, r3
 8007e3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e3e:	bfb6      	itet	lt
 8007e40:	189b      	addlt	r3, r3, r2
 8007e42:	1b9e      	subge	r6, r3, r6
 8007e44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	bfb8      	it	lt
 8007e4a:	2600      	movlt	r6, #0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bfb7      	itett	lt
 8007e50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007e54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007e58:	1a9d      	sublt	r5, r3, r2
 8007e5a:	2300      	movlt	r3, #0
 8007e5c:	e734      	b.n	8007cc8 <_dtoa_r+0x720>
 8007e5e:	9e07      	ldr	r6, [sp, #28]
 8007e60:	9d04      	ldr	r5, [sp, #16]
 8007e62:	9f08      	ldr	r7, [sp, #32]
 8007e64:	e73b      	b.n	8007cde <_dtoa_r+0x736>
 8007e66:	9a07      	ldr	r2, [sp, #28]
 8007e68:	e767      	b.n	8007d3a <_dtoa_r+0x792>
 8007e6a:	9b06      	ldr	r3, [sp, #24]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	dc18      	bgt.n	8007ea2 <_dtoa_r+0x8fa>
 8007e70:	f1ba 0f00 	cmp.w	sl, #0
 8007e74:	d115      	bne.n	8007ea2 <_dtoa_r+0x8fa>
 8007e76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e7a:	b993      	cbnz	r3, 8007ea2 <_dtoa_r+0x8fa>
 8007e7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e80:	0d1b      	lsrs	r3, r3, #20
 8007e82:	051b      	lsls	r3, r3, #20
 8007e84:	b183      	cbz	r3, 8007ea8 <_dtoa_r+0x900>
 8007e86:	9b04      	ldr	r3, [sp, #16]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	9b05      	ldr	r3, [sp, #20]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	f04f 0801 	mov.w	r8, #1
 8007e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f47f af6a 	bne.w	8007d72 <_dtoa_r+0x7ca>
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	e76f      	b.n	8007d82 <_dtoa_r+0x7da>
 8007ea2:	f04f 0800 	mov.w	r8, #0
 8007ea6:	e7f6      	b.n	8007e96 <_dtoa_r+0x8ee>
 8007ea8:	4698      	mov	r8, r3
 8007eaa:	e7f4      	b.n	8007e96 <_dtoa_r+0x8ee>
 8007eac:	f43f af7d 	beq.w	8007daa <_dtoa_r+0x802>
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	301c      	adds	r0, #28
 8007eb4:	e772      	b.n	8007d9c <_dtoa_r+0x7f4>
 8007eb6:	9b03      	ldr	r3, [sp, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	dc37      	bgt.n	8007f2c <_dtoa_r+0x984>
 8007ebc:	9b06      	ldr	r3, [sp, #24]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	dd34      	ble.n	8007f2c <_dtoa_r+0x984>
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	9302      	str	r3, [sp, #8]
 8007ec6:	9b02      	ldr	r3, [sp, #8]
 8007ec8:	b96b      	cbnz	r3, 8007ee6 <_dtoa_r+0x93e>
 8007eca:	4631      	mov	r1, r6
 8007ecc:	2205      	movs	r2, #5
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 f9d4 	bl	800827c <__multadd>
 8007ed4:	4601      	mov	r1, r0
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	ee18 0a10 	vmov	r0, s16
 8007edc:	f000 fbee 	bl	80086bc <__mcmp>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	f73f adbb 	bgt.w	8007a5c <_dtoa_r+0x4b4>
 8007ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee8:	9d01      	ldr	r5, [sp, #4]
 8007eea:	43db      	mvns	r3, r3
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	f04f 0800 	mov.w	r8, #0
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 f99f 	bl	8008238 <_Bfree>
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	f43f aea4 	beq.w	8007c48 <_dtoa_r+0x6a0>
 8007f00:	f1b8 0f00 	cmp.w	r8, #0
 8007f04:	d005      	beq.n	8007f12 <_dtoa_r+0x96a>
 8007f06:	45b8      	cmp	r8, r7
 8007f08:	d003      	beq.n	8007f12 <_dtoa_r+0x96a>
 8007f0a:	4641      	mov	r1, r8
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 f993 	bl	8008238 <_Bfree>
 8007f12:	4639      	mov	r1, r7
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 f98f 	bl	8008238 <_Bfree>
 8007f1a:	e695      	b.n	8007c48 <_dtoa_r+0x6a0>
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	4637      	mov	r7, r6
 8007f20:	e7e1      	b.n	8007ee6 <_dtoa_r+0x93e>
 8007f22:	9700      	str	r7, [sp, #0]
 8007f24:	4637      	mov	r7, r6
 8007f26:	e599      	b.n	8007a5c <_dtoa_r+0x4b4>
 8007f28:	40240000 	.word	0x40240000
 8007f2c:	9b08      	ldr	r3, [sp, #32]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 80ca 	beq.w	80080c8 <_dtoa_r+0xb20>
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	dd05      	ble.n	8007f48 <_dtoa_r+0x9a0>
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	462a      	mov	r2, r5
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 fb4b 	bl	80085dc <__lshift>
 8007f46:	4607      	mov	r7, r0
 8007f48:	f1b8 0f00 	cmp.w	r8, #0
 8007f4c:	d05b      	beq.n	8008006 <_dtoa_r+0xa5e>
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 f931 	bl	80081b8 <_Balloc>
 8007f56:	4605      	mov	r5, r0
 8007f58:	b928      	cbnz	r0, 8007f66 <_dtoa_r+0x9be>
 8007f5a:	4b87      	ldr	r3, [pc, #540]	; (8008178 <_dtoa_r+0xbd0>)
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f62:	f7ff bb3b 	b.w	80075dc <_dtoa_r+0x34>
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	3202      	adds	r2, #2
 8007f6a:	0092      	lsls	r2, r2, #2
 8007f6c:	f107 010c 	add.w	r1, r7, #12
 8007f70:	300c      	adds	r0, #12
 8007f72:	f000 f913 	bl	800819c <memcpy>
 8007f76:	2201      	movs	r2, #1
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fb2e 	bl	80085dc <__lshift>
 8007f80:	9b01      	ldr	r3, [sp, #4]
 8007f82:	f103 0901 	add.w	r9, r3, #1
 8007f86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	9305      	str	r3, [sp, #20]
 8007f8e:	f00a 0301 	and.w	r3, sl, #1
 8007f92:	46b8      	mov	r8, r7
 8007f94:	9304      	str	r3, [sp, #16]
 8007f96:	4607      	mov	r7, r0
 8007f98:	4631      	mov	r1, r6
 8007f9a:	ee18 0a10 	vmov	r0, s16
 8007f9e:	f7ff fa75 	bl	800748c <quorem>
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	9002      	str	r0, [sp, #8]
 8007fa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007faa:	ee18 0a10 	vmov	r0, s16
 8007fae:	f000 fb85 	bl	80086bc <__mcmp>
 8007fb2:	463a      	mov	r2, r7
 8007fb4:	9003      	str	r0, [sp, #12]
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 fb9b 	bl	80086f4 <__mdiff>
 8007fbe:	68c2      	ldr	r2, [r0, #12]
 8007fc0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	bb02      	cbnz	r2, 800800a <_dtoa_r+0xa62>
 8007fc8:	4601      	mov	r1, r0
 8007fca:	ee18 0a10 	vmov	r0, s16
 8007fce:	f000 fb75 	bl	80086bc <__mcmp>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	9207      	str	r2, [sp, #28]
 8007fda:	f000 f92d 	bl	8008238 <_Bfree>
 8007fde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007fe2:	ea43 0102 	orr.w	r1, r3, r2
 8007fe6:	9b04      	ldr	r3, [sp, #16]
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	464d      	mov	r5, r9
 8007fec:	d10f      	bne.n	800800e <_dtoa_r+0xa66>
 8007fee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ff2:	d02a      	beq.n	800804a <_dtoa_r+0xaa2>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	dd02      	ble.n	8008000 <_dtoa_r+0xa58>
 8007ffa:	9b02      	ldr	r3, [sp, #8]
 8007ffc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008000:	f88b a000 	strb.w	sl, [fp]
 8008004:	e775      	b.n	8007ef2 <_dtoa_r+0x94a>
 8008006:	4638      	mov	r0, r7
 8008008:	e7ba      	b.n	8007f80 <_dtoa_r+0x9d8>
 800800a:	2201      	movs	r2, #1
 800800c:	e7e2      	b.n	8007fd4 <_dtoa_r+0xa2c>
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	db04      	blt.n	800801e <_dtoa_r+0xa76>
 8008014:	9906      	ldr	r1, [sp, #24]
 8008016:	430b      	orrs	r3, r1
 8008018:	9904      	ldr	r1, [sp, #16]
 800801a:	430b      	orrs	r3, r1
 800801c:	d122      	bne.n	8008064 <_dtoa_r+0xabc>
 800801e:	2a00      	cmp	r2, #0
 8008020:	ddee      	ble.n	8008000 <_dtoa_r+0xa58>
 8008022:	ee18 1a10 	vmov	r1, s16
 8008026:	2201      	movs	r2, #1
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fad7 	bl	80085dc <__lshift>
 800802e:	4631      	mov	r1, r6
 8008030:	ee08 0a10 	vmov	s16, r0
 8008034:	f000 fb42 	bl	80086bc <__mcmp>
 8008038:	2800      	cmp	r0, #0
 800803a:	dc03      	bgt.n	8008044 <_dtoa_r+0xa9c>
 800803c:	d1e0      	bne.n	8008000 <_dtoa_r+0xa58>
 800803e:	f01a 0f01 	tst.w	sl, #1
 8008042:	d0dd      	beq.n	8008000 <_dtoa_r+0xa58>
 8008044:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008048:	d1d7      	bne.n	8007ffa <_dtoa_r+0xa52>
 800804a:	2339      	movs	r3, #57	; 0x39
 800804c:	f88b 3000 	strb.w	r3, [fp]
 8008050:	462b      	mov	r3, r5
 8008052:	461d      	mov	r5, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800805a:	2a39      	cmp	r2, #57	; 0x39
 800805c:	d071      	beq.n	8008142 <_dtoa_r+0xb9a>
 800805e:	3201      	adds	r2, #1
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	e746      	b.n	8007ef2 <_dtoa_r+0x94a>
 8008064:	2a00      	cmp	r2, #0
 8008066:	dd07      	ble.n	8008078 <_dtoa_r+0xad0>
 8008068:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800806c:	d0ed      	beq.n	800804a <_dtoa_r+0xaa2>
 800806e:	f10a 0301 	add.w	r3, sl, #1
 8008072:	f88b 3000 	strb.w	r3, [fp]
 8008076:	e73c      	b.n	8007ef2 <_dtoa_r+0x94a>
 8008078:	9b05      	ldr	r3, [sp, #20]
 800807a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800807e:	4599      	cmp	r9, r3
 8008080:	d047      	beq.n	8008112 <_dtoa_r+0xb6a>
 8008082:	ee18 1a10 	vmov	r1, s16
 8008086:	2300      	movs	r3, #0
 8008088:	220a      	movs	r2, #10
 800808a:	4620      	mov	r0, r4
 800808c:	f000 f8f6 	bl	800827c <__multadd>
 8008090:	45b8      	cmp	r8, r7
 8008092:	ee08 0a10 	vmov	s16, r0
 8008096:	f04f 0300 	mov.w	r3, #0
 800809a:	f04f 020a 	mov.w	r2, #10
 800809e:	4641      	mov	r1, r8
 80080a0:	4620      	mov	r0, r4
 80080a2:	d106      	bne.n	80080b2 <_dtoa_r+0xb0a>
 80080a4:	f000 f8ea 	bl	800827c <__multadd>
 80080a8:	4680      	mov	r8, r0
 80080aa:	4607      	mov	r7, r0
 80080ac:	f109 0901 	add.w	r9, r9, #1
 80080b0:	e772      	b.n	8007f98 <_dtoa_r+0x9f0>
 80080b2:	f000 f8e3 	bl	800827c <__multadd>
 80080b6:	4639      	mov	r1, r7
 80080b8:	4680      	mov	r8, r0
 80080ba:	2300      	movs	r3, #0
 80080bc:	220a      	movs	r2, #10
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 f8dc 	bl	800827c <__multadd>
 80080c4:	4607      	mov	r7, r0
 80080c6:	e7f1      	b.n	80080ac <_dtoa_r+0xb04>
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	9302      	str	r3, [sp, #8]
 80080cc:	9d01      	ldr	r5, [sp, #4]
 80080ce:	ee18 0a10 	vmov	r0, s16
 80080d2:	4631      	mov	r1, r6
 80080d4:	f7ff f9da 	bl	800748c <quorem>
 80080d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080dc:	9b01      	ldr	r3, [sp, #4]
 80080de:	f805 ab01 	strb.w	sl, [r5], #1
 80080e2:	1aea      	subs	r2, r5, r3
 80080e4:	9b02      	ldr	r3, [sp, #8]
 80080e6:	4293      	cmp	r3, r2
 80080e8:	dd09      	ble.n	80080fe <_dtoa_r+0xb56>
 80080ea:	ee18 1a10 	vmov	r1, s16
 80080ee:	2300      	movs	r3, #0
 80080f0:	220a      	movs	r2, #10
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 f8c2 	bl	800827c <__multadd>
 80080f8:	ee08 0a10 	vmov	s16, r0
 80080fc:	e7e7      	b.n	80080ce <_dtoa_r+0xb26>
 80080fe:	9b02      	ldr	r3, [sp, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfc8      	it	gt
 8008104:	461d      	movgt	r5, r3
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	bfd8      	it	le
 800810a:	2501      	movle	r5, #1
 800810c:	441d      	add	r5, r3
 800810e:	f04f 0800 	mov.w	r8, #0
 8008112:	ee18 1a10 	vmov	r1, s16
 8008116:	2201      	movs	r2, #1
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fa5f 	bl	80085dc <__lshift>
 800811e:	4631      	mov	r1, r6
 8008120:	ee08 0a10 	vmov	s16, r0
 8008124:	f000 faca 	bl	80086bc <__mcmp>
 8008128:	2800      	cmp	r0, #0
 800812a:	dc91      	bgt.n	8008050 <_dtoa_r+0xaa8>
 800812c:	d102      	bne.n	8008134 <_dtoa_r+0xb8c>
 800812e:	f01a 0f01 	tst.w	sl, #1
 8008132:	d18d      	bne.n	8008050 <_dtoa_r+0xaa8>
 8008134:	462b      	mov	r3, r5
 8008136:	461d      	mov	r5, r3
 8008138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800813c:	2a30      	cmp	r2, #48	; 0x30
 800813e:	d0fa      	beq.n	8008136 <_dtoa_r+0xb8e>
 8008140:	e6d7      	b.n	8007ef2 <_dtoa_r+0x94a>
 8008142:	9a01      	ldr	r2, [sp, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d184      	bne.n	8008052 <_dtoa_r+0xaaa>
 8008148:	9b00      	ldr	r3, [sp, #0]
 800814a:	3301      	adds	r3, #1
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	2331      	movs	r3, #49	; 0x31
 8008150:	7013      	strb	r3, [r2, #0]
 8008152:	e6ce      	b.n	8007ef2 <_dtoa_r+0x94a>
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <_dtoa_r+0xbd4>)
 8008156:	f7ff ba95 	b.w	8007684 <_dtoa_r+0xdc>
 800815a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800815c:	2b00      	cmp	r3, #0
 800815e:	f47f aa6e 	bne.w	800763e <_dtoa_r+0x96>
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <_dtoa_r+0xbd8>)
 8008164:	f7ff ba8e 	b.w	8007684 <_dtoa_r+0xdc>
 8008168:	9b02      	ldr	r3, [sp, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dcae      	bgt.n	80080cc <_dtoa_r+0xb24>
 800816e:	9b06      	ldr	r3, [sp, #24]
 8008170:	2b02      	cmp	r3, #2
 8008172:	f73f aea8 	bgt.w	8007ec6 <_dtoa_r+0x91e>
 8008176:	e7a9      	b.n	80080cc <_dtoa_r+0xb24>
 8008178:	08009a8b 	.word	0x08009a8b
 800817c:	080099e8 	.word	0x080099e8
 8008180:	08009a0c 	.word	0x08009a0c

08008184 <_localeconv_r>:
 8008184:	4800      	ldr	r0, [pc, #0]	; (8008188 <_localeconv_r+0x4>)
 8008186:	4770      	bx	lr
 8008188:	20000160 	.word	0x20000160

0800818c <malloc>:
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <malloc+0xc>)
 800818e:	4601      	mov	r1, r0
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	f000 bc17 	b.w	80089c4 <_malloc_r>
 8008196:	bf00      	nop
 8008198:	2000000c 	.word	0x2000000c

0800819c <memcpy>:
 800819c:	440a      	add	r2, r1
 800819e:	4291      	cmp	r1, r2
 80081a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081a4:	d100      	bne.n	80081a8 <memcpy+0xc>
 80081a6:	4770      	bx	lr
 80081a8:	b510      	push	{r4, lr}
 80081aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081b2:	4291      	cmp	r1, r2
 80081b4:	d1f9      	bne.n	80081aa <memcpy+0xe>
 80081b6:	bd10      	pop	{r4, pc}

080081b8 <_Balloc>:
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081bc:	4604      	mov	r4, r0
 80081be:	460d      	mov	r5, r1
 80081c0:	b976      	cbnz	r6, 80081e0 <_Balloc+0x28>
 80081c2:	2010      	movs	r0, #16
 80081c4:	f7ff ffe2 	bl	800818c <malloc>
 80081c8:	4602      	mov	r2, r0
 80081ca:	6260      	str	r0, [r4, #36]	; 0x24
 80081cc:	b920      	cbnz	r0, 80081d8 <_Balloc+0x20>
 80081ce:	4b18      	ldr	r3, [pc, #96]	; (8008230 <_Balloc+0x78>)
 80081d0:	4818      	ldr	r0, [pc, #96]	; (8008234 <_Balloc+0x7c>)
 80081d2:	2166      	movs	r1, #102	; 0x66
 80081d4:	f000 fdd6 	bl	8008d84 <__assert_func>
 80081d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081dc:	6006      	str	r6, [r0, #0]
 80081de:	60c6      	str	r6, [r0, #12]
 80081e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081e2:	68f3      	ldr	r3, [r6, #12]
 80081e4:	b183      	cbz	r3, 8008208 <_Balloc+0x50>
 80081e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081ee:	b9b8      	cbnz	r0, 8008220 <_Balloc+0x68>
 80081f0:	2101      	movs	r1, #1
 80081f2:	fa01 f605 	lsl.w	r6, r1, r5
 80081f6:	1d72      	adds	r2, r6, #5
 80081f8:	0092      	lsls	r2, r2, #2
 80081fa:	4620      	mov	r0, r4
 80081fc:	f000 fb60 	bl	80088c0 <_calloc_r>
 8008200:	b160      	cbz	r0, 800821c <_Balloc+0x64>
 8008202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008206:	e00e      	b.n	8008226 <_Balloc+0x6e>
 8008208:	2221      	movs	r2, #33	; 0x21
 800820a:	2104      	movs	r1, #4
 800820c:	4620      	mov	r0, r4
 800820e:	f000 fb57 	bl	80088c0 <_calloc_r>
 8008212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008214:	60f0      	str	r0, [r6, #12]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e4      	bne.n	80081e6 <_Balloc+0x2e>
 800821c:	2000      	movs	r0, #0
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	6802      	ldr	r2, [r0, #0]
 8008222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008226:	2300      	movs	r3, #0
 8008228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800822c:	e7f7      	b.n	800821e <_Balloc+0x66>
 800822e:	bf00      	nop
 8008230:	08009a19 	.word	0x08009a19
 8008234:	08009a9c 	.word	0x08009a9c

08008238 <_Bfree>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800823c:	4605      	mov	r5, r0
 800823e:	460c      	mov	r4, r1
 8008240:	b976      	cbnz	r6, 8008260 <_Bfree+0x28>
 8008242:	2010      	movs	r0, #16
 8008244:	f7ff ffa2 	bl	800818c <malloc>
 8008248:	4602      	mov	r2, r0
 800824a:	6268      	str	r0, [r5, #36]	; 0x24
 800824c:	b920      	cbnz	r0, 8008258 <_Bfree+0x20>
 800824e:	4b09      	ldr	r3, [pc, #36]	; (8008274 <_Bfree+0x3c>)
 8008250:	4809      	ldr	r0, [pc, #36]	; (8008278 <_Bfree+0x40>)
 8008252:	218a      	movs	r1, #138	; 0x8a
 8008254:	f000 fd96 	bl	8008d84 <__assert_func>
 8008258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800825c:	6006      	str	r6, [r0, #0]
 800825e:	60c6      	str	r6, [r0, #12]
 8008260:	b13c      	cbz	r4, 8008272 <_Bfree+0x3a>
 8008262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008264:	6862      	ldr	r2, [r4, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800826c:	6021      	str	r1, [r4, #0]
 800826e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	08009a19 	.word	0x08009a19
 8008278:	08009a9c 	.word	0x08009a9c

0800827c <__multadd>:
 800827c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008280:	690d      	ldr	r5, [r1, #16]
 8008282:	4607      	mov	r7, r0
 8008284:	460c      	mov	r4, r1
 8008286:	461e      	mov	r6, r3
 8008288:	f101 0c14 	add.w	ip, r1, #20
 800828c:	2000      	movs	r0, #0
 800828e:	f8dc 3000 	ldr.w	r3, [ip]
 8008292:	b299      	uxth	r1, r3
 8008294:	fb02 6101 	mla	r1, r2, r1, r6
 8008298:	0c1e      	lsrs	r6, r3, #16
 800829a:	0c0b      	lsrs	r3, r1, #16
 800829c:	fb02 3306 	mla	r3, r2, r6, r3
 80082a0:	b289      	uxth	r1, r1
 80082a2:	3001      	adds	r0, #1
 80082a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082a8:	4285      	cmp	r5, r0
 80082aa:	f84c 1b04 	str.w	r1, [ip], #4
 80082ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082b2:	dcec      	bgt.n	800828e <__multadd+0x12>
 80082b4:	b30e      	cbz	r6, 80082fa <__multadd+0x7e>
 80082b6:	68a3      	ldr	r3, [r4, #8]
 80082b8:	42ab      	cmp	r3, r5
 80082ba:	dc19      	bgt.n	80082f0 <__multadd+0x74>
 80082bc:	6861      	ldr	r1, [r4, #4]
 80082be:	4638      	mov	r0, r7
 80082c0:	3101      	adds	r1, #1
 80082c2:	f7ff ff79 	bl	80081b8 <_Balloc>
 80082c6:	4680      	mov	r8, r0
 80082c8:	b928      	cbnz	r0, 80082d6 <__multadd+0x5a>
 80082ca:	4602      	mov	r2, r0
 80082cc:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <__multadd+0x84>)
 80082ce:	480d      	ldr	r0, [pc, #52]	; (8008304 <__multadd+0x88>)
 80082d0:	21b5      	movs	r1, #181	; 0xb5
 80082d2:	f000 fd57 	bl	8008d84 <__assert_func>
 80082d6:	6922      	ldr	r2, [r4, #16]
 80082d8:	3202      	adds	r2, #2
 80082da:	f104 010c 	add.w	r1, r4, #12
 80082de:	0092      	lsls	r2, r2, #2
 80082e0:	300c      	adds	r0, #12
 80082e2:	f7ff ff5b 	bl	800819c <memcpy>
 80082e6:	4621      	mov	r1, r4
 80082e8:	4638      	mov	r0, r7
 80082ea:	f7ff ffa5 	bl	8008238 <_Bfree>
 80082ee:	4644      	mov	r4, r8
 80082f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082f4:	3501      	adds	r5, #1
 80082f6:	615e      	str	r6, [r3, #20]
 80082f8:	6125      	str	r5, [r4, #16]
 80082fa:	4620      	mov	r0, r4
 80082fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008300:	08009a8b 	.word	0x08009a8b
 8008304:	08009a9c 	.word	0x08009a9c

08008308 <__hi0bits>:
 8008308:	0c03      	lsrs	r3, r0, #16
 800830a:	041b      	lsls	r3, r3, #16
 800830c:	b9d3      	cbnz	r3, 8008344 <__hi0bits+0x3c>
 800830e:	0400      	lsls	r0, r0, #16
 8008310:	2310      	movs	r3, #16
 8008312:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008316:	bf04      	itt	eq
 8008318:	0200      	lsleq	r0, r0, #8
 800831a:	3308      	addeq	r3, #8
 800831c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008320:	bf04      	itt	eq
 8008322:	0100      	lsleq	r0, r0, #4
 8008324:	3304      	addeq	r3, #4
 8008326:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800832a:	bf04      	itt	eq
 800832c:	0080      	lsleq	r0, r0, #2
 800832e:	3302      	addeq	r3, #2
 8008330:	2800      	cmp	r0, #0
 8008332:	db05      	blt.n	8008340 <__hi0bits+0x38>
 8008334:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008338:	f103 0301 	add.w	r3, r3, #1
 800833c:	bf08      	it	eq
 800833e:	2320      	moveq	r3, #32
 8008340:	4618      	mov	r0, r3
 8008342:	4770      	bx	lr
 8008344:	2300      	movs	r3, #0
 8008346:	e7e4      	b.n	8008312 <__hi0bits+0xa>

08008348 <__lo0bits>:
 8008348:	6803      	ldr	r3, [r0, #0]
 800834a:	f013 0207 	ands.w	r2, r3, #7
 800834e:	4601      	mov	r1, r0
 8008350:	d00b      	beq.n	800836a <__lo0bits+0x22>
 8008352:	07da      	lsls	r2, r3, #31
 8008354:	d423      	bmi.n	800839e <__lo0bits+0x56>
 8008356:	0798      	lsls	r0, r3, #30
 8008358:	bf49      	itett	mi
 800835a:	085b      	lsrmi	r3, r3, #1
 800835c:	089b      	lsrpl	r3, r3, #2
 800835e:	2001      	movmi	r0, #1
 8008360:	600b      	strmi	r3, [r1, #0]
 8008362:	bf5c      	itt	pl
 8008364:	600b      	strpl	r3, [r1, #0]
 8008366:	2002      	movpl	r0, #2
 8008368:	4770      	bx	lr
 800836a:	b298      	uxth	r0, r3
 800836c:	b9a8      	cbnz	r0, 800839a <__lo0bits+0x52>
 800836e:	0c1b      	lsrs	r3, r3, #16
 8008370:	2010      	movs	r0, #16
 8008372:	b2da      	uxtb	r2, r3
 8008374:	b90a      	cbnz	r2, 800837a <__lo0bits+0x32>
 8008376:	3008      	adds	r0, #8
 8008378:	0a1b      	lsrs	r3, r3, #8
 800837a:	071a      	lsls	r2, r3, #28
 800837c:	bf04      	itt	eq
 800837e:	091b      	lsreq	r3, r3, #4
 8008380:	3004      	addeq	r0, #4
 8008382:	079a      	lsls	r2, r3, #30
 8008384:	bf04      	itt	eq
 8008386:	089b      	lsreq	r3, r3, #2
 8008388:	3002      	addeq	r0, #2
 800838a:	07da      	lsls	r2, r3, #31
 800838c:	d403      	bmi.n	8008396 <__lo0bits+0x4e>
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	f100 0001 	add.w	r0, r0, #1
 8008394:	d005      	beq.n	80083a2 <__lo0bits+0x5a>
 8008396:	600b      	str	r3, [r1, #0]
 8008398:	4770      	bx	lr
 800839a:	4610      	mov	r0, r2
 800839c:	e7e9      	b.n	8008372 <__lo0bits+0x2a>
 800839e:	2000      	movs	r0, #0
 80083a0:	4770      	bx	lr
 80083a2:	2020      	movs	r0, #32
 80083a4:	4770      	bx	lr
	...

080083a8 <__i2b>:
 80083a8:	b510      	push	{r4, lr}
 80083aa:	460c      	mov	r4, r1
 80083ac:	2101      	movs	r1, #1
 80083ae:	f7ff ff03 	bl	80081b8 <_Balloc>
 80083b2:	4602      	mov	r2, r0
 80083b4:	b928      	cbnz	r0, 80083c2 <__i2b+0x1a>
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <__i2b+0x24>)
 80083b8:	4805      	ldr	r0, [pc, #20]	; (80083d0 <__i2b+0x28>)
 80083ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083be:	f000 fce1 	bl	8008d84 <__assert_func>
 80083c2:	2301      	movs	r3, #1
 80083c4:	6144      	str	r4, [r0, #20]
 80083c6:	6103      	str	r3, [r0, #16]
 80083c8:	bd10      	pop	{r4, pc}
 80083ca:	bf00      	nop
 80083cc:	08009a8b 	.word	0x08009a8b
 80083d0:	08009a9c 	.word	0x08009a9c

080083d4 <__multiply>:
 80083d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d8:	4691      	mov	r9, r2
 80083da:	690a      	ldr	r2, [r1, #16]
 80083dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	bfb8      	it	lt
 80083e4:	460b      	movlt	r3, r1
 80083e6:	460c      	mov	r4, r1
 80083e8:	bfbc      	itt	lt
 80083ea:	464c      	movlt	r4, r9
 80083ec:	4699      	movlt	r9, r3
 80083ee:	6927      	ldr	r7, [r4, #16]
 80083f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083f4:	68a3      	ldr	r3, [r4, #8]
 80083f6:	6861      	ldr	r1, [r4, #4]
 80083f8:	eb07 060a 	add.w	r6, r7, sl
 80083fc:	42b3      	cmp	r3, r6
 80083fe:	b085      	sub	sp, #20
 8008400:	bfb8      	it	lt
 8008402:	3101      	addlt	r1, #1
 8008404:	f7ff fed8 	bl	80081b8 <_Balloc>
 8008408:	b930      	cbnz	r0, 8008418 <__multiply+0x44>
 800840a:	4602      	mov	r2, r0
 800840c:	4b44      	ldr	r3, [pc, #272]	; (8008520 <__multiply+0x14c>)
 800840e:	4845      	ldr	r0, [pc, #276]	; (8008524 <__multiply+0x150>)
 8008410:	f240 115d 	movw	r1, #349	; 0x15d
 8008414:	f000 fcb6 	bl	8008d84 <__assert_func>
 8008418:	f100 0514 	add.w	r5, r0, #20
 800841c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008420:	462b      	mov	r3, r5
 8008422:	2200      	movs	r2, #0
 8008424:	4543      	cmp	r3, r8
 8008426:	d321      	bcc.n	800846c <__multiply+0x98>
 8008428:	f104 0314 	add.w	r3, r4, #20
 800842c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008430:	f109 0314 	add.w	r3, r9, #20
 8008434:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008438:	9202      	str	r2, [sp, #8]
 800843a:	1b3a      	subs	r2, r7, r4
 800843c:	3a15      	subs	r2, #21
 800843e:	f022 0203 	bic.w	r2, r2, #3
 8008442:	3204      	adds	r2, #4
 8008444:	f104 0115 	add.w	r1, r4, #21
 8008448:	428f      	cmp	r7, r1
 800844a:	bf38      	it	cc
 800844c:	2204      	movcc	r2, #4
 800844e:	9201      	str	r2, [sp, #4]
 8008450:	9a02      	ldr	r2, [sp, #8]
 8008452:	9303      	str	r3, [sp, #12]
 8008454:	429a      	cmp	r2, r3
 8008456:	d80c      	bhi.n	8008472 <__multiply+0x9e>
 8008458:	2e00      	cmp	r6, #0
 800845a:	dd03      	ble.n	8008464 <__multiply+0x90>
 800845c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008460:	2b00      	cmp	r3, #0
 8008462:	d05a      	beq.n	800851a <__multiply+0x146>
 8008464:	6106      	str	r6, [r0, #16]
 8008466:	b005      	add	sp, #20
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	f843 2b04 	str.w	r2, [r3], #4
 8008470:	e7d8      	b.n	8008424 <__multiply+0x50>
 8008472:	f8b3 a000 	ldrh.w	sl, [r3]
 8008476:	f1ba 0f00 	cmp.w	sl, #0
 800847a:	d024      	beq.n	80084c6 <__multiply+0xf2>
 800847c:	f104 0e14 	add.w	lr, r4, #20
 8008480:	46a9      	mov	r9, r5
 8008482:	f04f 0c00 	mov.w	ip, #0
 8008486:	f85e 2b04 	ldr.w	r2, [lr], #4
 800848a:	f8d9 1000 	ldr.w	r1, [r9]
 800848e:	fa1f fb82 	uxth.w	fp, r2
 8008492:	b289      	uxth	r1, r1
 8008494:	fb0a 110b 	mla	r1, sl, fp, r1
 8008498:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800849c:	f8d9 2000 	ldr.w	r2, [r9]
 80084a0:	4461      	add	r1, ip
 80084a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80084aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084ae:	b289      	uxth	r1, r1
 80084b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80084b4:	4577      	cmp	r7, lr
 80084b6:	f849 1b04 	str.w	r1, [r9], #4
 80084ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80084be:	d8e2      	bhi.n	8008486 <__multiply+0xb2>
 80084c0:	9a01      	ldr	r2, [sp, #4]
 80084c2:	f845 c002 	str.w	ip, [r5, r2]
 80084c6:	9a03      	ldr	r2, [sp, #12]
 80084c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084cc:	3304      	adds	r3, #4
 80084ce:	f1b9 0f00 	cmp.w	r9, #0
 80084d2:	d020      	beq.n	8008516 <__multiply+0x142>
 80084d4:	6829      	ldr	r1, [r5, #0]
 80084d6:	f104 0c14 	add.w	ip, r4, #20
 80084da:	46ae      	mov	lr, r5
 80084dc:	f04f 0a00 	mov.w	sl, #0
 80084e0:	f8bc b000 	ldrh.w	fp, [ip]
 80084e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084e8:	fb09 220b 	mla	r2, r9, fp, r2
 80084ec:	4492      	add	sl, r2
 80084ee:	b289      	uxth	r1, r1
 80084f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084f4:	f84e 1b04 	str.w	r1, [lr], #4
 80084f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084fc:	f8be 1000 	ldrh.w	r1, [lr]
 8008500:	0c12      	lsrs	r2, r2, #16
 8008502:	fb09 1102 	mla	r1, r9, r2, r1
 8008506:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800850a:	4567      	cmp	r7, ip
 800850c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008510:	d8e6      	bhi.n	80084e0 <__multiply+0x10c>
 8008512:	9a01      	ldr	r2, [sp, #4]
 8008514:	50a9      	str	r1, [r5, r2]
 8008516:	3504      	adds	r5, #4
 8008518:	e79a      	b.n	8008450 <__multiply+0x7c>
 800851a:	3e01      	subs	r6, #1
 800851c:	e79c      	b.n	8008458 <__multiply+0x84>
 800851e:	bf00      	nop
 8008520:	08009a8b 	.word	0x08009a8b
 8008524:	08009a9c 	.word	0x08009a9c

08008528 <__pow5mult>:
 8008528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800852c:	4615      	mov	r5, r2
 800852e:	f012 0203 	ands.w	r2, r2, #3
 8008532:	4606      	mov	r6, r0
 8008534:	460f      	mov	r7, r1
 8008536:	d007      	beq.n	8008548 <__pow5mult+0x20>
 8008538:	4c25      	ldr	r4, [pc, #148]	; (80085d0 <__pow5mult+0xa8>)
 800853a:	3a01      	subs	r2, #1
 800853c:	2300      	movs	r3, #0
 800853e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008542:	f7ff fe9b 	bl	800827c <__multadd>
 8008546:	4607      	mov	r7, r0
 8008548:	10ad      	asrs	r5, r5, #2
 800854a:	d03d      	beq.n	80085c8 <__pow5mult+0xa0>
 800854c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800854e:	b97c      	cbnz	r4, 8008570 <__pow5mult+0x48>
 8008550:	2010      	movs	r0, #16
 8008552:	f7ff fe1b 	bl	800818c <malloc>
 8008556:	4602      	mov	r2, r0
 8008558:	6270      	str	r0, [r6, #36]	; 0x24
 800855a:	b928      	cbnz	r0, 8008568 <__pow5mult+0x40>
 800855c:	4b1d      	ldr	r3, [pc, #116]	; (80085d4 <__pow5mult+0xac>)
 800855e:	481e      	ldr	r0, [pc, #120]	; (80085d8 <__pow5mult+0xb0>)
 8008560:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008564:	f000 fc0e 	bl	8008d84 <__assert_func>
 8008568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800856c:	6004      	str	r4, [r0, #0]
 800856e:	60c4      	str	r4, [r0, #12]
 8008570:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008578:	b94c      	cbnz	r4, 800858e <__pow5mult+0x66>
 800857a:	f240 2171 	movw	r1, #625	; 0x271
 800857e:	4630      	mov	r0, r6
 8008580:	f7ff ff12 	bl	80083a8 <__i2b>
 8008584:	2300      	movs	r3, #0
 8008586:	f8c8 0008 	str.w	r0, [r8, #8]
 800858a:	4604      	mov	r4, r0
 800858c:	6003      	str	r3, [r0, #0]
 800858e:	f04f 0900 	mov.w	r9, #0
 8008592:	07eb      	lsls	r3, r5, #31
 8008594:	d50a      	bpl.n	80085ac <__pow5mult+0x84>
 8008596:	4639      	mov	r1, r7
 8008598:	4622      	mov	r2, r4
 800859a:	4630      	mov	r0, r6
 800859c:	f7ff ff1a 	bl	80083d4 <__multiply>
 80085a0:	4639      	mov	r1, r7
 80085a2:	4680      	mov	r8, r0
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7ff fe47 	bl	8008238 <_Bfree>
 80085aa:	4647      	mov	r7, r8
 80085ac:	106d      	asrs	r5, r5, #1
 80085ae:	d00b      	beq.n	80085c8 <__pow5mult+0xa0>
 80085b0:	6820      	ldr	r0, [r4, #0]
 80085b2:	b938      	cbnz	r0, 80085c4 <__pow5mult+0x9c>
 80085b4:	4622      	mov	r2, r4
 80085b6:	4621      	mov	r1, r4
 80085b8:	4630      	mov	r0, r6
 80085ba:	f7ff ff0b 	bl	80083d4 <__multiply>
 80085be:	6020      	str	r0, [r4, #0]
 80085c0:	f8c0 9000 	str.w	r9, [r0]
 80085c4:	4604      	mov	r4, r0
 80085c6:	e7e4      	b.n	8008592 <__pow5mult+0x6a>
 80085c8:	4638      	mov	r0, r7
 80085ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ce:	bf00      	nop
 80085d0:	08009be8 	.word	0x08009be8
 80085d4:	08009a19 	.word	0x08009a19
 80085d8:	08009a9c 	.word	0x08009a9c

080085dc <__lshift>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	460c      	mov	r4, r1
 80085e2:	6849      	ldr	r1, [r1, #4]
 80085e4:	6923      	ldr	r3, [r4, #16]
 80085e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085ea:	68a3      	ldr	r3, [r4, #8]
 80085ec:	4607      	mov	r7, r0
 80085ee:	4691      	mov	r9, r2
 80085f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085f4:	f108 0601 	add.w	r6, r8, #1
 80085f8:	42b3      	cmp	r3, r6
 80085fa:	db0b      	blt.n	8008614 <__lshift+0x38>
 80085fc:	4638      	mov	r0, r7
 80085fe:	f7ff fddb 	bl	80081b8 <_Balloc>
 8008602:	4605      	mov	r5, r0
 8008604:	b948      	cbnz	r0, 800861a <__lshift+0x3e>
 8008606:	4602      	mov	r2, r0
 8008608:	4b2a      	ldr	r3, [pc, #168]	; (80086b4 <__lshift+0xd8>)
 800860a:	482b      	ldr	r0, [pc, #172]	; (80086b8 <__lshift+0xdc>)
 800860c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008610:	f000 fbb8 	bl	8008d84 <__assert_func>
 8008614:	3101      	adds	r1, #1
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	e7ee      	b.n	80085f8 <__lshift+0x1c>
 800861a:	2300      	movs	r3, #0
 800861c:	f100 0114 	add.w	r1, r0, #20
 8008620:	f100 0210 	add.w	r2, r0, #16
 8008624:	4618      	mov	r0, r3
 8008626:	4553      	cmp	r3, sl
 8008628:	db37      	blt.n	800869a <__lshift+0xbe>
 800862a:	6920      	ldr	r0, [r4, #16]
 800862c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008630:	f104 0314 	add.w	r3, r4, #20
 8008634:	f019 091f 	ands.w	r9, r9, #31
 8008638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800863c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008640:	d02f      	beq.n	80086a2 <__lshift+0xc6>
 8008642:	f1c9 0e20 	rsb	lr, r9, #32
 8008646:	468a      	mov	sl, r1
 8008648:	f04f 0c00 	mov.w	ip, #0
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	fa02 f209 	lsl.w	r2, r2, r9
 8008652:	ea42 020c 	orr.w	r2, r2, ip
 8008656:	f84a 2b04 	str.w	r2, [sl], #4
 800865a:	f853 2b04 	ldr.w	r2, [r3], #4
 800865e:	4298      	cmp	r0, r3
 8008660:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008664:	d8f2      	bhi.n	800864c <__lshift+0x70>
 8008666:	1b03      	subs	r3, r0, r4
 8008668:	3b15      	subs	r3, #21
 800866a:	f023 0303 	bic.w	r3, r3, #3
 800866e:	3304      	adds	r3, #4
 8008670:	f104 0215 	add.w	r2, r4, #21
 8008674:	4290      	cmp	r0, r2
 8008676:	bf38      	it	cc
 8008678:	2304      	movcc	r3, #4
 800867a:	f841 c003 	str.w	ip, [r1, r3]
 800867e:	f1bc 0f00 	cmp.w	ip, #0
 8008682:	d001      	beq.n	8008688 <__lshift+0xac>
 8008684:	f108 0602 	add.w	r6, r8, #2
 8008688:	3e01      	subs	r6, #1
 800868a:	4638      	mov	r0, r7
 800868c:	612e      	str	r6, [r5, #16]
 800868e:	4621      	mov	r1, r4
 8008690:	f7ff fdd2 	bl	8008238 <_Bfree>
 8008694:	4628      	mov	r0, r5
 8008696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869a:	f842 0f04 	str.w	r0, [r2, #4]!
 800869e:	3301      	adds	r3, #1
 80086a0:	e7c1      	b.n	8008626 <__lshift+0x4a>
 80086a2:	3904      	subs	r1, #4
 80086a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80086ac:	4298      	cmp	r0, r3
 80086ae:	d8f9      	bhi.n	80086a4 <__lshift+0xc8>
 80086b0:	e7ea      	b.n	8008688 <__lshift+0xac>
 80086b2:	bf00      	nop
 80086b4:	08009a8b 	.word	0x08009a8b
 80086b8:	08009a9c 	.word	0x08009a9c

080086bc <__mcmp>:
 80086bc:	b530      	push	{r4, r5, lr}
 80086be:	6902      	ldr	r2, [r0, #16]
 80086c0:	690c      	ldr	r4, [r1, #16]
 80086c2:	1b12      	subs	r2, r2, r4
 80086c4:	d10e      	bne.n	80086e4 <__mcmp+0x28>
 80086c6:	f100 0314 	add.w	r3, r0, #20
 80086ca:	3114      	adds	r1, #20
 80086cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80086d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80086d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80086d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80086dc:	42a5      	cmp	r5, r4
 80086de:	d003      	beq.n	80086e8 <__mcmp+0x2c>
 80086e0:	d305      	bcc.n	80086ee <__mcmp+0x32>
 80086e2:	2201      	movs	r2, #1
 80086e4:	4610      	mov	r0, r2
 80086e6:	bd30      	pop	{r4, r5, pc}
 80086e8:	4283      	cmp	r3, r0
 80086ea:	d3f3      	bcc.n	80086d4 <__mcmp+0x18>
 80086ec:	e7fa      	b.n	80086e4 <__mcmp+0x28>
 80086ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086f2:	e7f7      	b.n	80086e4 <__mcmp+0x28>

080086f4 <__mdiff>:
 80086f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	460c      	mov	r4, r1
 80086fa:	4606      	mov	r6, r0
 80086fc:	4611      	mov	r1, r2
 80086fe:	4620      	mov	r0, r4
 8008700:	4690      	mov	r8, r2
 8008702:	f7ff ffdb 	bl	80086bc <__mcmp>
 8008706:	1e05      	subs	r5, r0, #0
 8008708:	d110      	bne.n	800872c <__mdiff+0x38>
 800870a:	4629      	mov	r1, r5
 800870c:	4630      	mov	r0, r6
 800870e:	f7ff fd53 	bl	80081b8 <_Balloc>
 8008712:	b930      	cbnz	r0, 8008722 <__mdiff+0x2e>
 8008714:	4b3a      	ldr	r3, [pc, #232]	; (8008800 <__mdiff+0x10c>)
 8008716:	4602      	mov	r2, r0
 8008718:	f240 2132 	movw	r1, #562	; 0x232
 800871c:	4839      	ldr	r0, [pc, #228]	; (8008804 <__mdiff+0x110>)
 800871e:	f000 fb31 	bl	8008d84 <__assert_func>
 8008722:	2301      	movs	r3, #1
 8008724:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	bfa4      	itt	ge
 800872e:	4643      	movge	r3, r8
 8008730:	46a0      	movge	r8, r4
 8008732:	4630      	mov	r0, r6
 8008734:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008738:	bfa6      	itte	ge
 800873a:	461c      	movge	r4, r3
 800873c:	2500      	movge	r5, #0
 800873e:	2501      	movlt	r5, #1
 8008740:	f7ff fd3a 	bl	80081b8 <_Balloc>
 8008744:	b920      	cbnz	r0, 8008750 <__mdiff+0x5c>
 8008746:	4b2e      	ldr	r3, [pc, #184]	; (8008800 <__mdiff+0x10c>)
 8008748:	4602      	mov	r2, r0
 800874a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800874e:	e7e5      	b.n	800871c <__mdiff+0x28>
 8008750:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008754:	6926      	ldr	r6, [r4, #16]
 8008756:	60c5      	str	r5, [r0, #12]
 8008758:	f104 0914 	add.w	r9, r4, #20
 800875c:	f108 0514 	add.w	r5, r8, #20
 8008760:	f100 0e14 	add.w	lr, r0, #20
 8008764:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008768:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800876c:	f108 0210 	add.w	r2, r8, #16
 8008770:	46f2      	mov	sl, lr
 8008772:	2100      	movs	r1, #0
 8008774:	f859 3b04 	ldr.w	r3, [r9], #4
 8008778:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800877c:	fa1f f883 	uxth.w	r8, r3
 8008780:	fa11 f18b 	uxtah	r1, r1, fp
 8008784:	0c1b      	lsrs	r3, r3, #16
 8008786:	eba1 0808 	sub.w	r8, r1, r8
 800878a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800878e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008792:	fa1f f888 	uxth.w	r8, r8
 8008796:	1419      	asrs	r1, r3, #16
 8008798:	454e      	cmp	r6, r9
 800879a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800879e:	f84a 3b04 	str.w	r3, [sl], #4
 80087a2:	d8e7      	bhi.n	8008774 <__mdiff+0x80>
 80087a4:	1b33      	subs	r3, r6, r4
 80087a6:	3b15      	subs	r3, #21
 80087a8:	f023 0303 	bic.w	r3, r3, #3
 80087ac:	3304      	adds	r3, #4
 80087ae:	3415      	adds	r4, #21
 80087b0:	42a6      	cmp	r6, r4
 80087b2:	bf38      	it	cc
 80087b4:	2304      	movcc	r3, #4
 80087b6:	441d      	add	r5, r3
 80087b8:	4473      	add	r3, lr
 80087ba:	469e      	mov	lr, r3
 80087bc:	462e      	mov	r6, r5
 80087be:	4566      	cmp	r6, ip
 80087c0:	d30e      	bcc.n	80087e0 <__mdiff+0xec>
 80087c2:	f10c 0203 	add.w	r2, ip, #3
 80087c6:	1b52      	subs	r2, r2, r5
 80087c8:	f022 0203 	bic.w	r2, r2, #3
 80087cc:	3d03      	subs	r5, #3
 80087ce:	45ac      	cmp	ip, r5
 80087d0:	bf38      	it	cc
 80087d2:	2200      	movcc	r2, #0
 80087d4:	441a      	add	r2, r3
 80087d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80087da:	b17b      	cbz	r3, 80087fc <__mdiff+0x108>
 80087dc:	6107      	str	r7, [r0, #16]
 80087de:	e7a3      	b.n	8008728 <__mdiff+0x34>
 80087e0:	f856 8b04 	ldr.w	r8, [r6], #4
 80087e4:	fa11 f288 	uxtah	r2, r1, r8
 80087e8:	1414      	asrs	r4, r2, #16
 80087ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087ee:	b292      	uxth	r2, r2
 80087f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087f4:	f84e 2b04 	str.w	r2, [lr], #4
 80087f8:	1421      	asrs	r1, r4, #16
 80087fa:	e7e0      	b.n	80087be <__mdiff+0xca>
 80087fc:	3f01      	subs	r7, #1
 80087fe:	e7ea      	b.n	80087d6 <__mdiff+0xe2>
 8008800:	08009a8b 	.word	0x08009a8b
 8008804:	08009a9c 	.word	0x08009a9c

08008808 <__d2b>:
 8008808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800880c:	4689      	mov	r9, r1
 800880e:	2101      	movs	r1, #1
 8008810:	ec57 6b10 	vmov	r6, r7, d0
 8008814:	4690      	mov	r8, r2
 8008816:	f7ff fccf 	bl	80081b8 <_Balloc>
 800881a:	4604      	mov	r4, r0
 800881c:	b930      	cbnz	r0, 800882c <__d2b+0x24>
 800881e:	4602      	mov	r2, r0
 8008820:	4b25      	ldr	r3, [pc, #148]	; (80088b8 <__d2b+0xb0>)
 8008822:	4826      	ldr	r0, [pc, #152]	; (80088bc <__d2b+0xb4>)
 8008824:	f240 310a 	movw	r1, #778	; 0x30a
 8008828:	f000 faac 	bl	8008d84 <__assert_func>
 800882c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008834:	bb35      	cbnz	r5, 8008884 <__d2b+0x7c>
 8008836:	2e00      	cmp	r6, #0
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	d028      	beq.n	800888e <__d2b+0x86>
 800883c:	4668      	mov	r0, sp
 800883e:	9600      	str	r6, [sp, #0]
 8008840:	f7ff fd82 	bl	8008348 <__lo0bits>
 8008844:	9900      	ldr	r1, [sp, #0]
 8008846:	b300      	cbz	r0, 800888a <__d2b+0x82>
 8008848:	9a01      	ldr	r2, [sp, #4]
 800884a:	f1c0 0320 	rsb	r3, r0, #32
 800884e:	fa02 f303 	lsl.w	r3, r2, r3
 8008852:	430b      	orrs	r3, r1
 8008854:	40c2      	lsrs	r2, r0
 8008856:	6163      	str	r3, [r4, #20]
 8008858:	9201      	str	r2, [sp, #4]
 800885a:	9b01      	ldr	r3, [sp, #4]
 800885c:	61a3      	str	r3, [r4, #24]
 800885e:	2b00      	cmp	r3, #0
 8008860:	bf14      	ite	ne
 8008862:	2202      	movne	r2, #2
 8008864:	2201      	moveq	r2, #1
 8008866:	6122      	str	r2, [r4, #16]
 8008868:	b1d5      	cbz	r5, 80088a0 <__d2b+0x98>
 800886a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800886e:	4405      	add	r5, r0
 8008870:	f8c9 5000 	str.w	r5, [r9]
 8008874:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008878:	f8c8 0000 	str.w	r0, [r8]
 800887c:	4620      	mov	r0, r4
 800887e:	b003      	add	sp, #12
 8008880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008888:	e7d5      	b.n	8008836 <__d2b+0x2e>
 800888a:	6161      	str	r1, [r4, #20]
 800888c:	e7e5      	b.n	800885a <__d2b+0x52>
 800888e:	a801      	add	r0, sp, #4
 8008890:	f7ff fd5a 	bl	8008348 <__lo0bits>
 8008894:	9b01      	ldr	r3, [sp, #4]
 8008896:	6163      	str	r3, [r4, #20]
 8008898:	2201      	movs	r2, #1
 800889a:	6122      	str	r2, [r4, #16]
 800889c:	3020      	adds	r0, #32
 800889e:	e7e3      	b.n	8008868 <__d2b+0x60>
 80088a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088a8:	f8c9 0000 	str.w	r0, [r9]
 80088ac:	6918      	ldr	r0, [r3, #16]
 80088ae:	f7ff fd2b 	bl	8008308 <__hi0bits>
 80088b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088b6:	e7df      	b.n	8008878 <__d2b+0x70>
 80088b8:	08009a8b 	.word	0x08009a8b
 80088bc:	08009a9c 	.word	0x08009a9c

080088c0 <_calloc_r>:
 80088c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088c2:	fba1 2402 	umull	r2, r4, r1, r2
 80088c6:	b94c      	cbnz	r4, 80088dc <_calloc_r+0x1c>
 80088c8:	4611      	mov	r1, r2
 80088ca:	9201      	str	r2, [sp, #4]
 80088cc:	f000 f87a 	bl	80089c4 <_malloc_r>
 80088d0:	9a01      	ldr	r2, [sp, #4]
 80088d2:	4605      	mov	r5, r0
 80088d4:	b930      	cbnz	r0, 80088e4 <_calloc_r+0x24>
 80088d6:	4628      	mov	r0, r5
 80088d8:	b003      	add	sp, #12
 80088da:	bd30      	pop	{r4, r5, pc}
 80088dc:	220c      	movs	r2, #12
 80088de:	6002      	str	r2, [r0, #0]
 80088e0:	2500      	movs	r5, #0
 80088e2:	e7f8      	b.n	80088d6 <_calloc_r+0x16>
 80088e4:	4621      	mov	r1, r4
 80088e6:	f7fe f92b 	bl	8006b40 <memset>
 80088ea:	e7f4      	b.n	80088d6 <_calloc_r+0x16>

080088ec <_free_r>:
 80088ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ee:	2900      	cmp	r1, #0
 80088f0:	d044      	beq.n	800897c <_free_r+0x90>
 80088f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f6:	9001      	str	r0, [sp, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f1a1 0404 	sub.w	r4, r1, #4
 80088fe:	bfb8      	it	lt
 8008900:	18e4      	addlt	r4, r4, r3
 8008902:	f000 fa9b 	bl	8008e3c <__malloc_lock>
 8008906:	4a1e      	ldr	r2, [pc, #120]	; (8008980 <_free_r+0x94>)
 8008908:	9801      	ldr	r0, [sp, #4]
 800890a:	6813      	ldr	r3, [r2, #0]
 800890c:	b933      	cbnz	r3, 800891c <_free_r+0x30>
 800890e:	6063      	str	r3, [r4, #4]
 8008910:	6014      	str	r4, [r2, #0]
 8008912:	b003      	add	sp, #12
 8008914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008918:	f000 ba96 	b.w	8008e48 <__malloc_unlock>
 800891c:	42a3      	cmp	r3, r4
 800891e:	d908      	bls.n	8008932 <_free_r+0x46>
 8008920:	6825      	ldr	r5, [r4, #0]
 8008922:	1961      	adds	r1, r4, r5
 8008924:	428b      	cmp	r3, r1
 8008926:	bf01      	itttt	eq
 8008928:	6819      	ldreq	r1, [r3, #0]
 800892a:	685b      	ldreq	r3, [r3, #4]
 800892c:	1949      	addeq	r1, r1, r5
 800892e:	6021      	streq	r1, [r4, #0]
 8008930:	e7ed      	b.n	800890e <_free_r+0x22>
 8008932:	461a      	mov	r2, r3
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	b10b      	cbz	r3, 800893c <_free_r+0x50>
 8008938:	42a3      	cmp	r3, r4
 800893a:	d9fa      	bls.n	8008932 <_free_r+0x46>
 800893c:	6811      	ldr	r1, [r2, #0]
 800893e:	1855      	adds	r5, r2, r1
 8008940:	42a5      	cmp	r5, r4
 8008942:	d10b      	bne.n	800895c <_free_r+0x70>
 8008944:	6824      	ldr	r4, [r4, #0]
 8008946:	4421      	add	r1, r4
 8008948:	1854      	adds	r4, r2, r1
 800894a:	42a3      	cmp	r3, r4
 800894c:	6011      	str	r1, [r2, #0]
 800894e:	d1e0      	bne.n	8008912 <_free_r+0x26>
 8008950:	681c      	ldr	r4, [r3, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	6053      	str	r3, [r2, #4]
 8008956:	4421      	add	r1, r4
 8008958:	6011      	str	r1, [r2, #0]
 800895a:	e7da      	b.n	8008912 <_free_r+0x26>
 800895c:	d902      	bls.n	8008964 <_free_r+0x78>
 800895e:	230c      	movs	r3, #12
 8008960:	6003      	str	r3, [r0, #0]
 8008962:	e7d6      	b.n	8008912 <_free_r+0x26>
 8008964:	6825      	ldr	r5, [r4, #0]
 8008966:	1961      	adds	r1, r4, r5
 8008968:	428b      	cmp	r3, r1
 800896a:	bf04      	itt	eq
 800896c:	6819      	ldreq	r1, [r3, #0]
 800896e:	685b      	ldreq	r3, [r3, #4]
 8008970:	6063      	str	r3, [r4, #4]
 8008972:	bf04      	itt	eq
 8008974:	1949      	addeq	r1, r1, r5
 8008976:	6021      	streq	r1, [r4, #0]
 8008978:	6054      	str	r4, [r2, #4]
 800897a:	e7ca      	b.n	8008912 <_free_r+0x26>
 800897c:	b003      	add	sp, #12
 800897e:	bd30      	pop	{r4, r5, pc}
 8008980:	2000053c 	.word	0x2000053c

08008984 <sbrk_aligned>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4e0e      	ldr	r6, [pc, #56]	; (80089c0 <sbrk_aligned+0x3c>)
 8008988:	460c      	mov	r4, r1
 800898a:	6831      	ldr	r1, [r6, #0]
 800898c:	4605      	mov	r5, r0
 800898e:	b911      	cbnz	r1, 8008996 <sbrk_aligned+0x12>
 8008990:	f000 f9e8 	bl	8008d64 <_sbrk_r>
 8008994:	6030      	str	r0, [r6, #0]
 8008996:	4621      	mov	r1, r4
 8008998:	4628      	mov	r0, r5
 800899a:	f000 f9e3 	bl	8008d64 <_sbrk_r>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d00a      	beq.n	80089b8 <sbrk_aligned+0x34>
 80089a2:	1cc4      	adds	r4, r0, #3
 80089a4:	f024 0403 	bic.w	r4, r4, #3
 80089a8:	42a0      	cmp	r0, r4
 80089aa:	d007      	beq.n	80089bc <sbrk_aligned+0x38>
 80089ac:	1a21      	subs	r1, r4, r0
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 f9d8 	bl	8008d64 <_sbrk_r>
 80089b4:	3001      	adds	r0, #1
 80089b6:	d101      	bne.n	80089bc <sbrk_aligned+0x38>
 80089b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089bc:	4620      	mov	r0, r4
 80089be:	bd70      	pop	{r4, r5, r6, pc}
 80089c0:	20000540 	.word	0x20000540

080089c4 <_malloc_r>:
 80089c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c8:	1ccd      	adds	r5, r1, #3
 80089ca:	f025 0503 	bic.w	r5, r5, #3
 80089ce:	3508      	adds	r5, #8
 80089d0:	2d0c      	cmp	r5, #12
 80089d2:	bf38      	it	cc
 80089d4:	250c      	movcc	r5, #12
 80089d6:	2d00      	cmp	r5, #0
 80089d8:	4607      	mov	r7, r0
 80089da:	db01      	blt.n	80089e0 <_malloc_r+0x1c>
 80089dc:	42a9      	cmp	r1, r5
 80089de:	d905      	bls.n	80089ec <_malloc_r+0x28>
 80089e0:	230c      	movs	r3, #12
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	2600      	movs	r6, #0
 80089e6:	4630      	mov	r0, r6
 80089e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ec:	4e2e      	ldr	r6, [pc, #184]	; (8008aa8 <_malloc_r+0xe4>)
 80089ee:	f000 fa25 	bl	8008e3c <__malloc_lock>
 80089f2:	6833      	ldr	r3, [r6, #0]
 80089f4:	461c      	mov	r4, r3
 80089f6:	bb34      	cbnz	r4, 8008a46 <_malloc_r+0x82>
 80089f8:	4629      	mov	r1, r5
 80089fa:	4638      	mov	r0, r7
 80089fc:	f7ff ffc2 	bl	8008984 <sbrk_aligned>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	4604      	mov	r4, r0
 8008a04:	d14d      	bne.n	8008aa2 <_malloc_r+0xde>
 8008a06:	6834      	ldr	r4, [r6, #0]
 8008a08:	4626      	mov	r6, r4
 8008a0a:	2e00      	cmp	r6, #0
 8008a0c:	d140      	bne.n	8008a90 <_malloc_r+0xcc>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	4631      	mov	r1, r6
 8008a12:	4638      	mov	r0, r7
 8008a14:	eb04 0803 	add.w	r8, r4, r3
 8008a18:	f000 f9a4 	bl	8008d64 <_sbrk_r>
 8008a1c:	4580      	cmp	r8, r0
 8008a1e:	d13a      	bne.n	8008a96 <_malloc_r+0xd2>
 8008a20:	6821      	ldr	r1, [r4, #0]
 8008a22:	3503      	adds	r5, #3
 8008a24:	1a6d      	subs	r5, r5, r1
 8008a26:	f025 0503 	bic.w	r5, r5, #3
 8008a2a:	3508      	adds	r5, #8
 8008a2c:	2d0c      	cmp	r5, #12
 8008a2e:	bf38      	it	cc
 8008a30:	250c      	movcc	r5, #12
 8008a32:	4629      	mov	r1, r5
 8008a34:	4638      	mov	r0, r7
 8008a36:	f7ff ffa5 	bl	8008984 <sbrk_aligned>
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	d02b      	beq.n	8008a96 <_malloc_r+0xd2>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	442b      	add	r3, r5
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	e00e      	b.n	8008a64 <_malloc_r+0xa0>
 8008a46:	6822      	ldr	r2, [r4, #0]
 8008a48:	1b52      	subs	r2, r2, r5
 8008a4a:	d41e      	bmi.n	8008a8a <_malloc_r+0xc6>
 8008a4c:	2a0b      	cmp	r2, #11
 8008a4e:	d916      	bls.n	8008a7e <_malloc_r+0xba>
 8008a50:	1961      	adds	r1, r4, r5
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	6025      	str	r5, [r4, #0]
 8008a56:	bf18      	it	ne
 8008a58:	6059      	strne	r1, [r3, #4]
 8008a5a:	6863      	ldr	r3, [r4, #4]
 8008a5c:	bf08      	it	eq
 8008a5e:	6031      	streq	r1, [r6, #0]
 8008a60:	5162      	str	r2, [r4, r5]
 8008a62:	604b      	str	r3, [r1, #4]
 8008a64:	4638      	mov	r0, r7
 8008a66:	f104 060b 	add.w	r6, r4, #11
 8008a6a:	f000 f9ed 	bl	8008e48 <__malloc_unlock>
 8008a6e:	f026 0607 	bic.w	r6, r6, #7
 8008a72:	1d23      	adds	r3, r4, #4
 8008a74:	1af2      	subs	r2, r6, r3
 8008a76:	d0b6      	beq.n	80089e6 <_malloc_r+0x22>
 8008a78:	1b9b      	subs	r3, r3, r6
 8008a7a:	50a3      	str	r3, [r4, r2]
 8008a7c:	e7b3      	b.n	80089e6 <_malloc_r+0x22>
 8008a7e:	6862      	ldr	r2, [r4, #4]
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	bf0c      	ite	eq
 8008a84:	6032      	streq	r2, [r6, #0]
 8008a86:	605a      	strne	r2, [r3, #4]
 8008a88:	e7ec      	b.n	8008a64 <_malloc_r+0xa0>
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	6864      	ldr	r4, [r4, #4]
 8008a8e:	e7b2      	b.n	80089f6 <_malloc_r+0x32>
 8008a90:	4634      	mov	r4, r6
 8008a92:	6876      	ldr	r6, [r6, #4]
 8008a94:	e7b9      	b.n	8008a0a <_malloc_r+0x46>
 8008a96:	230c      	movs	r3, #12
 8008a98:	603b      	str	r3, [r7, #0]
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	f000 f9d4 	bl	8008e48 <__malloc_unlock>
 8008aa0:	e7a1      	b.n	80089e6 <_malloc_r+0x22>
 8008aa2:	6025      	str	r5, [r4, #0]
 8008aa4:	e7de      	b.n	8008a64 <_malloc_r+0xa0>
 8008aa6:	bf00      	nop
 8008aa8:	2000053c 	.word	0x2000053c

08008aac <__ssputs_r>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	688e      	ldr	r6, [r1, #8]
 8008ab2:	429e      	cmp	r6, r3
 8008ab4:	4682      	mov	sl, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	4690      	mov	r8, r2
 8008aba:	461f      	mov	r7, r3
 8008abc:	d838      	bhi.n	8008b30 <__ssputs_r+0x84>
 8008abe:	898a      	ldrh	r2, [r1, #12]
 8008ac0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ac4:	d032      	beq.n	8008b2c <__ssputs_r+0x80>
 8008ac6:	6825      	ldr	r5, [r4, #0]
 8008ac8:	6909      	ldr	r1, [r1, #16]
 8008aca:	eba5 0901 	sub.w	r9, r5, r1
 8008ace:	6965      	ldr	r5, [r4, #20]
 8008ad0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ad8:	3301      	adds	r3, #1
 8008ada:	444b      	add	r3, r9
 8008adc:	106d      	asrs	r5, r5, #1
 8008ade:	429d      	cmp	r5, r3
 8008ae0:	bf38      	it	cc
 8008ae2:	461d      	movcc	r5, r3
 8008ae4:	0553      	lsls	r3, r2, #21
 8008ae6:	d531      	bpl.n	8008b4c <__ssputs_r+0xa0>
 8008ae8:	4629      	mov	r1, r5
 8008aea:	f7ff ff6b 	bl	80089c4 <_malloc_r>
 8008aee:	4606      	mov	r6, r0
 8008af0:	b950      	cbnz	r0, 8008b08 <__ssputs_r+0x5c>
 8008af2:	230c      	movs	r3, #12
 8008af4:	f8ca 3000 	str.w	r3, [sl]
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b08:	6921      	ldr	r1, [r4, #16]
 8008b0a:	464a      	mov	r2, r9
 8008b0c:	f7ff fb46 	bl	800819c <memcpy>
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	6126      	str	r6, [r4, #16]
 8008b1e:	6165      	str	r5, [r4, #20]
 8008b20:	444e      	add	r6, r9
 8008b22:	eba5 0509 	sub.w	r5, r5, r9
 8008b26:	6026      	str	r6, [r4, #0]
 8008b28:	60a5      	str	r5, [r4, #8]
 8008b2a:	463e      	mov	r6, r7
 8008b2c:	42be      	cmp	r6, r7
 8008b2e:	d900      	bls.n	8008b32 <__ssputs_r+0x86>
 8008b30:	463e      	mov	r6, r7
 8008b32:	6820      	ldr	r0, [r4, #0]
 8008b34:	4632      	mov	r2, r6
 8008b36:	4641      	mov	r1, r8
 8008b38:	f000 f966 	bl	8008e08 <memmove>
 8008b3c:	68a3      	ldr	r3, [r4, #8]
 8008b3e:	1b9b      	subs	r3, r3, r6
 8008b40:	60a3      	str	r3, [r4, #8]
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	4433      	add	r3, r6
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	2000      	movs	r0, #0
 8008b4a:	e7db      	b.n	8008b04 <__ssputs_r+0x58>
 8008b4c:	462a      	mov	r2, r5
 8008b4e:	f000 f981 	bl	8008e54 <_realloc_r>
 8008b52:	4606      	mov	r6, r0
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d1e1      	bne.n	8008b1c <__ssputs_r+0x70>
 8008b58:	6921      	ldr	r1, [r4, #16]
 8008b5a:	4650      	mov	r0, sl
 8008b5c:	f7ff fec6 	bl	80088ec <_free_r>
 8008b60:	e7c7      	b.n	8008af2 <__ssputs_r+0x46>
	...

08008b64 <_svfiprintf_r>:
 8008b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b68:	4698      	mov	r8, r3
 8008b6a:	898b      	ldrh	r3, [r1, #12]
 8008b6c:	061b      	lsls	r3, r3, #24
 8008b6e:	b09d      	sub	sp, #116	; 0x74
 8008b70:	4607      	mov	r7, r0
 8008b72:	460d      	mov	r5, r1
 8008b74:	4614      	mov	r4, r2
 8008b76:	d50e      	bpl.n	8008b96 <_svfiprintf_r+0x32>
 8008b78:	690b      	ldr	r3, [r1, #16]
 8008b7a:	b963      	cbnz	r3, 8008b96 <_svfiprintf_r+0x32>
 8008b7c:	2140      	movs	r1, #64	; 0x40
 8008b7e:	f7ff ff21 	bl	80089c4 <_malloc_r>
 8008b82:	6028      	str	r0, [r5, #0]
 8008b84:	6128      	str	r0, [r5, #16]
 8008b86:	b920      	cbnz	r0, 8008b92 <_svfiprintf_r+0x2e>
 8008b88:	230c      	movs	r3, #12
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b90:	e0d1      	b.n	8008d36 <_svfiprintf_r+0x1d2>
 8008b92:	2340      	movs	r3, #64	; 0x40
 8008b94:	616b      	str	r3, [r5, #20]
 8008b96:	2300      	movs	r3, #0
 8008b98:	9309      	str	r3, [sp, #36]	; 0x24
 8008b9a:	2320      	movs	r3, #32
 8008b9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ba0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ba4:	2330      	movs	r3, #48	; 0x30
 8008ba6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d50 <_svfiprintf_r+0x1ec>
 8008baa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bae:	f04f 0901 	mov.w	r9, #1
 8008bb2:	4623      	mov	r3, r4
 8008bb4:	469a      	mov	sl, r3
 8008bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bba:	b10a      	cbz	r2, 8008bc0 <_svfiprintf_r+0x5c>
 8008bbc:	2a25      	cmp	r2, #37	; 0x25
 8008bbe:	d1f9      	bne.n	8008bb4 <_svfiprintf_r+0x50>
 8008bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8008bc4:	d00b      	beq.n	8008bde <_svfiprintf_r+0x7a>
 8008bc6:	465b      	mov	r3, fp
 8008bc8:	4622      	mov	r2, r4
 8008bca:	4629      	mov	r1, r5
 8008bcc:	4638      	mov	r0, r7
 8008bce:	f7ff ff6d 	bl	8008aac <__ssputs_r>
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	f000 80aa 	beq.w	8008d2c <_svfiprintf_r+0x1c8>
 8008bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bda:	445a      	add	r2, fp
 8008bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8008bde:	f89a 3000 	ldrb.w	r3, [sl]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 80a2 	beq.w	8008d2c <_svfiprintf_r+0x1c8>
 8008be8:	2300      	movs	r3, #0
 8008bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bf2:	f10a 0a01 	add.w	sl, sl, #1
 8008bf6:	9304      	str	r3, [sp, #16]
 8008bf8:	9307      	str	r3, [sp, #28]
 8008bfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bfe:	931a      	str	r3, [sp, #104]	; 0x68
 8008c00:	4654      	mov	r4, sl
 8008c02:	2205      	movs	r2, #5
 8008c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c08:	4851      	ldr	r0, [pc, #324]	; (8008d50 <_svfiprintf_r+0x1ec>)
 8008c0a:	f7f7 fb11 	bl	8000230 <memchr>
 8008c0e:	9a04      	ldr	r2, [sp, #16]
 8008c10:	b9d8      	cbnz	r0, 8008c4a <_svfiprintf_r+0xe6>
 8008c12:	06d0      	lsls	r0, r2, #27
 8008c14:	bf44      	itt	mi
 8008c16:	2320      	movmi	r3, #32
 8008c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c1c:	0711      	lsls	r1, r2, #28
 8008c1e:	bf44      	itt	mi
 8008c20:	232b      	movmi	r3, #43	; 0x2b
 8008c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c26:	f89a 3000 	ldrb.w	r3, [sl]
 8008c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c2c:	d015      	beq.n	8008c5a <_svfiprintf_r+0xf6>
 8008c2e:	9a07      	ldr	r2, [sp, #28]
 8008c30:	4654      	mov	r4, sl
 8008c32:	2000      	movs	r0, #0
 8008c34:	f04f 0c0a 	mov.w	ip, #10
 8008c38:	4621      	mov	r1, r4
 8008c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c3e:	3b30      	subs	r3, #48	; 0x30
 8008c40:	2b09      	cmp	r3, #9
 8008c42:	d94e      	bls.n	8008ce2 <_svfiprintf_r+0x17e>
 8008c44:	b1b0      	cbz	r0, 8008c74 <_svfiprintf_r+0x110>
 8008c46:	9207      	str	r2, [sp, #28]
 8008c48:	e014      	b.n	8008c74 <_svfiprintf_r+0x110>
 8008c4a:	eba0 0308 	sub.w	r3, r0, r8
 8008c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8008c52:	4313      	orrs	r3, r2
 8008c54:	9304      	str	r3, [sp, #16]
 8008c56:	46a2      	mov	sl, r4
 8008c58:	e7d2      	b.n	8008c00 <_svfiprintf_r+0x9c>
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	1d19      	adds	r1, r3, #4
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	9103      	str	r1, [sp, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	bfbb      	ittet	lt
 8008c66:	425b      	neglt	r3, r3
 8008c68:	f042 0202 	orrlt.w	r2, r2, #2
 8008c6c:	9307      	strge	r3, [sp, #28]
 8008c6e:	9307      	strlt	r3, [sp, #28]
 8008c70:	bfb8      	it	lt
 8008c72:	9204      	strlt	r2, [sp, #16]
 8008c74:	7823      	ldrb	r3, [r4, #0]
 8008c76:	2b2e      	cmp	r3, #46	; 0x2e
 8008c78:	d10c      	bne.n	8008c94 <_svfiprintf_r+0x130>
 8008c7a:	7863      	ldrb	r3, [r4, #1]
 8008c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c7e:	d135      	bne.n	8008cec <_svfiprintf_r+0x188>
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	1d1a      	adds	r2, r3, #4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	9203      	str	r2, [sp, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfb8      	it	lt
 8008c8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008c90:	3402      	adds	r4, #2
 8008c92:	9305      	str	r3, [sp, #20]
 8008c94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d60 <_svfiprintf_r+0x1fc>
 8008c98:	7821      	ldrb	r1, [r4, #0]
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	4650      	mov	r0, sl
 8008c9e:	f7f7 fac7 	bl	8000230 <memchr>
 8008ca2:	b140      	cbz	r0, 8008cb6 <_svfiprintf_r+0x152>
 8008ca4:	2340      	movs	r3, #64	; 0x40
 8008ca6:	eba0 000a 	sub.w	r0, r0, sl
 8008caa:	fa03 f000 	lsl.w	r0, r3, r0
 8008cae:	9b04      	ldr	r3, [sp, #16]
 8008cb0:	4303      	orrs	r3, r0
 8008cb2:	3401      	adds	r4, #1
 8008cb4:	9304      	str	r3, [sp, #16]
 8008cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cba:	4826      	ldr	r0, [pc, #152]	; (8008d54 <_svfiprintf_r+0x1f0>)
 8008cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cc0:	2206      	movs	r2, #6
 8008cc2:	f7f7 fab5 	bl	8000230 <memchr>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d038      	beq.n	8008d3c <_svfiprintf_r+0x1d8>
 8008cca:	4b23      	ldr	r3, [pc, #140]	; (8008d58 <_svfiprintf_r+0x1f4>)
 8008ccc:	bb1b      	cbnz	r3, 8008d16 <_svfiprintf_r+0x1b2>
 8008cce:	9b03      	ldr	r3, [sp, #12]
 8008cd0:	3307      	adds	r3, #7
 8008cd2:	f023 0307 	bic.w	r3, r3, #7
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	9303      	str	r3, [sp, #12]
 8008cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cdc:	4433      	add	r3, r6
 8008cde:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce0:	e767      	b.n	8008bb2 <_svfiprintf_r+0x4e>
 8008ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	2001      	movs	r0, #1
 8008cea:	e7a5      	b.n	8008c38 <_svfiprintf_r+0xd4>
 8008cec:	2300      	movs	r3, #0
 8008cee:	3401      	adds	r4, #1
 8008cf0:	9305      	str	r3, [sp, #20]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	f04f 0c0a 	mov.w	ip, #10
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cfe:	3a30      	subs	r2, #48	; 0x30
 8008d00:	2a09      	cmp	r2, #9
 8008d02:	d903      	bls.n	8008d0c <_svfiprintf_r+0x1a8>
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0c5      	beq.n	8008c94 <_svfiprintf_r+0x130>
 8008d08:	9105      	str	r1, [sp, #20]
 8008d0a:	e7c3      	b.n	8008c94 <_svfiprintf_r+0x130>
 8008d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d10:	4604      	mov	r4, r0
 8008d12:	2301      	movs	r3, #1
 8008d14:	e7f0      	b.n	8008cf8 <_svfiprintf_r+0x194>
 8008d16:	ab03      	add	r3, sp, #12
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	462a      	mov	r2, r5
 8008d1c:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <_svfiprintf_r+0x1f8>)
 8008d1e:	a904      	add	r1, sp, #16
 8008d20:	4638      	mov	r0, r7
 8008d22:	f7fd ffb5 	bl	8006c90 <_printf_float>
 8008d26:	1c42      	adds	r2, r0, #1
 8008d28:	4606      	mov	r6, r0
 8008d2a:	d1d6      	bne.n	8008cda <_svfiprintf_r+0x176>
 8008d2c:	89ab      	ldrh	r3, [r5, #12]
 8008d2e:	065b      	lsls	r3, r3, #25
 8008d30:	f53f af2c 	bmi.w	8008b8c <_svfiprintf_r+0x28>
 8008d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d36:	b01d      	add	sp, #116	; 0x74
 8008d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3c:	ab03      	add	r3, sp, #12
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	462a      	mov	r2, r5
 8008d42:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <_svfiprintf_r+0x1f8>)
 8008d44:	a904      	add	r1, sp, #16
 8008d46:	4638      	mov	r0, r7
 8008d48:	f7fe fa46 	bl	80071d8 <_printf_i>
 8008d4c:	e7eb      	b.n	8008d26 <_svfiprintf_r+0x1c2>
 8008d4e:	bf00      	nop
 8008d50:	08009bf4 	.word	0x08009bf4
 8008d54:	08009bfe 	.word	0x08009bfe
 8008d58:	08006c91 	.word	0x08006c91
 8008d5c:	08008aad 	.word	0x08008aad
 8008d60:	08009bfa 	.word	0x08009bfa

08008d64 <_sbrk_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d06      	ldr	r5, [pc, #24]	; (8008d80 <_sbrk_r+0x1c>)
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	f7f8 fcee 	bl	8001750 <_sbrk>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d102      	bne.n	8008d7e <_sbrk_r+0x1a>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	b103      	cbz	r3, 8008d7e <_sbrk_r+0x1a>
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	20000544 	.word	0x20000544

08008d84 <__assert_func>:
 8008d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d86:	4614      	mov	r4, r2
 8008d88:	461a      	mov	r2, r3
 8008d8a:	4b09      	ldr	r3, [pc, #36]	; (8008db0 <__assert_func+0x2c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4605      	mov	r5, r0
 8008d90:	68d8      	ldr	r0, [r3, #12]
 8008d92:	b14c      	cbz	r4, 8008da8 <__assert_func+0x24>
 8008d94:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <__assert_func+0x30>)
 8008d96:	9100      	str	r1, [sp, #0]
 8008d98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d9c:	4906      	ldr	r1, [pc, #24]	; (8008db8 <__assert_func+0x34>)
 8008d9e:	462b      	mov	r3, r5
 8008da0:	f000 f80e 	bl	8008dc0 <fiprintf>
 8008da4:	f000 faac 	bl	8009300 <abort>
 8008da8:	4b04      	ldr	r3, [pc, #16]	; (8008dbc <__assert_func+0x38>)
 8008daa:	461c      	mov	r4, r3
 8008dac:	e7f3      	b.n	8008d96 <__assert_func+0x12>
 8008dae:	bf00      	nop
 8008db0:	2000000c 	.word	0x2000000c
 8008db4:	08009c05 	.word	0x08009c05
 8008db8:	08009c12 	.word	0x08009c12
 8008dbc:	08009c40 	.word	0x08009c40

08008dc0 <fiprintf>:
 8008dc0:	b40e      	push	{r1, r2, r3}
 8008dc2:	b503      	push	{r0, r1, lr}
 8008dc4:	4601      	mov	r1, r0
 8008dc6:	ab03      	add	r3, sp, #12
 8008dc8:	4805      	ldr	r0, [pc, #20]	; (8008de0 <fiprintf+0x20>)
 8008dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dce:	6800      	ldr	r0, [r0, #0]
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	f000 f897 	bl	8008f04 <_vfiprintf_r>
 8008dd6:	b002      	add	sp, #8
 8008dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ddc:	b003      	add	sp, #12
 8008dde:	4770      	bx	lr
 8008de0:	2000000c 	.word	0x2000000c

08008de4 <__ascii_mbtowc>:
 8008de4:	b082      	sub	sp, #8
 8008de6:	b901      	cbnz	r1, 8008dea <__ascii_mbtowc+0x6>
 8008de8:	a901      	add	r1, sp, #4
 8008dea:	b142      	cbz	r2, 8008dfe <__ascii_mbtowc+0x1a>
 8008dec:	b14b      	cbz	r3, 8008e02 <__ascii_mbtowc+0x1e>
 8008dee:	7813      	ldrb	r3, [r2, #0]
 8008df0:	600b      	str	r3, [r1, #0]
 8008df2:	7812      	ldrb	r2, [r2, #0]
 8008df4:	1e10      	subs	r0, r2, #0
 8008df6:	bf18      	it	ne
 8008df8:	2001      	movne	r0, #1
 8008dfa:	b002      	add	sp, #8
 8008dfc:	4770      	bx	lr
 8008dfe:	4610      	mov	r0, r2
 8008e00:	e7fb      	b.n	8008dfa <__ascii_mbtowc+0x16>
 8008e02:	f06f 0001 	mvn.w	r0, #1
 8008e06:	e7f8      	b.n	8008dfa <__ascii_mbtowc+0x16>

08008e08 <memmove>:
 8008e08:	4288      	cmp	r0, r1
 8008e0a:	b510      	push	{r4, lr}
 8008e0c:	eb01 0402 	add.w	r4, r1, r2
 8008e10:	d902      	bls.n	8008e18 <memmove+0x10>
 8008e12:	4284      	cmp	r4, r0
 8008e14:	4623      	mov	r3, r4
 8008e16:	d807      	bhi.n	8008e28 <memmove+0x20>
 8008e18:	1e43      	subs	r3, r0, #1
 8008e1a:	42a1      	cmp	r1, r4
 8008e1c:	d008      	beq.n	8008e30 <memmove+0x28>
 8008e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e26:	e7f8      	b.n	8008e1a <memmove+0x12>
 8008e28:	4402      	add	r2, r0
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	428a      	cmp	r2, r1
 8008e2e:	d100      	bne.n	8008e32 <memmove+0x2a>
 8008e30:	bd10      	pop	{r4, pc}
 8008e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e3a:	e7f7      	b.n	8008e2c <memmove+0x24>

08008e3c <__malloc_lock>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__malloc_lock+0x8>)
 8008e3e:	f000 bc1f 	b.w	8009680 <__retarget_lock_acquire_recursive>
 8008e42:	bf00      	nop
 8008e44:	20000548 	.word	0x20000548

08008e48 <__malloc_unlock>:
 8008e48:	4801      	ldr	r0, [pc, #4]	; (8008e50 <__malloc_unlock+0x8>)
 8008e4a:	f000 bc1a 	b.w	8009682 <__retarget_lock_release_recursive>
 8008e4e:	bf00      	nop
 8008e50:	20000548 	.word	0x20000548

08008e54 <_realloc_r>:
 8008e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e58:	4680      	mov	r8, r0
 8008e5a:	4614      	mov	r4, r2
 8008e5c:	460e      	mov	r6, r1
 8008e5e:	b921      	cbnz	r1, 8008e6a <_realloc_r+0x16>
 8008e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e64:	4611      	mov	r1, r2
 8008e66:	f7ff bdad 	b.w	80089c4 <_malloc_r>
 8008e6a:	b92a      	cbnz	r2, 8008e78 <_realloc_r+0x24>
 8008e6c:	f7ff fd3e 	bl	80088ec <_free_r>
 8008e70:	4625      	mov	r5, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e78:	f000 fc6a 	bl	8009750 <_malloc_usable_size_r>
 8008e7c:	4284      	cmp	r4, r0
 8008e7e:	4607      	mov	r7, r0
 8008e80:	d802      	bhi.n	8008e88 <_realloc_r+0x34>
 8008e82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e86:	d812      	bhi.n	8008eae <_realloc_r+0x5a>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	f7ff fd9a 	bl	80089c4 <_malloc_r>
 8008e90:	4605      	mov	r5, r0
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d0ed      	beq.n	8008e72 <_realloc_r+0x1e>
 8008e96:	42bc      	cmp	r4, r7
 8008e98:	4622      	mov	r2, r4
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	bf28      	it	cs
 8008e9e:	463a      	movcs	r2, r7
 8008ea0:	f7ff f97c 	bl	800819c <memcpy>
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	f7ff fd20 	bl	80088ec <_free_r>
 8008eac:	e7e1      	b.n	8008e72 <_realloc_r+0x1e>
 8008eae:	4635      	mov	r5, r6
 8008eb0:	e7df      	b.n	8008e72 <_realloc_r+0x1e>

08008eb2 <__sfputc_r>:
 8008eb2:	6893      	ldr	r3, [r2, #8]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	b410      	push	{r4}
 8008eba:	6093      	str	r3, [r2, #8]
 8008ebc:	da08      	bge.n	8008ed0 <__sfputc_r+0x1e>
 8008ebe:	6994      	ldr	r4, [r2, #24]
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	db01      	blt.n	8008ec8 <__sfputc_r+0x16>
 8008ec4:	290a      	cmp	r1, #10
 8008ec6:	d103      	bne.n	8008ed0 <__sfputc_r+0x1e>
 8008ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ecc:	f000 b94a 	b.w	8009164 <__swbuf_r>
 8008ed0:	6813      	ldr	r3, [r2, #0]
 8008ed2:	1c58      	adds	r0, r3, #1
 8008ed4:	6010      	str	r0, [r2, #0]
 8008ed6:	7019      	strb	r1, [r3, #0]
 8008ed8:	4608      	mov	r0, r1
 8008eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <__sfputs_r>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460f      	mov	r7, r1
 8008ee6:	4614      	mov	r4, r2
 8008ee8:	18d5      	adds	r5, r2, r3
 8008eea:	42ac      	cmp	r4, r5
 8008eec:	d101      	bne.n	8008ef2 <__sfputs_r+0x12>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e007      	b.n	8008f02 <__sfputs_r+0x22>
 8008ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef6:	463a      	mov	r2, r7
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff ffda 	bl	8008eb2 <__sfputc_r>
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	d1f3      	bne.n	8008eea <__sfputs_r+0xa>
 8008f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f04 <_vfiprintf_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	460d      	mov	r5, r1
 8008f0a:	b09d      	sub	sp, #116	; 0x74
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	4698      	mov	r8, r3
 8008f10:	4606      	mov	r6, r0
 8008f12:	b118      	cbz	r0, 8008f1c <_vfiprintf_r+0x18>
 8008f14:	6983      	ldr	r3, [r0, #24]
 8008f16:	b90b      	cbnz	r3, 8008f1c <_vfiprintf_r+0x18>
 8008f18:	f000 fb14 	bl	8009544 <__sinit>
 8008f1c:	4b89      	ldr	r3, [pc, #548]	; (8009144 <_vfiprintf_r+0x240>)
 8008f1e:	429d      	cmp	r5, r3
 8008f20:	d11b      	bne.n	8008f5a <_vfiprintf_r+0x56>
 8008f22:	6875      	ldr	r5, [r6, #4]
 8008f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f26:	07d9      	lsls	r1, r3, #31
 8008f28:	d405      	bmi.n	8008f36 <_vfiprintf_r+0x32>
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	059a      	lsls	r2, r3, #22
 8008f2e:	d402      	bmi.n	8008f36 <_vfiprintf_r+0x32>
 8008f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f32:	f000 fba5 	bl	8009680 <__retarget_lock_acquire_recursive>
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	071b      	lsls	r3, r3, #28
 8008f3a:	d501      	bpl.n	8008f40 <_vfiprintf_r+0x3c>
 8008f3c:	692b      	ldr	r3, [r5, #16]
 8008f3e:	b9eb      	cbnz	r3, 8008f7c <_vfiprintf_r+0x78>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f000 f96e 	bl	8009224 <__swsetup_r>
 8008f48:	b1c0      	cbz	r0, 8008f7c <_vfiprintf_r+0x78>
 8008f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f4c:	07dc      	lsls	r4, r3, #31
 8008f4e:	d50e      	bpl.n	8008f6e <_vfiprintf_r+0x6a>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f54:	b01d      	add	sp, #116	; 0x74
 8008f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5a:	4b7b      	ldr	r3, [pc, #492]	; (8009148 <_vfiprintf_r+0x244>)
 8008f5c:	429d      	cmp	r5, r3
 8008f5e:	d101      	bne.n	8008f64 <_vfiprintf_r+0x60>
 8008f60:	68b5      	ldr	r5, [r6, #8]
 8008f62:	e7df      	b.n	8008f24 <_vfiprintf_r+0x20>
 8008f64:	4b79      	ldr	r3, [pc, #484]	; (800914c <_vfiprintf_r+0x248>)
 8008f66:	429d      	cmp	r5, r3
 8008f68:	bf08      	it	eq
 8008f6a:	68f5      	ldreq	r5, [r6, #12]
 8008f6c:	e7da      	b.n	8008f24 <_vfiprintf_r+0x20>
 8008f6e:	89ab      	ldrh	r3, [r5, #12]
 8008f70:	0598      	lsls	r0, r3, #22
 8008f72:	d4ed      	bmi.n	8008f50 <_vfiprintf_r+0x4c>
 8008f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f76:	f000 fb84 	bl	8009682 <__retarget_lock_release_recursive>
 8008f7a:	e7e9      	b.n	8008f50 <_vfiprintf_r+0x4c>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f80:	2320      	movs	r3, #32
 8008f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f8a:	2330      	movs	r3, #48	; 0x30
 8008f8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009150 <_vfiprintf_r+0x24c>
 8008f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f94:	f04f 0901 	mov.w	r9, #1
 8008f98:	4623      	mov	r3, r4
 8008f9a:	469a      	mov	sl, r3
 8008f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fa0:	b10a      	cbz	r2, 8008fa6 <_vfiprintf_r+0xa2>
 8008fa2:	2a25      	cmp	r2, #37	; 0x25
 8008fa4:	d1f9      	bne.n	8008f9a <_vfiprintf_r+0x96>
 8008fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8008faa:	d00b      	beq.n	8008fc4 <_vfiprintf_r+0xc0>
 8008fac:	465b      	mov	r3, fp
 8008fae:	4622      	mov	r2, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7ff ff94 	bl	8008ee0 <__sfputs_r>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f000 80aa 	beq.w	8009112 <_vfiprintf_r+0x20e>
 8008fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fc0:	445a      	add	r2, fp
 8008fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 80a2 	beq.w	8009112 <_vfiprintf_r+0x20e>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd8:	f10a 0a01 	add.w	sl, sl, #1
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	9307      	str	r3, [sp, #28]
 8008fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fe6:	4654      	mov	r4, sl
 8008fe8:	2205      	movs	r2, #5
 8008fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fee:	4858      	ldr	r0, [pc, #352]	; (8009150 <_vfiprintf_r+0x24c>)
 8008ff0:	f7f7 f91e 	bl	8000230 <memchr>
 8008ff4:	9a04      	ldr	r2, [sp, #16]
 8008ff6:	b9d8      	cbnz	r0, 8009030 <_vfiprintf_r+0x12c>
 8008ff8:	06d1      	lsls	r1, r2, #27
 8008ffa:	bf44      	itt	mi
 8008ffc:	2320      	movmi	r3, #32
 8008ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009002:	0713      	lsls	r3, r2, #28
 8009004:	bf44      	itt	mi
 8009006:	232b      	movmi	r3, #43	; 0x2b
 8009008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800900c:	f89a 3000 	ldrb.w	r3, [sl]
 8009010:	2b2a      	cmp	r3, #42	; 0x2a
 8009012:	d015      	beq.n	8009040 <_vfiprintf_r+0x13c>
 8009014:	9a07      	ldr	r2, [sp, #28]
 8009016:	4654      	mov	r4, sl
 8009018:	2000      	movs	r0, #0
 800901a:	f04f 0c0a 	mov.w	ip, #10
 800901e:	4621      	mov	r1, r4
 8009020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009024:	3b30      	subs	r3, #48	; 0x30
 8009026:	2b09      	cmp	r3, #9
 8009028:	d94e      	bls.n	80090c8 <_vfiprintf_r+0x1c4>
 800902a:	b1b0      	cbz	r0, 800905a <_vfiprintf_r+0x156>
 800902c:	9207      	str	r2, [sp, #28]
 800902e:	e014      	b.n	800905a <_vfiprintf_r+0x156>
 8009030:	eba0 0308 	sub.w	r3, r0, r8
 8009034:	fa09 f303 	lsl.w	r3, r9, r3
 8009038:	4313      	orrs	r3, r2
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	46a2      	mov	sl, r4
 800903e:	e7d2      	b.n	8008fe6 <_vfiprintf_r+0xe2>
 8009040:	9b03      	ldr	r3, [sp, #12]
 8009042:	1d19      	adds	r1, r3, #4
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	9103      	str	r1, [sp, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	bfbb      	ittet	lt
 800904c:	425b      	neglt	r3, r3
 800904e:	f042 0202 	orrlt.w	r2, r2, #2
 8009052:	9307      	strge	r3, [sp, #28]
 8009054:	9307      	strlt	r3, [sp, #28]
 8009056:	bfb8      	it	lt
 8009058:	9204      	strlt	r2, [sp, #16]
 800905a:	7823      	ldrb	r3, [r4, #0]
 800905c:	2b2e      	cmp	r3, #46	; 0x2e
 800905e:	d10c      	bne.n	800907a <_vfiprintf_r+0x176>
 8009060:	7863      	ldrb	r3, [r4, #1]
 8009062:	2b2a      	cmp	r3, #42	; 0x2a
 8009064:	d135      	bne.n	80090d2 <_vfiprintf_r+0x1ce>
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	1d1a      	adds	r2, r3, #4
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	9203      	str	r2, [sp, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfb8      	it	lt
 8009072:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009076:	3402      	adds	r4, #2
 8009078:	9305      	str	r3, [sp, #20]
 800907a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009160 <_vfiprintf_r+0x25c>
 800907e:	7821      	ldrb	r1, [r4, #0]
 8009080:	2203      	movs	r2, #3
 8009082:	4650      	mov	r0, sl
 8009084:	f7f7 f8d4 	bl	8000230 <memchr>
 8009088:	b140      	cbz	r0, 800909c <_vfiprintf_r+0x198>
 800908a:	2340      	movs	r3, #64	; 0x40
 800908c:	eba0 000a 	sub.w	r0, r0, sl
 8009090:	fa03 f000 	lsl.w	r0, r3, r0
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	4303      	orrs	r3, r0
 8009098:	3401      	adds	r4, #1
 800909a:	9304      	str	r3, [sp, #16]
 800909c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a0:	482c      	ldr	r0, [pc, #176]	; (8009154 <_vfiprintf_r+0x250>)
 80090a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090a6:	2206      	movs	r2, #6
 80090a8:	f7f7 f8c2 	bl	8000230 <memchr>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d03f      	beq.n	8009130 <_vfiprintf_r+0x22c>
 80090b0:	4b29      	ldr	r3, [pc, #164]	; (8009158 <_vfiprintf_r+0x254>)
 80090b2:	bb1b      	cbnz	r3, 80090fc <_vfiprintf_r+0x1f8>
 80090b4:	9b03      	ldr	r3, [sp, #12]
 80090b6:	3307      	adds	r3, #7
 80090b8:	f023 0307 	bic.w	r3, r3, #7
 80090bc:	3308      	adds	r3, #8
 80090be:	9303      	str	r3, [sp, #12]
 80090c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c2:	443b      	add	r3, r7
 80090c4:	9309      	str	r3, [sp, #36]	; 0x24
 80090c6:	e767      	b.n	8008f98 <_vfiprintf_r+0x94>
 80090c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090cc:	460c      	mov	r4, r1
 80090ce:	2001      	movs	r0, #1
 80090d0:	e7a5      	b.n	800901e <_vfiprintf_r+0x11a>
 80090d2:	2300      	movs	r3, #0
 80090d4:	3401      	adds	r4, #1
 80090d6:	9305      	str	r3, [sp, #20]
 80090d8:	4619      	mov	r1, r3
 80090da:	f04f 0c0a 	mov.w	ip, #10
 80090de:	4620      	mov	r0, r4
 80090e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e4:	3a30      	subs	r2, #48	; 0x30
 80090e6:	2a09      	cmp	r2, #9
 80090e8:	d903      	bls.n	80090f2 <_vfiprintf_r+0x1ee>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0c5      	beq.n	800907a <_vfiprintf_r+0x176>
 80090ee:	9105      	str	r1, [sp, #20]
 80090f0:	e7c3      	b.n	800907a <_vfiprintf_r+0x176>
 80090f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090f6:	4604      	mov	r4, r0
 80090f8:	2301      	movs	r3, #1
 80090fa:	e7f0      	b.n	80090de <_vfiprintf_r+0x1da>
 80090fc:	ab03      	add	r3, sp, #12
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	462a      	mov	r2, r5
 8009102:	4b16      	ldr	r3, [pc, #88]	; (800915c <_vfiprintf_r+0x258>)
 8009104:	a904      	add	r1, sp, #16
 8009106:	4630      	mov	r0, r6
 8009108:	f7fd fdc2 	bl	8006c90 <_printf_float>
 800910c:	4607      	mov	r7, r0
 800910e:	1c78      	adds	r0, r7, #1
 8009110:	d1d6      	bne.n	80090c0 <_vfiprintf_r+0x1bc>
 8009112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009114:	07d9      	lsls	r1, r3, #31
 8009116:	d405      	bmi.n	8009124 <_vfiprintf_r+0x220>
 8009118:	89ab      	ldrh	r3, [r5, #12]
 800911a:	059a      	lsls	r2, r3, #22
 800911c:	d402      	bmi.n	8009124 <_vfiprintf_r+0x220>
 800911e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009120:	f000 faaf 	bl	8009682 <__retarget_lock_release_recursive>
 8009124:	89ab      	ldrh	r3, [r5, #12]
 8009126:	065b      	lsls	r3, r3, #25
 8009128:	f53f af12 	bmi.w	8008f50 <_vfiprintf_r+0x4c>
 800912c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800912e:	e711      	b.n	8008f54 <_vfiprintf_r+0x50>
 8009130:	ab03      	add	r3, sp, #12
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	462a      	mov	r2, r5
 8009136:	4b09      	ldr	r3, [pc, #36]	; (800915c <_vfiprintf_r+0x258>)
 8009138:	a904      	add	r1, sp, #16
 800913a:	4630      	mov	r0, r6
 800913c:	f7fe f84c 	bl	80071d8 <_printf_i>
 8009140:	e7e4      	b.n	800910c <_vfiprintf_r+0x208>
 8009142:	bf00      	nop
 8009144:	08009d6c 	.word	0x08009d6c
 8009148:	08009d8c 	.word	0x08009d8c
 800914c:	08009d4c 	.word	0x08009d4c
 8009150:	08009bf4 	.word	0x08009bf4
 8009154:	08009bfe 	.word	0x08009bfe
 8009158:	08006c91 	.word	0x08006c91
 800915c:	08008ee1 	.word	0x08008ee1
 8009160:	08009bfa 	.word	0x08009bfa

08009164 <__swbuf_r>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	460e      	mov	r6, r1
 8009168:	4614      	mov	r4, r2
 800916a:	4605      	mov	r5, r0
 800916c:	b118      	cbz	r0, 8009176 <__swbuf_r+0x12>
 800916e:	6983      	ldr	r3, [r0, #24]
 8009170:	b90b      	cbnz	r3, 8009176 <__swbuf_r+0x12>
 8009172:	f000 f9e7 	bl	8009544 <__sinit>
 8009176:	4b21      	ldr	r3, [pc, #132]	; (80091fc <__swbuf_r+0x98>)
 8009178:	429c      	cmp	r4, r3
 800917a:	d12b      	bne.n	80091d4 <__swbuf_r+0x70>
 800917c:	686c      	ldr	r4, [r5, #4]
 800917e:	69a3      	ldr	r3, [r4, #24]
 8009180:	60a3      	str	r3, [r4, #8]
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	071a      	lsls	r2, r3, #28
 8009186:	d52f      	bpl.n	80091e8 <__swbuf_r+0x84>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	b36b      	cbz	r3, 80091e8 <__swbuf_r+0x84>
 800918c:	6923      	ldr	r3, [r4, #16]
 800918e:	6820      	ldr	r0, [r4, #0]
 8009190:	1ac0      	subs	r0, r0, r3
 8009192:	6963      	ldr	r3, [r4, #20]
 8009194:	b2f6      	uxtb	r6, r6
 8009196:	4283      	cmp	r3, r0
 8009198:	4637      	mov	r7, r6
 800919a:	dc04      	bgt.n	80091a6 <__swbuf_r+0x42>
 800919c:	4621      	mov	r1, r4
 800919e:	4628      	mov	r0, r5
 80091a0:	f000 f93c 	bl	800941c <_fflush_r>
 80091a4:	bb30      	cbnz	r0, 80091f4 <__swbuf_r+0x90>
 80091a6:	68a3      	ldr	r3, [r4, #8]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	60a3      	str	r3, [r4, #8]
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	1c5a      	adds	r2, r3, #1
 80091b0:	6022      	str	r2, [r4, #0]
 80091b2:	701e      	strb	r6, [r3, #0]
 80091b4:	6963      	ldr	r3, [r4, #20]
 80091b6:	3001      	adds	r0, #1
 80091b8:	4283      	cmp	r3, r0
 80091ba:	d004      	beq.n	80091c6 <__swbuf_r+0x62>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	07db      	lsls	r3, r3, #31
 80091c0:	d506      	bpl.n	80091d0 <__swbuf_r+0x6c>
 80091c2:	2e0a      	cmp	r6, #10
 80091c4:	d104      	bne.n	80091d0 <__swbuf_r+0x6c>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	f000 f927 	bl	800941c <_fflush_r>
 80091ce:	b988      	cbnz	r0, 80091f4 <__swbuf_r+0x90>
 80091d0:	4638      	mov	r0, r7
 80091d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d4:	4b0a      	ldr	r3, [pc, #40]	; (8009200 <__swbuf_r+0x9c>)
 80091d6:	429c      	cmp	r4, r3
 80091d8:	d101      	bne.n	80091de <__swbuf_r+0x7a>
 80091da:	68ac      	ldr	r4, [r5, #8]
 80091dc:	e7cf      	b.n	800917e <__swbuf_r+0x1a>
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <__swbuf_r+0xa0>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	bf08      	it	eq
 80091e4:	68ec      	ldreq	r4, [r5, #12]
 80091e6:	e7ca      	b.n	800917e <__swbuf_r+0x1a>
 80091e8:	4621      	mov	r1, r4
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 f81a 	bl	8009224 <__swsetup_r>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d0cb      	beq.n	800918c <__swbuf_r+0x28>
 80091f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80091f8:	e7ea      	b.n	80091d0 <__swbuf_r+0x6c>
 80091fa:	bf00      	nop
 80091fc:	08009d6c 	.word	0x08009d6c
 8009200:	08009d8c 	.word	0x08009d8c
 8009204:	08009d4c 	.word	0x08009d4c

08009208 <__ascii_wctomb>:
 8009208:	b149      	cbz	r1, 800921e <__ascii_wctomb+0x16>
 800920a:	2aff      	cmp	r2, #255	; 0xff
 800920c:	bf85      	ittet	hi
 800920e:	238a      	movhi	r3, #138	; 0x8a
 8009210:	6003      	strhi	r3, [r0, #0]
 8009212:	700a      	strbls	r2, [r1, #0]
 8009214:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009218:	bf98      	it	ls
 800921a:	2001      	movls	r0, #1
 800921c:	4770      	bx	lr
 800921e:	4608      	mov	r0, r1
 8009220:	4770      	bx	lr
	...

08009224 <__swsetup_r>:
 8009224:	4b32      	ldr	r3, [pc, #200]	; (80092f0 <__swsetup_r+0xcc>)
 8009226:	b570      	push	{r4, r5, r6, lr}
 8009228:	681d      	ldr	r5, [r3, #0]
 800922a:	4606      	mov	r6, r0
 800922c:	460c      	mov	r4, r1
 800922e:	b125      	cbz	r5, 800923a <__swsetup_r+0x16>
 8009230:	69ab      	ldr	r3, [r5, #24]
 8009232:	b913      	cbnz	r3, 800923a <__swsetup_r+0x16>
 8009234:	4628      	mov	r0, r5
 8009236:	f000 f985 	bl	8009544 <__sinit>
 800923a:	4b2e      	ldr	r3, [pc, #184]	; (80092f4 <__swsetup_r+0xd0>)
 800923c:	429c      	cmp	r4, r3
 800923e:	d10f      	bne.n	8009260 <__swsetup_r+0x3c>
 8009240:	686c      	ldr	r4, [r5, #4]
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009248:	0719      	lsls	r1, r3, #28
 800924a:	d42c      	bmi.n	80092a6 <__swsetup_r+0x82>
 800924c:	06dd      	lsls	r5, r3, #27
 800924e:	d411      	bmi.n	8009274 <__swsetup_r+0x50>
 8009250:	2309      	movs	r3, #9
 8009252:	6033      	str	r3, [r6, #0]
 8009254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009258:	81a3      	strh	r3, [r4, #12]
 800925a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800925e:	e03e      	b.n	80092de <__swsetup_r+0xba>
 8009260:	4b25      	ldr	r3, [pc, #148]	; (80092f8 <__swsetup_r+0xd4>)
 8009262:	429c      	cmp	r4, r3
 8009264:	d101      	bne.n	800926a <__swsetup_r+0x46>
 8009266:	68ac      	ldr	r4, [r5, #8]
 8009268:	e7eb      	b.n	8009242 <__swsetup_r+0x1e>
 800926a:	4b24      	ldr	r3, [pc, #144]	; (80092fc <__swsetup_r+0xd8>)
 800926c:	429c      	cmp	r4, r3
 800926e:	bf08      	it	eq
 8009270:	68ec      	ldreq	r4, [r5, #12]
 8009272:	e7e6      	b.n	8009242 <__swsetup_r+0x1e>
 8009274:	0758      	lsls	r0, r3, #29
 8009276:	d512      	bpl.n	800929e <__swsetup_r+0x7a>
 8009278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800927a:	b141      	cbz	r1, 800928e <__swsetup_r+0x6a>
 800927c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009280:	4299      	cmp	r1, r3
 8009282:	d002      	beq.n	800928a <__swsetup_r+0x66>
 8009284:	4630      	mov	r0, r6
 8009286:	f7ff fb31 	bl	80088ec <_free_r>
 800928a:	2300      	movs	r3, #0
 800928c:	6363      	str	r3, [r4, #52]	; 0x34
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	2300      	movs	r3, #0
 8009298:	6063      	str	r3, [r4, #4]
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	89a3      	ldrh	r3, [r4, #12]
 80092a0:	f043 0308 	orr.w	r3, r3, #8
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	b94b      	cbnz	r3, 80092be <__swsetup_r+0x9a>
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092b4:	d003      	beq.n	80092be <__swsetup_r+0x9a>
 80092b6:	4621      	mov	r1, r4
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 fa09 	bl	80096d0 <__smakebuf_r>
 80092be:	89a0      	ldrh	r0, [r4, #12]
 80092c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092c4:	f010 0301 	ands.w	r3, r0, #1
 80092c8:	d00a      	beq.n	80092e0 <__swsetup_r+0xbc>
 80092ca:	2300      	movs	r3, #0
 80092cc:	60a3      	str	r3, [r4, #8]
 80092ce:	6963      	ldr	r3, [r4, #20]
 80092d0:	425b      	negs	r3, r3
 80092d2:	61a3      	str	r3, [r4, #24]
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	b943      	cbnz	r3, 80092ea <__swsetup_r+0xc6>
 80092d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092dc:	d1ba      	bne.n	8009254 <__swsetup_r+0x30>
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	0781      	lsls	r1, r0, #30
 80092e2:	bf58      	it	pl
 80092e4:	6963      	ldrpl	r3, [r4, #20]
 80092e6:	60a3      	str	r3, [r4, #8]
 80092e8:	e7f4      	b.n	80092d4 <__swsetup_r+0xb0>
 80092ea:	2000      	movs	r0, #0
 80092ec:	e7f7      	b.n	80092de <__swsetup_r+0xba>
 80092ee:	bf00      	nop
 80092f0:	2000000c 	.word	0x2000000c
 80092f4:	08009d6c 	.word	0x08009d6c
 80092f8:	08009d8c 	.word	0x08009d8c
 80092fc:	08009d4c 	.word	0x08009d4c

08009300 <abort>:
 8009300:	b508      	push	{r3, lr}
 8009302:	2006      	movs	r0, #6
 8009304:	f000 fa54 	bl	80097b0 <raise>
 8009308:	2001      	movs	r0, #1
 800930a:	f7f8 f9a9 	bl	8001660 <_exit>
	...

08009310 <__sflush_r>:
 8009310:	898a      	ldrh	r2, [r1, #12]
 8009312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009316:	4605      	mov	r5, r0
 8009318:	0710      	lsls	r0, r2, #28
 800931a:	460c      	mov	r4, r1
 800931c:	d458      	bmi.n	80093d0 <__sflush_r+0xc0>
 800931e:	684b      	ldr	r3, [r1, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	dc05      	bgt.n	8009330 <__sflush_r+0x20>
 8009324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009326:	2b00      	cmp	r3, #0
 8009328:	dc02      	bgt.n	8009330 <__sflush_r+0x20>
 800932a:	2000      	movs	r0, #0
 800932c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009332:	2e00      	cmp	r6, #0
 8009334:	d0f9      	beq.n	800932a <__sflush_r+0x1a>
 8009336:	2300      	movs	r3, #0
 8009338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800933c:	682f      	ldr	r7, [r5, #0]
 800933e:	602b      	str	r3, [r5, #0]
 8009340:	d032      	beq.n	80093a8 <__sflush_r+0x98>
 8009342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	075a      	lsls	r2, r3, #29
 8009348:	d505      	bpl.n	8009356 <__sflush_r+0x46>
 800934a:	6863      	ldr	r3, [r4, #4]
 800934c:	1ac0      	subs	r0, r0, r3
 800934e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009350:	b10b      	cbz	r3, 8009356 <__sflush_r+0x46>
 8009352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009354:	1ac0      	subs	r0, r0, r3
 8009356:	2300      	movs	r3, #0
 8009358:	4602      	mov	r2, r0
 800935a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800935c:	6a21      	ldr	r1, [r4, #32]
 800935e:	4628      	mov	r0, r5
 8009360:	47b0      	blx	r6
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	d106      	bne.n	8009376 <__sflush_r+0x66>
 8009368:	6829      	ldr	r1, [r5, #0]
 800936a:	291d      	cmp	r1, #29
 800936c:	d82c      	bhi.n	80093c8 <__sflush_r+0xb8>
 800936e:	4a2a      	ldr	r2, [pc, #168]	; (8009418 <__sflush_r+0x108>)
 8009370:	40ca      	lsrs	r2, r1
 8009372:	07d6      	lsls	r6, r2, #31
 8009374:	d528      	bpl.n	80093c8 <__sflush_r+0xb8>
 8009376:	2200      	movs	r2, #0
 8009378:	6062      	str	r2, [r4, #4]
 800937a:	04d9      	lsls	r1, r3, #19
 800937c:	6922      	ldr	r2, [r4, #16]
 800937e:	6022      	str	r2, [r4, #0]
 8009380:	d504      	bpl.n	800938c <__sflush_r+0x7c>
 8009382:	1c42      	adds	r2, r0, #1
 8009384:	d101      	bne.n	800938a <__sflush_r+0x7a>
 8009386:	682b      	ldr	r3, [r5, #0]
 8009388:	b903      	cbnz	r3, 800938c <__sflush_r+0x7c>
 800938a:	6560      	str	r0, [r4, #84]	; 0x54
 800938c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800938e:	602f      	str	r7, [r5, #0]
 8009390:	2900      	cmp	r1, #0
 8009392:	d0ca      	beq.n	800932a <__sflush_r+0x1a>
 8009394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009398:	4299      	cmp	r1, r3
 800939a:	d002      	beq.n	80093a2 <__sflush_r+0x92>
 800939c:	4628      	mov	r0, r5
 800939e:	f7ff faa5 	bl	80088ec <_free_r>
 80093a2:	2000      	movs	r0, #0
 80093a4:	6360      	str	r0, [r4, #52]	; 0x34
 80093a6:	e7c1      	b.n	800932c <__sflush_r+0x1c>
 80093a8:	6a21      	ldr	r1, [r4, #32]
 80093aa:	2301      	movs	r3, #1
 80093ac:	4628      	mov	r0, r5
 80093ae:	47b0      	blx	r6
 80093b0:	1c41      	adds	r1, r0, #1
 80093b2:	d1c7      	bne.n	8009344 <__sflush_r+0x34>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0c4      	beq.n	8009344 <__sflush_r+0x34>
 80093ba:	2b1d      	cmp	r3, #29
 80093bc:	d001      	beq.n	80093c2 <__sflush_r+0xb2>
 80093be:	2b16      	cmp	r3, #22
 80093c0:	d101      	bne.n	80093c6 <__sflush_r+0xb6>
 80093c2:	602f      	str	r7, [r5, #0]
 80093c4:	e7b1      	b.n	800932a <__sflush_r+0x1a>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093cc:	81a3      	strh	r3, [r4, #12]
 80093ce:	e7ad      	b.n	800932c <__sflush_r+0x1c>
 80093d0:	690f      	ldr	r7, [r1, #16]
 80093d2:	2f00      	cmp	r7, #0
 80093d4:	d0a9      	beq.n	800932a <__sflush_r+0x1a>
 80093d6:	0793      	lsls	r3, r2, #30
 80093d8:	680e      	ldr	r6, [r1, #0]
 80093da:	bf08      	it	eq
 80093dc:	694b      	ldreq	r3, [r1, #20]
 80093de:	600f      	str	r7, [r1, #0]
 80093e0:	bf18      	it	ne
 80093e2:	2300      	movne	r3, #0
 80093e4:	eba6 0807 	sub.w	r8, r6, r7
 80093e8:	608b      	str	r3, [r1, #8]
 80093ea:	f1b8 0f00 	cmp.w	r8, #0
 80093ee:	dd9c      	ble.n	800932a <__sflush_r+0x1a>
 80093f0:	6a21      	ldr	r1, [r4, #32]
 80093f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093f4:	4643      	mov	r3, r8
 80093f6:	463a      	mov	r2, r7
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b0      	blx	r6
 80093fc:	2800      	cmp	r0, #0
 80093fe:	dc06      	bgt.n	800940e <__sflush_r+0xfe>
 8009400:	89a3      	ldrh	r3, [r4, #12]
 8009402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009406:	81a3      	strh	r3, [r4, #12]
 8009408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800940c:	e78e      	b.n	800932c <__sflush_r+0x1c>
 800940e:	4407      	add	r7, r0
 8009410:	eba8 0800 	sub.w	r8, r8, r0
 8009414:	e7e9      	b.n	80093ea <__sflush_r+0xda>
 8009416:	bf00      	nop
 8009418:	20400001 	.word	0x20400001

0800941c <_fflush_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	690b      	ldr	r3, [r1, #16]
 8009420:	4605      	mov	r5, r0
 8009422:	460c      	mov	r4, r1
 8009424:	b913      	cbnz	r3, 800942c <_fflush_r+0x10>
 8009426:	2500      	movs	r5, #0
 8009428:	4628      	mov	r0, r5
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	b118      	cbz	r0, 8009436 <_fflush_r+0x1a>
 800942e:	6983      	ldr	r3, [r0, #24]
 8009430:	b90b      	cbnz	r3, 8009436 <_fflush_r+0x1a>
 8009432:	f000 f887 	bl	8009544 <__sinit>
 8009436:	4b14      	ldr	r3, [pc, #80]	; (8009488 <_fflush_r+0x6c>)
 8009438:	429c      	cmp	r4, r3
 800943a:	d11b      	bne.n	8009474 <_fflush_r+0x58>
 800943c:	686c      	ldr	r4, [r5, #4]
 800943e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0ef      	beq.n	8009426 <_fflush_r+0xa>
 8009446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009448:	07d0      	lsls	r0, r2, #31
 800944a:	d404      	bmi.n	8009456 <_fflush_r+0x3a>
 800944c:	0599      	lsls	r1, r3, #22
 800944e:	d402      	bmi.n	8009456 <_fflush_r+0x3a>
 8009450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009452:	f000 f915 	bl	8009680 <__retarget_lock_acquire_recursive>
 8009456:	4628      	mov	r0, r5
 8009458:	4621      	mov	r1, r4
 800945a:	f7ff ff59 	bl	8009310 <__sflush_r>
 800945e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009460:	07da      	lsls	r2, r3, #31
 8009462:	4605      	mov	r5, r0
 8009464:	d4e0      	bmi.n	8009428 <_fflush_r+0xc>
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	059b      	lsls	r3, r3, #22
 800946a:	d4dd      	bmi.n	8009428 <_fflush_r+0xc>
 800946c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800946e:	f000 f908 	bl	8009682 <__retarget_lock_release_recursive>
 8009472:	e7d9      	b.n	8009428 <_fflush_r+0xc>
 8009474:	4b05      	ldr	r3, [pc, #20]	; (800948c <_fflush_r+0x70>)
 8009476:	429c      	cmp	r4, r3
 8009478:	d101      	bne.n	800947e <_fflush_r+0x62>
 800947a:	68ac      	ldr	r4, [r5, #8]
 800947c:	e7df      	b.n	800943e <_fflush_r+0x22>
 800947e:	4b04      	ldr	r3, [pc, #16]	; (8009490 <_fflush_r+0x74>)
 8009480:	429c      	cmp	r4, r3
 8009482:	bf08      	it	eq
 8009484:	68ec      	ldreq	r4, [r5, #12]
 8009486:	e7da      	b.n	800943e <_fflush_r+0x22>
 8009488:	08009d6c 	.word	0x08009d6c
 800948c:	08009d8c 	.word	0x08009d8c
 8009490:	08009d4c 	.word	0x08009d4c

08009494 <std>:
 8009494:	2300      	movs	r3, #0
 8009496:	b510      	push	{r4, lr}
 8009498:	4604      	mov	r4, r0
 800949a:	e9c0 3300 	strd	r3, r3, [r0]
 800949e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094a2:	6083      	str	r3, [r0, #8]
 80094a4:	8181      	strh	r1, [r0, #12]
 80094a6:	6643      	str	r3, [r0, #100]	; 0x64
 80094a8:	81c2      	strh	r2, [r0, #14]
 80094aa:	6183      	str	r3, [r0, #24]
 80094ac:	4619      	mov	r1, r3
 80094ae:	2208      	movs	r2, #8
 80094b0:	305c      	adds	r0, #92	; 0x5c
 80094b2:	f7fd fb45 	bl	8006b40 <memset>
 80094b6:	4b05      	ldr	r3, [pc, #20]	; (80094cc <std+0x38>)
 80094b8:	6263      	str	r3, [r4, #36]	; 0x24
 80094ba:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <std+0x3c>)
 80094bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <std+0x40>)
 80094c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <std+0x44>)
 80094c4:	6224      	str	r4, [r4, #32]
 80094c6:	6323      	str	r3, [r4, #48]	; 0x30
 80094c8:	bd10      	pop	{r4, pc}
 80094ca:	bf00      	nop
 80094cc:	080097e9 	.word	0x080097e9
 80094d0:	0800980b 	.word	0x0800980b
 80094d4:	08009843 	.word	0x08009843
 80094d8:	08009867 	.word	0x08009867

080094dc <_cleanup_r>:
 80094dc:	4901      	ldr	r1, [pc, #4]	; (80094e4 <_cleanup_r+0x8>)
 80094de:	f000 b8af 	b.w	8009640 <_fwalk_reent>
 80094e2:	bf00      	nop
 80094e4:	0800941d 	.word	0x0800941d

080094e8 <__sfmoreglue>:
 80094e8:	b570      	push	{r4, r5, r6, lr}
 80094ea:	2268      	movs	r2, #104	; 0x68
 80094ec:	1e4d      	subs	r5, r1, #1
 80094ee:	4355      	muls	r5, r2
 80094f0:	460e      	mov	r6, r1
 80094f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094f6:	f7ff fa65 	bl	80089c4 <_malloc_r>
 80094fa:	4604      	mov	r4, r0
 80094fc:	b140      	cbz	r0, 8009510 <__sfmoreglue+0x28>
 80094fe:	2100      	movs	r1, #0
 8009500:	e9c0 1600 	strd	r1, r6, [r0]
 8009504:	300c      	adds	r0, #12
 8009506:	60a0      	str	r0, [r4, #8]
 8009508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800950c:	f7fd fb18 	bl	8006b40 <memset>
 8009510:	4620      	mov	r0, r4
 8009512:	bd70      	pop	{r4, r5, r6, pc}

08009514 <__sfp_lock_acquire>:
 8009514:	4801      	ldr	r0, [pc, #4]	; (800951c <__sfp_lock_acquire+0x8>)
 8009516:	f000 b8b3 	b.w	8009680 <__retarget_lock_acquire_recursive>
 800951a:	bf00      	nop
 800951c:	20000549 	.word	0x20000549

08009520 <__sfp_lock_release>:
 8009520:	4801      	ldr	r0, [pc, #4]	; (8009528 <__sfp_lock_release+0x8>)
 8009522:	f000 b8ae 	b.w	8009682 <__retarget_lock_release_recursive>
 8009526:	bf00      	nop
 8009528:	20000549 	.word	0x20000549

0800952c <__sinit_lock_acquire>:
 800952c:	4801      	ldr	r0, [pc, #4]	; (8009534 <__sinit_lock_acquire+0x8>)
 800952e:	f000 b8a7 	b.w	8009680 <__retarget_lock_acquire_recursive>
 8009532:	bf00      	nop
 8009534:	2000054a 	.word	0x2000054a

08009538 <__sinit_lock_release>:
 8009538:	4801      	ldr	r0, [pc, #4]	; (8009540 <__sinit_lock_release+0x8>)
 800953a:	f000 b8a2 	b.w	8009682 <__retarget_lock_release_recursive>
 800953e:	bf00      	nop
 8009540:	2000054a 	.word	0x2000054a

08009544 <__sinit>:
 8009544:	b510      	push	{r4, lr}
 8009546:	4604      	mov	r4, r0
 8009548:	f7ff fff0 	bl	800952c <__sinit_lock_acquire>
 800954c:	69a3      	ldr	r3, [r4, #24]
 800954e:	b11b      	cbz	r3, 8009558 <__sinit+0x14>
 8009550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009554:	f7ff bff0 	b.w	8009538 <__sinit_lock_release>
 8009558:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800955c:	6523      	str	r3, [r4, #80]	; 0x50
 800955e:	4b13      	ldr	r3, [pc, #76]	; (80095ac <__sinit+0x68>)
 8009560:	4a13      	ldr	r2, [pc, #76]	; (80095b0 <__sinit+0x6c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	62a2      	str	r2, [r4, #40]	; 0x28
 8009566:	42a3      	cmp	r3, r4
 8009568:	bf04      	itt	eq
 800956a:	2301      	moveq	r3, #1
 800956c:	61a3      	streq	r3, [r4, #24]
 800956e:	4620      	mov	r0, r4
 8009570:	f000 f820 	bl	80095b4 <__sfp>
 8009574:	6060      	str	r0, [r4, #4]
 8009576:	4620      	mov	r0, r4
 8009578:	f000 f81c 	bl	80095b4 <__sfp>
 800957c:	60a0      	str	r0, [r4, #8]
 800957e:	4620      	mov	r0, r4
 8009580:	f000 f818 	bl	80095b4 <__sfp>
 8009584:	2200      	movs	r2, #0
 8009586:	60e0      	str	r0, [r4, #12]
 8009588:	2104      	movs	r1, #4
 800958a:	6860      	ldr	r0, [r4, #4]
 800958c:	f7ff ff82 	bl	8009494 <std>
 8009590:	68a0      	ldr	r0, [r4, #8]
 8009592:	2201      	movs	r2, #1
 8009594:	2109      	movs	r1, #9
 8009596:	f7ff ff7d 	bl	8009494 <std>
 800959a:	68e0      	ldr	r0, [r4, #12]
 800959c:	2202      	movs	r2, #2
 800959e:	2112      	movs	r1, #18
 80095a0:	f7ff ff78 	bl	8009494 <std>
 80095a4:	2301      	movs	r3, #1
 80095a6:	61a3      	str	r3, [r4, #24]
 80095a8:	e7d2      	b.n	8009550 <__sinit+0xc>
 80095aa:	bf00      	nop
 80095ac:	080099d4 	.word	0x080099d4
 80095b0:	080094dd 	.word	0x080094dd

080095b4 <__sfp>:
 80095b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b6:	4607      	mov	r7, r0
 80095b8:	f7ff ffac 	bl	8009514 <__sfp_lock_acquire>
 80095bc:	4b1e      	ldr	r3, [pc, #120]	; (8009638 <__sfp+0x84>)
 80095be:	681e      	ldr	r6, [r3, #0]
 80095c0:	69b3      	ldr	r3, [r6, #24]
 80095c2:	b913      	cbnz	r3, 80095ca <__sfp+0x16>
 80095c4:	4630      	mov	r0, r6
 80095c6:	f7ff ffbd 	bl	8009544 <__sinit>
 80095ca:	3648      	adds	r6, #72	; 0x48
 80095cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	d503      	bpl.n	80095dc <__sfp+0x28>
 80095d4:	6833      	ldr	r3, [r6, #0]
 80095d6:	b30b      	cbz	r3, 800961c <__sfp+0x68>
 80095d8:	6836      	ldr	r6, [r6, #0]
 80095da:	e7f7      	b.n	80095cc <__sfp+0x18>
 80095dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095e0:	b9d5      	cbnz	r5, 8009618 <__sfp+0x64>
 80095e2:	4b16      	ldr	r3, [pc, #88]	; (800963c <__sfp+0x88>)
 80095e4:	60e3      	str	r3, [r4, #12]
 80095e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095ea:	6665      	str	r5, [r4, #100]	; 0x64
 80095ec:	f000 f847 	bl	800967e <__retarget_lock_init_recursive>
 80095f0:	f7ff ff96 	bl	8009520 <__sfp_lock_release>
 80095f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095fc:	6025      	str	r5, [r4, #0]
 80095fe:	61a5      	str	r5, [r4, #24]
 8009600:	2208      	movs	r2, #8
 8009602:	4629      	mov	r1, r5
 8009604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009608:	f7fd fa9a 	bl	8006b40 <memset>
 800960c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009614:	4620      	mov	r0, r4
 8009616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009618:	3468      	adds	r4, #104	; 0x68
 800961a:	e7d9      	b.n	80095d0 <__sfp+0x1c>
 800961c:	2104      	movs	r1, #4
 800961e:	4638      	mov	r0, r7
 8009620:	f7ff ff62 	bl	80094e8 <__sfmoreglue>
 8009624:	4604      	mov	r4, r0
 8009626:	6030      	str	r0, [r6, #0]
 8009628:	2800      	cmp	r0, #0
 800962a:	d1d5      	bne.n	80095d8 <__sfp+0x24>
 800962c:	f7ff ff78 	bl	8009520 <__sfp_lock_release>
 8009630:	230c      	movs	r3, #12
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	e7ee      	b.n	8009614 <__sfp+0x60>
 8009636:	bf00      	nop
 8009638:	080099d4 	.word	0x080099d4
 800963c:	ffff0001 	.word	0xffff0001

08009640 <_fwalk_reent>:
 8009640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009644:	4606      	mov	r6, r0
 8009646:	4688      	mov	r8, r1
 8009648:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800964c:	2700      	movs	r7, #0
 800964e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009652:	f1b9 0901 	subs.w	r9, r9, #1
 8009656:	d505      	bpl.n	8009664 <_fwalk_reent+0x24>
 8009658:	6824      	ldr	r4, [r4, #0]
 800965a:	2c00      	cmp	r4, #0
 800965c:	d1f7      	bne.n	800964e <_fwalk_reent+0xe>
 800965e:	4638      	mov	r0, r7
 8009660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009664:	89ab      	ldrh	r3, [r5, #12]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d907      	bls.n	800967a <_fwalk_reent+0x3a>
 800966a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800966e:	3301      	adds	r3, #1
 8009670:	d003      	beq.n	800967a <_fwalk_reent+0x3a>
 8009672:	4629      	mov	r1, r5
 8009674:	4630      	mov	r0, r6
 8009676:	47c0      	blx	r8
 8009678:	4307      	orrs	r7, r0
 800967a:	3568      	adds	r5, #104	; 0x68
 800967c:	e7e9      	b.n	8009652 <_fwalk_reent+0x12>

0800967e <__retarget_lock_init_recursive>:
 800967e:	4770      	bx	lr

08009680 <__retarget_lock_acquire_recursive>:
 8009680:	4770      	bx	lr

08009682 <__retarget_lock_release_recursive>:
 8009682:	4770      	bx	lr

08009684 <__swhatbuf_r>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	460e      	mov	r6, r1
 8009688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968c:	2900      	cmp	r1, #0
 800968e:	b096      	sub	sp, #88	; 0x58
 8009690:	4614      	mov	r4, r2
 8009692:	461d      	mov	r5, r3
 8009694:	da08      	bge.n	80096a8 <__swhatbuf_r+0x24>
 8009696:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	061a      	lsls	r2, r3, #24
 80096a0:	d410      	bmi.n	80096c4 <__swhatbuf_r+0x40>
 80096a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096a6:	e00e      	b.n	80096c6 <__swhatbuf_r+0x42>
 80096a8:	466a      	mov	r2, sp
 80096aa:	f000 f903 	bl	80098b4 <_fstat_r>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	dbf1      	blt.n	8009696 <__swhatbuf_r+0x12>
 80096b2:	9a01      	ldr	r2, [sp, #4]
 80096b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096bc:	425a      	negs	r2, r3
 80096be:	415a      	adcs	r2, r3
 80096c0:	602a      	str	r2, [r5, #0]
 80096c2:	e7ee      	b.n	80096a2 <__swhatbuf_r+0x1e>
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	2000      	movs	r0, #0
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	b016      	add	sp, #88	; 0x58
 80096cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080096d0 <__smakebuf_r>:
 80096d0:	898b      	ldrh	r3, [r1, #12]
 80096d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096d4:	079d      	lsls	r5, r3, #30
 80096d6:	4606      	mov	r6, r0
 80096d8:	460c      	mov	r4, r1
 80096da:	d507      	bpl.n	80096ec <__smakebuf_r+0x1c>
 80096dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	6123      	str	r3, [r4, #16]
 80096e4:	2301      	movs	r3, #1
 80096e6:	6163      	str	r3, [r4, #20]
 80096e8:	b002      	add	sp, #8
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	ab01      	add	r3, sp, #4
 80096ee:	466a      	mov	r2, sp
 80096f0:	f7ff ffc8 	bl	8009684 <__swhatbuf_r>
 80096f4:	9900      	ldr	r1, [sp, #0]
 80096f6:	4605      	mov	r5, r0
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7ff f963 	bl	80089c4 <_malloc_r>
 80096fe:	b948      	cbnz	r0, 8009714 <__smakebuf_r+0x44>
 8009700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009704:	059a      	lsls	r2, r3, #22
 8009706:	d4ef      	bmi.n	80096e8 <__smakebuf_r+0x18>
 8009708:	f023 0303 	bic.w	r3, r3, #3
 800970c:	f043 0302 	orr.w	r3, r3, #2
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	e7e3      	b.n	80096dc <__smakebuf_r+0xc>
 8009714:	4b0d      	ldr	r3, [pc, #52]	; (800974c <__smakebuf_r+0x7c>)
 8009716:	62b3      	str	r3, [r6, #40]	; 0x28
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	6020      	str	r0, [r4, #0]
 800971c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	9b00      	ldr	r3, [sp, #0]
 8009724:	6163      	str	r3, [r4, #20]
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	6120      	str	r0, [r4, #16]
 800972a:	b15b      	cbz	r3, 8009744 <__smakebuf_r+0x74>
 800972c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009730:	4630      	mov	r0, r6
 8009732:	f000 f8d1 	bl	80098d8 <_isatty_r>
 8009736:	b128      	cbz	r0, 8009744 <__smakebuf_r+0x74>
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	f023 0303 	bic.w	r3, r3, #3
 800973e:	f043 0301 	orr.w	r3, r3, #1
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	89a0      	ldrh	r0, [r4, #12]
 8009746:	4305      	orrs	r5, r0
 8009748:	81a5      	strh	r5, [r4, #12]
 800974a:	e7cd      	b.n	80096e8 <__smakebuf_r+0x18>
 800974c:	080094dd 	.word	0x080094dd

08009750 <_malloc_usable_size_r>:
 8009750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009754:	1f18      	subs	r0, r3, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	bfbc      	itt	lt
 800975a:	580b      	ldrlt	r3, [r1, r0]
 800975c:	18c0      	addlt	r0, r0, r3
 800975e:	4770      	bx	lr

08009760 <_raise_r>:
 8009760:	291f      	cmp	r1, #31
 8009762:	b538      	push	{r3, r4, r5, lr}
 8009764:	4604      	mov	r4, r0
 8009766:	460d      	mov	r5, r1
 8009768:	d904      	bls.n	8009774 <_raise_r+0x14>
 800976a:	2316      	movs	r3, #22
 800976c:	6003      	str	r3, [r0, #0]
 800976e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009776:	b112      	cbz	r2, 800977e <_raise_r+0x1e>
 8009778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800977c:	b94b      	cbnz	r3, 8009792 <_raise_r+0x32>
 800977e:	4620      	mov	r0, r4
 8009780:	f000 f830 	bl	80097e4 <_getpid_r>
 8009784:	462a      	mov	r2, r5
 8009786:	4601      	mov	r1, r0
 8009788:	4620      	mov	r0, r4
 800978a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800978e:	f000 b817 	b.w	80097c0 <_kill_r>
 8009792:	2b01      	cmp	r3, #1
 8009794:	d00a      	beq.n	80097ac <_raise_r+0x4c>
 8009796:	1c59      	adds	r1, r3, #1
 8009798:	d103      	bne.n	80097a2 <_raise_r+0x42>
 800979a:	2316      	movs	r3, #22
 800979c:	6003      	str	r3, [r0, #0]
 800979e:	2001      	movs	r0, #1
 80097a0:	e7e7      	b.n	8009772 <_raise_r+0x12>
 80097a2:	2400      	movs	r4, #0
 80097a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097a8:	4628      	mov	r0, r5
 80097aa:	4798      	blx	r3
 80097ac:	2000      	movs	r0, #0
 80097ae:	e7e0      	b.n	8009772 <_raise_r+0x12>

080097b0 <raise>:
 80097b0:	4b02      	ldr	r3, [pc, #8]	; (80097bc <raise+0xc>)
 80097b2:	4601      	mov	r1, r0
 80097b4:	6818      	ldr	r0, [r3, #0]
 80097b6:	f7ff bfd3 	b.w	8009760 <_raise_r>
 80097ba:	bf00      	nop
 80097bc:	2000000c 	.word	0x2000000c

080097c0 <_kill_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d07      	ldr	r5, [pc, #28]	; (80097e0 <_kill_r+0x20>)
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	4611      	mov	r1, r2
 80097cc:	602b      	str	r3, [r5, #0]
 80097ce:	f7f7 ff37 	bl	8001640 <_kill>
 80097d2:	1c43      	adds	r3, r0, #1
 80097d4:	d102      	bne.n	80097dc <_kill_r+0x1c>
 80097d6:	682b      	ldr	r3, [r5, #0]
 80097d8:	b103      	cbz	r3, 80097dc <_kill_r+0x1c>
 80097da:	6023      	str	r3, [r4, #0]
 80097dc:	bd38      	pop	{r3, r4, r5, pc}
 80097de:	bf00      	nop
 80097e0:	20000544 	.word	0x20000544

080097e4 <_getpid_r>:
 80097e4:	f7f7 bf24 	b.w	8001630 <_getpid>

080097e8 <__sread>:
 80097e8:	b510      	push	{r4, lr}
 80097ea:	460c      	mov	r4, r1
 80097ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f0:	f000 f894 	bl	800991c <_read_r>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	bfab      	itete	ge
 80097f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097fa:	89a3      	ldrhlt	r3, [r4, #12]
 80097fc:	181b      	addge	r3, r3, r0
 80097fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009802:	bfac      	ite	ge
 8009804:	6563      	strge	r3, [r4, #84]	; 0x54
 8009806:	81a3      	strhlt	r3, [r4, #12]
 8009808:	bd10      	pop	{r4, pc}

0800980a <__swrite>:
 800980a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980e:	461f      	mov	r7, r3
 8009810:	898b      	ldrh	r3, [r1, #12]
 8009812:	05db      	lsls	r3, r3, #23
 8009814:	4605      	mov	r5, r0
 8009816:	460c      	mov	r4, r1
 8009818:	4616      	mov	r6, r2
 800981a:	d505      	bpl.n	8009828 <__swrite+0x1e>
 800981c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009820:	2302      	movs	r3, #2
 8009822:	2200      	movs	r2, #0
 8009824:	f000 f868 	bl	80098f8 <_lseek_r>
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800982e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009832:	81a3      	strh	r3, [r4, #12]
 8009834:	4632      	mov	r2, r6
 8009836:	463b      	mov	r3, r7
 8009838:	4628      	mov	r0, r5
 800983a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800983e:	f000 b817 	b.w	8009870 <_write_r>

08009842 <__sseek>:
 8009842:	b510      	push	{r4, lr}
 8009844:	460c      	mov	r4, r1
 8009846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984a:	f000 f855 	bl	80098f8 <_lseek_r>
 800984e:	1c43      	adds	r3, r0, #1
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	bf15      	itete	ne
 8009854:	6560      	strne	r0, [r4, #84]	; 0x54
 8009856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800985a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800985e:	81a3      	strheq	r3, [r4, #12]
 8009860:	bf18      	it	ne
 8009862:	81a3      	strhne	r3, [r4, #12]
 8009864:	bd10      	pop	{r4, pc}

08009866 <__sclose>:
 8009866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986a:	f000 b813 	b.w	8009894 <_close_r>
	...

08009870 <_write_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4d07      	ldr	r5, [pc, #28]	; (8009890 <_write_r+0x20>)
 8009874:	4604      	mov	r4, r0
 8009876:	4608      	mov	r0, r1
 8009878:	4611      	mov	r1, r2
 800987a:	2200      	movs	r2, #0
 800987c:	602a      	str	r2, [r5, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	f7f7 ff15 	bl	80016ae <_write>
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	d102      	bne.n	800988e <_write_r+0x1e>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	b103      	cbz	r3, 800988e <_write_r+0x1e>
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	20000544 	.word	0x20000544

08009894 <_close_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	4d06      	ldr	r5, [pc, #24]	; (80098b0 <_close_r+0x1c>)
 8009898:	2300      	movs	r3, #0
 800989a:	4604      	mov	r4, r0
 800989c:	4608      	mov	r0, r1
 800989e:	602b      	str	r3, [r5, #0]
 80098a0:	f7f7 ff21 	bl	80016e6 <_close>
 80098a4:	1c43      	adds	r3, r0, #1
 80098a6:	d102      	bne.n	80098ae <_close_r+0x1a>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	b103      	cbz	r3, 80098ae <_close_r+0x1a>
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	bd38      	pop	{r3, r4, r5, pc}
 80098b0:	20000544 	.word	0x20000544

080098b4 <_fstat_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4d07      	ldr	r5, [pc, #28]	; (80098d4 <_fstat_r+0x20>)
 80098b8:	2300      	movs	r3, #0
 80098ba:	4604      	mov	r4, r0
 80098bc:	4608      	mov	r0, r1
 80098be:	4611      	mov	r1, r2
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	f7f7 ff1c 	bl	80016fe <_fstat>
 80098c6:	1c43      	adds	r3, r0, #1
 80098c8:	d102      	bne.n	80098d0 <_fstat_r+0x1c>
 80098ca:	682b      	ldr	r3, [r5, #0]
 80098cc:	b103      	cbz	r3, 80098d0 <_fstat_r+0x1c>
 80098ce:	6023      	str	r3, [r4, #0]
 80098d0:	bd38      	pop	{r3, r4, r5, pc}
 80098d2:	bf00      	nop
 80098d4:	20000544 	.word	0x20000544

080098d8 <_isatty_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d06      	ldr	r5, [pc, #24]	; (80098f4 <_isatty_r+0x1c>)
 80098dc:	2300      	movs	r3, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	602b      	str	r3, [r5, #0]
 80098e4:	f7f7 ff1b 	bl	800171e <_isatty>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_isatty_r+0x1a>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_isatty_r+0x1a>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	20000544 	.word	0x20000544

080098f8 <_lseek_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	; (8009918 <_lseek_r+0x20>)
 80098fc:	4604      	mov	r4, r0
 80098fe:	4608      	mov	r0, r1
 8009900:	4611      	mov	r1, r2
 8009902:	2200      	movs	r2, #0
 8009904:	602a      	str	r2, [r5, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	f7f7 ff14 	bl	8001734 <_lseek>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_lseek_r+0x1e>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_lseek_r+0x1e>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	20000544 	.word	0x20000544

0800991c <_read_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d07      	ldr	r5, [pc, #28]	; (800993c <_read_r+0x20>)
 8009920:	4604      	mov	r4, r0
 8009922:	4608      	mov	r0, r1
 8009924:	4611      	mov	r1, r2
 8009926:	2200      	movs	r2, #0
 8009928:	602a      	str	r2, [r5, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	f7f7 fea2 	bl	8001674 <_read>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_read_r+0x1e>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_read_r+0x1e>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	20000544 	.word	0x20000544

08009940 <_init>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr

0800994c <_fini>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr
