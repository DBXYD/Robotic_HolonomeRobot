
holonome_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c354  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800c538  0800c538  0001c538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca6c  0800ca6c  000202bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca6c  0800ca6c  0001ca6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca74  0800ca74  000202bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca74  0800ca74  0001ca74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca78  0800ca78  0001ca78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  0800ca7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200002bc  0800cd38  000202bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  0800cd38  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5f8  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a64  00000000  00000000  0003d8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001780  00000000  00000000  00041348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  00042ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002165e  00000000  00000000  000440b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4f2  00000000  00000000  0006570e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd451  00000000  00000000  00082c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150051  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007454  00000000  00000000  001500a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002bc 	.word	0x200002bc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c51c 	.word	0x0800c51c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002c0 	.word	0x200002c0
 800021c:	0800c51c 	.word	0x0800c51c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_GPIO_Init+0xbc>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f002 fc2f 	bl	80037c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CSN_Pin|LED_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <MX_GPIO_Init+0xc0>)
 8000f6e:	f002 fc29 	bl	80037c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin;
 8000f72:	2320      	movs	r3, #32
 8000f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CE_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f002 fa98 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|LED_Pin;
 8000f90:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_GPIO_Init+0xc0>)
 8000faa:	f002 fa89 	bl	80034c0 <HAL_GPIO_Init>

}
 8000fae:	bf00      	nop
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <MX_I2C1_Init+0x78>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <MX_I2C1_Init+0x7c>)
 8000fce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ffc:	f002 fbfa 	bl	80037f4 <HAL_I2C_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001006:	f000 fcfb 	bl	8001a00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <MX_I2C1_Init+0x74>)
 800100e:	f002 fc80 	bl	8003912 <HAL_I2CEx_ConfigAnalogFilter>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001018:	f000 fcf2 	bl	8001a00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800101c:	2100      	movs	r1, #0
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_I2C1_Init+0x74>)
 8001020:	f002 fcc2 	bl	80039a8 <HAL_I2CEx_ConfigDigitalFilter>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800102a:	f000 fce9 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200002d8 	.word	0x200002d8
 8001038:	40005400 	.word	0x40005400
 800103c:	30a0a7fb 	.word	0x30a0a7fb

08001040 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b09c      	sub	sp, #112	; 0x70
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	2244      	movs	r2, #68	; 0x44
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f008 fb6b 	bl	800973c <memset>
  if(i2cHandle->Instance==I2C1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <HAL_I2C_MspInit+0xe0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d153      	bne.n	8001118 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001070:	2340      	movs	r3, #64	; 0x40
 8001072:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fae9 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f000 fcba 	bl	8001a00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	4a24      	ldr	r2, [pc, #144]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 80010aa:	f043 0302 	orr.w	r3, r3, #2
 80010ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c2:	2312      	movs	r3, #18
 80010c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ce:	2304      	movs	r3, #4
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f002 f9f0 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	2312      	movs	r3, #18
 80010e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f0:	2304      	movs	r3, #4
 80010f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010f8:	4619      	mov	r1, r3
 80010fa:	480b      	ldr	r0, [pc, #44]	; (8001128 <HAL_I2C_MspInit+0xe8>)
 80010fc:	f002 f9e0 	bl	80034c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 8001106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800110a:	6593      	str	r3, [r2, #88]	; 0x58
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_I2C_MspInit+0xe4>)
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	3770      	adds	r7, #112	; 0x70
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40005400 	.word	0x40005400
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400

0800112c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_UART_RxCpltCallback+0x2c>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartRxBuffer, 1, 100);
 800113a:	2364      	movs	r3, #100	; 0x64
 800113c:	2201      	movs	r2, #1
 800113e:	4907      	ldr	r1, [pc, #28]	; (800115c <HAL_UART_RxCpltCallback+0x30>)
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <HAL_UART_RxCpltCallback+0x34>)
 8001142:	f006 facc 	bl	80076de <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001146:	2201      	movs	r2, #1
 8001148:	4904      	ldr	r1, [pc, #16]	; (800115c <HAL_UART_RxCpltCallback+0x30>)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_UART_RxCpltCallback+0x34>)
 800114c:	f006 fb5e 	bl	800780c <HAL_UART_Receive_IT>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000388 	.word	0x20000388
 800115c:	20000364 	.word	0x20000364
 8001160:	200005bc 	.word	0x200005bc

08001164 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int stringLength;
	int inc = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
	int reg = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
	int mode = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]

	int increment=1;
 8001176:	2301      	movs	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800117a:	f001 ffa8 	bl	80030ce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800117e:	f000 faf5 	bl	800176c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001182:	f7ff febb 	bl	8000efc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001186:	f001 fecd 	bl	8002f24 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800118a:	f7ff ff19 	bl	8000fc0 <MX_I2C1_Init>
	MX_TIM1_Init();
 800118e:	f001 fb77 	bl	8002880 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001192:	f001 fc3d 	bl	8002a10 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001196:	f001 fc8f 	bl	8002ab8 <MX_TIM3_Init>
	MX_TIM4_Init();
 800119a:	f001 fce3 	bl	8002b64 <MX_TIM4_Init>
	MX_SPI1_Init();
 800119e:	f001 f937 	bl	8002410 <MX_SPI1_Init>
	MX_TIM7_Init();
 80011a2:	f001 fd35 	bl	8002c10 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80011a6:	2201      	movs	r2, #1
 80011a8:	49bc      	ldr	r1, [pc, #752]	; (800149c <main+0x338>)
 80011aa:	48bd      	ldr	r0, [pc, #756]	; (80014a0 <main+0x33c>)
 80011ac:	f006 fb2e 	bl	800780c <HAL_UART_Receive_IT>
	stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"*** Starting ***\r\n");
 80011b0:	4abc      	ldr	r2, [pc, #752]	; (80014a4 <main+0x340>)
 80011b2:	2140      	movs	r1, #64	; 0x40
 80011b4:	48bc      	ldr	r0, [pc, #752]	; (80014a8 <main+0x344>)
 80011b6:	f008 ff33 	bl	800a020 <sniprintf>
 80011ba:	6038      	str	r0, [r7, #0]
	HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	2364      	movs	r3, #100	; 0x64
 80011c2:	49b9      	ldr	r1, [pc, #740]	; (80014a8 <main+0x344>)
 80011c4:	48b6      	ldr	r0, [pc, #728]	; (80014a0 <main+0x33c>)
 80011c6:	f006 fa8a 	bl	80076de <HAL_UART_Transmit>
	//MPU6050_Init();
	//NRF24L01_Init();
	__HAL_TIM_SET_COUNTER(&htim2,37767);
 80011ca:	4bb8      	ldr	r3, [pc, #736]	; (80014ac <main+0x348>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f249 3287 	movw	r2, #37767	; 0x9387
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3,37767);
 80011d4:	4bb6      	ldr	r3, [pc, #728]	; (80014b0 <main+0x34c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f249 3287 	movw	r2, #37767	; 0x9387
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,37767);
 80011de:	4bb5      	ldr	r3, [pc, #724]	; (80014b4 <main+0x350>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f249 3287 	movw	r2, #37767	; 0x9387
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start(&htim1);
 80011e8:	48b3      	ldr	r0, [pc, #716]	; (80014b8 <main+0x354>)
 80011ea:	f004 fb93 	bl	8005914 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 80011ee:	48b3      	ldr	r0, [pc, #716]	; (80014bc <main+0x358>)
 80011f0:	f004 fbf2 	bl	80059d8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80011f4:	213c      	movs	r1, #60	; 0x3c
 80011f6:	48ad      	ldr	r0, [pc, #692]	; (80014ac <main+0x348>)
 80011f8:	f004 fef6 	bl	8005fe8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80011fc:	213c      	movs	r1, #60	; 0x3c
 80011fe:	48ac      	ldr	r0, [pc, #688]	; (80014b0 <main+0x34c>)
 8001200:	f004 fef2 	bl	8005fe8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001204:	213c      	movs	r1, #60	; 0x3c
 8001206:	48ab      	ldr	r0, [pc, #684]	; (80014b4 <main+0x350>)
 8001208:	f004 feee 	bl	8005fe8 <HAL_TIM_Encoder_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		motorA.speed64 = 1500;
 800120c:	4bac      	ldr	r3, [pc, #688]	; (80014c0 <main+0x35c>)
 800120e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001212:	60da      	str	r2, [r3, #12]
		motorB.speed64 = 549;
 8001214:	4bab      	ldr	r3, [pc, #684]	; (80014c4 <main+0x360>)
 8001216:	f240 2225 	movw	r2, #549	; 0x225
 800121a:	60da      	str	r2, [r3, #12]
		motorC.speed64 = -2049;
 800121c:	4baa      	ldr	r3, [pc, #680]	; (80014c8 <main+0x364>)
 800121e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001222:	60da      	str	r2, [r3, #12]
		HAL_Delay(1000);
 8001224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001228:	f001 ff88 	bl	800313c <HAL_Delay>
		motorA.speed64 = 1500;
 800122c:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <main+0x35c>)
 800122e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001232:	60da      	str	r2, [r3, #12]
		motorB.speed64 = 1500;
 8001234:	4ba3      	ldr	r3, [pc, #652]	; (80014c4 <main+0x360>)
 8001236:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800123a:	60da      	str	r2, [r3, #12]
		motorC.speed64 = 1500;
 800123c:	4ba2      	ldr	r3, [pc, #648]	; (80014c8 <main+0x364>)
 800123e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001242:	60da      	str	r2, [r3, #12]
		HAL_Delay(1000);
 8001244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001248:	f001 ff78 	bl	800313c <HAL_Delay>
		motorA.speed64 = -1500;
 800124c:	4b9c      	ldr	r3, [pc, #624]	; (80014c0 <main+0x35c>)
 800124e:	4a9f      	ldr	r2, [pc, #636]	; (80014cc <main+0x368>)
 8001250:	60da      	str	r2, [r3, #12]
		motorB.speed64 = -549;
 8001252:	4b9c      	ldr	r3, [pc, #624]	; (80014c4 <main+0x360>)
 8001254:	f46f 7209 	mvn.w	r2, #548	; 0x224
 8001258:	60da      	str	r2, [r3, #12]
		motorC.speed64 = 2049;
 800125a:	4b9b      	ldr	r3, [pc, #620]	; (80014c8 <main+0x364>)
 800125c:	f640 0201 	movw	r2, #2049	; 0x801
 8001260:	60da      	str	r2, [r3, #12]
		HAL_Delay(1000);
 8001262:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001266:	f001 ff69 	bl	800313c <HAL_Delay>
		motorA.speed64 = -1500;
 800126a:	4b95      	ldr	r3, [pc, #596]	; (80014c0 <main+0x35c>)
 800126c:	4a97      	ldr	r2, [pc, #604]	; (80014cc <main+0x368>)
 800126e:	60da      	str	r2, [r3, #12]
		motorB.speed64 = -1500;
 8001270:	4b94      	ldr	r3, [pc, #592]	; (80014c4 <main+0x360>)
 8001272:	4a96      	ldr	r2, [pc, #600]	; (80014cc <main+0x368>)
 8001274:	60da      	str	r2, [r3, #12]
		motorC.speed64 = -1500;
 8001276:	4b94      	ldr	r3, [pc, #592]	; (80014c8 <main+0x364>)
 8001278:	4a94      	ldr	r2, [pc, #592]	; (80014cc <main+0x368>)
 800127a:	60da      	str	r2, [r3, #12]
		HAL_Delay(1000);
 800127c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001280:	f001 ff5c 	bl	800313c <HAL_Delay>
		HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
		 */
		/****************************************************************************************************************/
		/* End -- Write register of NRF24L01 																			*/
		/****************************************************************************************************************/
		if(uartRxReceived){
 8001284:	4b92      	ldr	r3, [pc, #584]	; (80014d0 <main+0x36c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0bf      	beq.n	800120c <main+0xa8>
			switch(uartRxBuffer[0]){
 800128c:	4b83      	ldr	r3, [pc, #524]	; (800149c <main+0x338>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b2b      	subs	r3, #43	; 0x2b
 8001292:	2b49      	cmp	r3, #73	; 0x49
 8001294:	f200 824f 	bhi.w	8001736 <main+0x5d2>
 8001298:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <main+0x13c>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	080015d9 	.word	0x080015d9
 80012a4:	08001737 	.word	0x08001737
 80012a8:	080015e5 	.word	0x080015e5
 80012ac:	08001737 	.word	0x08001737
 80012b0:	08001737 	.word	0x08001737
 80012b4:	08001711 	.word	0x08001711
 80012b8:	080015f1 	.word	0x080015f1
 80012bc:	08001737 	.word	0x08001737
 80012c0:	08001621 	.word	0x08001621
 80012c4:	08001651 	.word	0x08001651
 80012c8:	08001737 	.word	0x08001737
 80012cc:	08001681 	.word	0x08001681
 80012d0:	080016b1 	.word	0x080016b1
 80012d4:	08001737 	.word	0x08001737
 80012d8:	080016e1 	.word	0x080016e1
 80012dc:	08001737 	.word	0x08001737
 80012e0:	08001737 	.word	0x08001737
 80012e4:	08001737 	.word	0x08001737
 80012e8:	08001737 	.word	0x08001737
 80012ec:	08001737 	.word	0x08001737
 80012f0:	08001737 	.word	0x08001737
 80012f4:	08001737 	.word	0x08001737
 80012f8:	08001737 	.word	0x08001737
 80012fc:	08001737 	.word	0x08001737
 8001300:	08001737 	.word	0x08001737
 8001304:	08001737 	.word	0x08001737
 8001308:	08001737 	.word	0x08001737
 800130c:	08001737 	.word	0x08001737
 8001310:	08001737 	.word	0x08001737
 8001314:	08001737 	.word	0x08001737
 8001318:	08001737 	.word	0x08001737
 800131c:	08001737 	.word	0x08001737
 8001320:	08001737 	.word	0x08001737
 8001324:	08001737 	.word	0x08001737
 8001328:	08001737 	.word	0x08001737
 800132c:	08001737 	.word	0x08001737
 8001330:	08001737 	.word	0x08001737
 8001334:	08001737 	.word	0x08001737
 8001338:	08001737 	.word	0x08001737
 800133c:	08001737 	.word	0x08001737
 8001340:	08001737 	.word	0x08001737
 8001344:	08001737 	.word	0x08001737
 8001348:	08001737 	.word	0x08001737
 800134c:	08001737 	.word	0x08001737
 8001350:	08001737 	.word	0x08001737
 8001354:	08001737 	.word	0x08001737
 8001358:	08001737 	.word	0x08001737
 800135c:	08001737 	.word	0x08001737
 8001360:	08001737 	.word	0x08001737
 8001364:	08001737 	.word	0x08001737
 8001368:	08001737 	.word	0x08001737
 800136c:	08001737 	.word	0x08001737
 8001370:	08001737 	.word	0x08001737
 8001374:	08001737 	.word	0x08001737
 8001378:	08001737 	.word	0x08001737
 800137c:	08001737 	.word	0x08001737
 8001380:	08001737 	.word	0x08001737
 8001384:	08001737 	.word	0x08001737
 8001388:	08001737 	.word	0x08001737
 800138c:	08001737 	.word	0x08001737
 8001390:	08001737 	.word	0x08001737
 8001394:	08001737 	.word	0x08001737
 8001398:	08001737 	.word	0x08001737
 800139c:	08001737 	.word	0x08001737
 80013a0:	08001737 	.word	0x08001737
 80013a4:	08001737 	.word	0x08001737
 80013a8:	08001737 	.word	0x08001737
 80013ac:	08001737 	.word	0x08001737
 80013b0:	08001737 	.word	0x08001737
 80013b4:	080014f9 	.word	0x080014f9
 80013b8:	08001737 	.word	0x08001737
 80013bc:	080013f1 	.word	0x080013f1
 80013c0:	0800141b 	.word	0x0800141b
 80013c4:	080013c9 	.word	0x080013c9
			case 't' :
				stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\nSet Tx Mode\r\n");
 80013c8:	4a42      	ldr	r2, [pc, #264]	; (80014d4 <main+0x370>)
 80013ca:	2140      	movs	r1, #64	; 0x40
 80013cc:	4836      	ldr	r0, [pc, #216]	; (80014a8 <main+0x344>)
 80013ce:	f008 fe27 	bl	800a020 <sniprintf>
 80013d2:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	4933      	ldr	r1, [pc, #204]	; (80014a8 <main+0x344>)
 80013dc:	4830      	ldr	r0, [pc, #192]	; (80014a0 <main+0x33c>)
 80013de:	f006 f97e 	bl	80076de <HAL_UART_Transmit>
				mode = 2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
				NRF24L01_SetTxMode(txAddr, 10);
 80013e6:	210a      	movs	r1, #10
 80013e8:	483b      	ldr	r0, [pc, #236]	; (80014d8 <main+0x374>)
 80013ea:	f000 fe8c 	bl	8002106 <NRF24L01_SetTxMode>
				break;
 80013ee:	e1a3      	b.n	8001738 <main+0x5d4>
			case 'r' :
				stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\nSet Rx Mode\r\n");
 80013f0:	4a3a      	ldr	r2, [pc, #232]	; (80014dc <main+0x378>)
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	482c      	ldr	r0, [pc, #176]	; (80014a8 <main+0x344>)
 80013f6:	f008 fe13 	bl	800a020 <sniprintf>
 80013fa:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b29a      	uxth	r2, r3
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	4929      	ldr	r1, [pc, #164]	; (80014a8 <main+0x344>)
 8001404:	4826      	ldr	r0, [pc, #152]	; (80014a0 <main+0x33c>)
 8001406:	f006 f96a 	bl	80076de <HAL_UART_Transmit>
				mode = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
				NRF24L01_SetRxMode(rxAddrP0, 10, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	210a      	movs	r1, #10
 8001412:	4833      	ldr	r0, [pc, #204]	; (80014e0 <main+0x37c>)
 8001414:	f000 feaa 	bl	800216c <NRF24L01_SetRxMode>
				break;
 8001418:	e18e      	b.n	8001738 <main+0x5d4>
			case 's' :
				if(mode!=2){
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d00d      	beq.n	800143c <main+0x2d8>
					stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\nSet in Tx Mode before sending data\r\n");
 8001420:	4a30      	ldr	r2, [pc, #192]	; (80014e4 <main+0x380>)
 8001422:	2140      	movs	r1, #64	; 0x40
 8001424:	4820      	ldr	r0, [pc, #128]	; (80014a8 <main+0x344>)
 8001426:	f008 fdfb 	bl	800a020 <sniprintf>
 800142a:	6038      	str	r0, [r7, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b29a      	uxth	r2, r3
 8001430:	2364      	movs	r3, #100	; 0x64
 8001432:	491d      	ldr	r1, [pc, #116]	; (80014a8 <main+0x344>)
 8001434:	481a      	ldr	r0, [pc, #104]	; (80014a0 <main+0x33c>)
 8001436:	f006 f952 	bl	80076de <HAL_UART_Transmit>
						stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\Transmission Error\r\n");
						HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
					}

				}
				break;
 800143a:	e17d      	b.n	8001738 <main+0x5d4>
					stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\nSend data\r\n");
 800143c:	4a2a      	ldr	r2, [pc, #168]	; (80014e8 <main+0x384>)
 800143e:	2140      	movs	r1, #64	; 0x40
 8001440:	4819      	ldr	r0, [pc, #100]	; (80014a8 <main+0x344>)
 8001442:	f008 fded 	bl	800a020 <sniprintf>
 8001446:	6038      	str	r0, [r7, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b29a      	uxth	r2, r3
 800144c:	2364      	movs	r3, #100	; 0x64
 800144e:	4916      	ldr	r1, [pc, #88]	; (80014a8 <main+0x344>)
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <main+0x33c>)
 8001452:	f006 f944 	bl	80076de <HAL_UART_Transmit>
					if(NRF24L01_WritePayload(nrf24TxPayload, sizeof(nrf24TxPayload))==HAL_OK){
 8001456:	2119      	movs	r1, #25
 8001458:	4824      	ldr	r0, [pc, #144]	; (80014ec <main+0x388>)
 800145a:	f000 ff33 	bl	80022c4 <NRF24L01_WritePayload>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10d      	bne.n	8001480 <main+0x31c>
						stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\nTransmission Successful\r\n");
 8001464:	4a22      	ldr	r2, [pc, #136]	; (80014f0 <main+0x38c>)
 8001466:	2140      	movs	r1, #64	; 0x40
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <main+0x344>)
 800146a:	f008 fdd9 	bl	800a020 <sniprintf>
 800146e:	6038      	str	r0, [r7, #0]
						HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b29a      	uxth	r2, r3
 8001474:	2364      	movs	r3, #100	; 0x64
 8001476:	490c      	ldr	r1, [pc, #48]	; (80014a8 <main+0x344>)
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <main+0x33c>)
 800147a:	f006 f930 	bl	80076de <HAL_UART_Transmit>
				break;
 800147e:	e15b      	b.n	8001738 <main+0x5d4>
						stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\Transmission Error\r\n");
 8001480:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <main+0x390>)
 8001482:	2140      	movs	r1, #64	; 0x40
 8001484:	4808      	ldr	r0, [pc, #32]	; (80014a8 <main+0x344>)
 8001486:	f008 fdcb 	bl	800a020 <sniprintf>
 800148a:	6038      	str	r0, [r7, #0]
						HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b29a      	uxth	r2, r3
 8001490:	2364      	movs	r3, #100	; 0x64
 8001492:	4905      	ldr	r1, [pc, #20]	; (80014a8 <main+0x344>)
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <main+0x33c>)
 8001496:	f006 f922 	bl	80076de <HAL_UART_Transmit>
				break;
 800149a:	e14d      	b.n	8001738 <main+0x5d4>
 800149c:	20000364 	.word	0x20000364
 80014a0:	200005bc 	.word	0x200005bc
 80014a4:	0800c538 	.word	0x0800c538
 80014a8:	20000324 	.word	0x20000324
 80014ac:	2000048c 	.word	0x2000048c
 80014b0:	200004d8 	.word	0x200004d8
 80014b4:	20000524 	.word	0x20000524
 80014b8:	20000440 	.word	0x20000440
 80014bc:	20000570 	.word	0x20000570
 80014c0:	2000002c 	.word	0x2000002c
 80014c4:	20000068 	.word	0x20000068
 80014c8:	200000a4 	.word	0x200000a4
 80014cc:	fffffa24 	.word	0xfffffa24
 80014d0:	20000388 	.word	0x20000388
 80014d4:	0800c54c 	.word	0x0800c54c
 80014d8:	20000008 	.word	0x20000008
 80014dc:	0800c55c 	.word	0x0800c55c
 80014e0:	20000000 	.word	0x20000000
 80014e4:	0800c56c 	.word	0x0800c56c
 80014e8:	0800c594 	.word	0x0800c594
 80014ec:	20000010 	.word	0x20000010
 80014f0:	0800c5a4 	.word	0x0800c5a4
 80014f4:	0800c5c0 	.word	0x0800c5c0
			case 'p' :
				if(mode!=1){
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d00d      	beq.n	800151a <main+0x3b6>
					stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\nSet in Rx Mode before receving data\r\n");
 80014fe:	4a90      	ldr	r2, [pc, #576]	; (8001740 <main+0x5dc>)
 8001500:	2140      	movs	r1, #64	; 0x40
 8001502:	4890      	ldr	r0, [pc, #576]	; (8001744 <main+0x5e0>)
 8001504:	f008 fd8c 	bl	800a020 <sniprintf>
 8001508:	6038      	str	r0, [r7, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b29a      	uxth	r2, r3
 800150e:	2364      	movs	r3, #100	; 0x64
 8001510:	498c      	ldr	r1, [pc, #560]	; (8001744 <main+0x5e0>)
 8001512:	488d      	ldr	r0, [pc, #564]	; (8001748 <main+0x5e4>)
 8001514:	f006 f8e3 	bl	80076de <HAL_UART_Transmit>
 8001518:	e043      	b.n	80015a2 <main+0x43e>
				}
				else if(NF24L01_IsDataAvailable(0)==HAL_OK){
 800151a:	2000      	movs	r0, #0
 800151c:	f000 ff56 	bl	80023cc <NF24L01_IsDataAvailable>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d11f      	bne.n	8001566 <main+0x402>
					NRF24L01_ReadPayload(nrf24RxPayload, 32);
 8001526:	2120      	movs	r1, #32
 8001528:	4888      	ldr	r0, [pc, #544]	; (800174c <main+0x5e8>)
 800152a:	f000 ff15 	bl	8002358 <NRF24L01_ReadPayload>
					stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\nData received\r\n");
 800152e:	4a88      	ldr	r2, [pc, #544]	; (8001750 <main+0x5ec>)
 8001530:	2140      	movs	r1, #64	; 0x40
 8001532:	4884      	ldr	r0, [pc, #528]	; (8001744 <main+0x5e0>)
 8001534:	f008 fd74 	bl	800a020 <sniprintf>
 8001538:	6038      	str	r0, [r7, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b29a      	uxth	r2, r3
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	4980      	ldr	r1, [pc, #512]	; (8001744 <main+0x5e0>)
 8001542:	4881      	ldr	r0, [pc, #516]	; (8001748 <main+0x5e4>)
 8001544:	f006 f8cb 	bl	80076de <HAL_UART_Transmit>
					stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"%s",nrf24RxPayload);
 8001548:	4b80      	ldr	r3, [pc, #512]	; (800174c <main+0x5e8>)
 800154a:	4a82      	ldr	r2, [pc, #520]	; (8001754 <main+0x5f0>)
 800154c:	2140      	movs	r1, #64	; 0x40
 800154e:	487d      	ldr	r0, [pc, #500]	; (8001744 <main+0x5e0>)
 8001550:	f008 fd66 	bl	800a020 <sniprintf>
 8001554:	6038      	str	r0, [r7, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b29a      	uxth	r2, r3
 800155a:	2364      	movs	r3, #100	; 0x64
 800155c:	4979      	ldr	r1, [pc, #484]	; (8001744 <main+0x5e0>)
 800155e:	487a      	ldr	r0, [pc, #488]	; (8001748 <main+0x5e4>)
 8001560:	f006 f8bd 	bl	80076de <HAL_UART_Transmit>
 8001564:	e01d      	b.n	80015a2 <main+0x43e>
				}
				else{
					stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\nNo Data received\r\n");
 8001566:	4a7c      	ldr	r2, [pc, #496]	; (8001758 <main+0x5f4>)
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	4876      	ldr	r0, [pc, #472]	; (8001744 <main+0x5e0>)
 800156c:	f008 fd58 	bl	800a020 <sniprintf>
 8001570:	6038      	str	r0, [r7, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b29a      	uxth	r2, r3
 8001576:	2364      	movs	r3, #100	; 0x64
 8001578:	4972      	ldr	r1, [pc, #456]	; (8001744 <main+0x5e0>)
 800157a:	4873      	ldr	r0, [pc, #460]	; (8001748 <main+0x5e4>)
 800157c:	f006 f8af 	bl	80076de <HAL_UART_Transmit>
					NRF24L01_ReadPayload(nrf24RxPayload, 32);
 8001580:	2120      	movs	r1, #32
 8001582:	4872      	ldr	r0, [pc, #456]	; (800174c <main+0x5e8>)
 8001584:	f000 fee8 	bl	8002358 <NRF24L01_ReadPayload>
					stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"\r\nData received\r\n");
 8001588:	4a71      	ldr	r2, [pc, #452]	; (8001750 <main+0x5ec>)
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	486d      	ldr	r0, [pc, #436]	; (8001744 <main+0x5e0>)
 800158e:	f008 fd47 	bl	800a020 <sniprintf>
 8001592:	6038      	str	r0, [r7, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b29a      	uxth	r2, r3
 8001598:	2364      	movs	r3, #100	; 0x64
 800159a:	496a      	ldr	r1, [pc, #424]	; (8001744 <main+0x5e0>)
 800159c:	486a      	ldr	r0, [pc, #424]	; (8001748 <main+0x5e4>)
 800159e:	f006 f89e 	bl	80076de <HAL_UART_Transmit>

				}
				for(int idx = 0; idx<32; idx++){
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	e013      	b.n	80015d0 <main+0x46c>
					stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"0x%2x",nrf24RxPayload[idx]);
 80015a8:	4a68      	ldr	r2, [pc, #416]	; (800174c <main+0x5e8>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4a6a      	ldr	r2, [pc, #424]	; (800175c <main+0x5f8>)
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	4863      	ldr	r0, [pc, #396]	; (8001744 <main+0x5e0>)
 80015b6:	f008 fd33 	bl	800a020 <sniprintf>
 80015ba:	6038      	str	r0, [r7, #0]
					HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	2364      	movs	r3, #100	; 0x64
 80015c2:	4960      	ldr	r1, [pc, #384]	; (8001744 <main+0x5e0>)
 80015c4:	4860      	ldr	r0, [pc, #384]	; (8001748 <main+0x5e4>)
 80015c6:	f006 f88a 	bl	80076de <HAL_UART_Transmit>
				for(int idx = 0; idx<32; idx++){
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	3301      	adds	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b1f      	cmp	r3, #31
 80015d4:	dde8      	ble.n	80015a8 <main+0x444>
				}
				break;
 80015d6:	e0af      	b.n	8001738 <main+0x5d4>

			case '+' :
				motorA.Kp++;
 80015d8:	4b61      	ldr	r3, [pc, #388]	; (8001760 <main+0x5fc>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	3301      	adds	r3, #1
 80015de:	4a60      	ldr	r2, [pc, #384]	; (8001760 <main+0x5fc>)
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 80015e2:	e0a9      	b.n	8001738 <main+0x5d4>
			case '-' :
				motorA.Kp--;
 80015e4:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <main+0x5fc>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a5d      	ldr	r2, [pc, #372]	; (8001760 <main+0x5fc>)
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 80015ee:	e0a3      	b.n	8001738 <main+0x5d4>


			case '1' :
				motorA.speed64--;
 80015f0:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <main+0x5fc>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	4a5a      	ldr	r2, [pc, #360]	; (8001760 <main+0x5fc>)
 80015f8:	60d3      	str	r3, [r2, #12]
				motorLimitSpeed(&motorA);
 80015fa:	4859      	ldr	r0, [pc, #356]	; (8001760 <main+0x5fc>)
 80015fc:	f000 faea 	bl	8001bd4 <motorLimitSpeed>
				stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"Target Speed x64 = %5d\r\n",motorA.speed64);
 8001600:	4b57      	ldr	r3, [pc, #348]	; (8001760 <main+0x5fc>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4a57      	ldr	r2, [pc, #348]	; (8001764 <main+0x600>)
 8001606:	2140      	movs	r1, #64	; 0x40
 8001608:	484e      	ldr	r0, [pc, #312]	; (8001744 <main+0x5e0>)
 800160a:	f008 fd09 	bl	800a020 <sniprintf>
 800160e:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b29a      	uxth	r2, r3
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	494b      	ldr	r1, [pc, #300]	; (8001744 <main+0x5e0>)
 8001618:	484b      	ldr	r0, [pc, #300]	; (8001748 <main+0x5e4>)
 800161a:	f006 f860 	bl	80076de <HAL_UART_Transmit>
				break;
 800161e:	e08b      	b.n	8001738 <main+0x5d4>
			case '3' :
				motorA.speed64++;
 8001620:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <main+0x5fc>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	3301      	adds	r3, #1
 8001626:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <main+0x5fc>)
 8001628:	60d3      	str	r3, [r2, #12]
				motorLimitSpeed(&motorA);
 800162a:	484d      	ldr	r0, [pc, #308]	; (8001760 <main+0x5fc>)
 800162c:	f000 fad2 	bl	8001bd4 <motorLimitSpeed>
				stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"Target Speed x64 = %5d\r\n",motorA.speed64);
 8001630:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <main+0x5fc>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a4b      	ldr	r2, [pc, #300]	; (8001764 <main+0x600>)
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	4842      	ldr	r0, [pc, #264]	; (8001744 <main+0x5e0>)
 800163a:	f008 fcf1 	bl	800a020 <sniprintf>
 800163e:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b29a      	uxth	r2, r3
 8001644:	2364      	movs	r3, #100	; 0x64
 8001646:	493f      	ldr	r1, [pc, #252]	; (8001744 <main+0x5e0>)
 8001648:	483f      	ldr	r0, [pc, #252]	; (8001748 <main+0x5e4>)
 800164a:	f006 f848 	bl	80076de <HAL_UART_Transmit>
				break;
 800164e:	e073      	b.n	8001738 <main+0x5d4>
			case '4' :
				motorA.speed64-=10;
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <main+0x5fc>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	3b0a      	subs	r3, #10
 8001656:	4a42      	ldr	r2, [pc, #264]	; (8001760 <main+0x5fc>)
 8001658:	60d3      	str	r3, [r2, #12]
				motorLimitSpeed(&motorA);
 800165a:	4841      	ldr	r0, [pc, #260]	; (8001760 <main+0x5fc>)
 800165c:	f000 faba 	bl	8001bd4 <motorLimitSpeed>
				stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"Target Speed x64 = %5d\r\n",motorA.speed64);
 8001660:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <main+0x5fc>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a3f      	ldr	r2, [pc, #252]	; (8001764 <main+0x600>)
 8001666:	2140      	movs	r1, #64	; 0x40
 8001668:	4836      	ldr	r0, [pc, #216]	; (8001744 <main+0x5e0>)
 800166a:	f008 fcd9 	bl	800a020 <sniprintf>
 800166e:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b29a      	uxth	r2, r3
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	4933      	ldr	r1, [pc, #204]	; (8001744 <main+0x5e0>)
 8001678:	4833      	ldr	r0, [pc, #204]	; (8001748 <main+0x5e4>)
 800167a:	f006 f830 	bl	80076de <HAL_UART_Transmit>
				break;
 800167e:	e05b      	b.n	8001738 <main+0x5d4>
			case '6' :
				motorA.speed64+=10;
 8001680:	4b37      	ldr	r3, [pc, #220]	; (8001760 <main+0x5fc>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	330a      	adds	r3, #10
 8001686:	4a36      	ldr	r2, [pc, #216]	; (8001760 <main+0x5fc>)
 8001688:	60d3      	str	r3, [r2, #12]
				motorLimitSpeed(&motorA);
 800168a:	4835      	ldr	r0, [pc, #212]	; (8001760 <main+0x5fc>)
 800168c:	f000 faa2 	bl	8001bd4 <motorLimitSpeed>
				stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"Target Speed x64 = %5d\r\n",motorA.speed64);
 8001690:	4b33      	ldr	r3, [pc, #204]	; (8001760 <main+0x5fc>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4a33      	ldr	r2, [pc, #204]	; (8001764 <main+0x600>)
 8001696:	2140      	movs	r1, #64	; 0x40
 8001698:	482a      	ldr	r0, [pc, #168]	; (8001744 <main+0x5e0>)
 800169a:	f008 fcc1 	bl	800a020 <sniprintf>
 800169e:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	2364      	movs	r3, #100	; 0x64
 80016a6:	4927      	ldr	r1, [pc, #156]	; (8001744 <main+0x5e0>)
 80016a8:	4827      	ldr	r0, [pc, #156]	; (8001748 <main+0x5e4>)
 80016aa:	f006 f818 	bl	80076de <HAL_UART_Transmit>
				break;
 80016ae:	e043      	b.n	8001738 <main+0x5d4>
			case '7' :
				motorA.speed64-=100;
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <main+0x5fc>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	3b64      	subs	r3, #100	; 0x64
 80016b6:	4a2a      	ldr	r2, [pc, #168]	; (8001760 <main+0x5fc>)
 80016b8:	60d3      	str	r3, [r2, #12]
				motorLimitSpeed(&motorA);
 80016ba:	4829      	ldr	r0, [pc, #164]	; (8001760 <main+0x5fc>)
 80016bc:	f000 fa8a 	bl	8001bd4 <motorLimitSpeed>
				stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"Target Speed x64 = %5d\r\n",motorA.speed64);
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <main+0x5fc>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a27      	ldr	r2, [pc, #156]	; (8001764 <main+0x600>)
 80016c6:	2140      	movs	r1, #64	; 0x40
 80016c8:	481e      	ldr	r0, [pc, #120]	; (8001744 <main+0x5e0>)
 80016ca:	f008 fca9 	bl	800a020 <sniprintf>
 80016ce:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	2364      	movs	r3, #100	; 0x64
 80016d6:	491b      	ldr	r1, [pc, #108]	; (8001744 <main+0x5e0>)
 80016d8:	481b      	ldr	r0, [pc, #108]	; (8001748 <main+0x5e4>)
 80016da:	f006 f800 	bl	80076de <HAL_UART_Transmit>
				break;
 80016de:	e02b      	b.n	8001738 <main+0x5d4>
			case '9' :
				motorA.speed64+=100;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <main+0x5fc>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	3364      	adds	r3, #100	; 0x64
 80016e6:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <main+0x5fc>)
 80016e8:	60d3      	str	r3, [r2, #12]
				motorLimitSpeed(&motorA);
 80016ea:	481d      	ldr	r0, [pc, #116]	; (8001760 <main+0x5fc>)
 80016ec:	f000 fa72 	bl	8001bd4 <motorLimitSpeed>
				stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"Target Speed x64 = %5d\r\n",motorA.speed64);
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <main+0x5fc>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <main+0x600>)
 80016f6:	2140      	movs	r1, #64	; 0x40
 80016f8:	4812      	ldr	r0, [pc, #72]	; (8001744 <main+0x5e0>)
 80016fa:	f008 fc91 	bl	800a020 <sniprintf>
 80016fe:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b29a      	uxth	r2, r3
 8001704:	2364      	movs	r3, #100	; 0x64
 8001706:	490f      	ldr	r1, [pc, #60]	; (8001744 <main+0x5e0>)
 8001708:	480f      	ldr	r0, [pc, #60]	; (8001748 <main+0x5e4>)
 800170a:	f005 ffe8 	bl	80076de <HAL_UART_Transmit>
				break;
 800170e:	e013      	b.n	8001738 <main+0x5d4>
			case '0' :
				motorA.speed64 = 0;
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <main+0x5fc>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
				stringLength = snprintf((char *) uartTxBuffer,UART_TX_BUFFER_SIZE,"Target Speed x64 = %5d\r\n",motorA.speed64);
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <main+0x5fc>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <main+0x600>)
 800171c:	2140      	movs	r1, #64	; 0x40
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <main+0x5e0>)
 8001720:	f008 fc7e 	bl	800a020 <sniprintf>
 8001724:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b29a      	uxth	r2, r3
 800172a:	2364      	movs	r3, #100	; 0x64
 800172c:	4905      	ldr	r1, [pc, #20]	; (8001744 <main+0x5e0>)
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <main+0x5e4>)
 8001730:	f005 ffd5 	bl	80076de <HAL_UART_Transmit>
				break;
 8001734:	e000      	b.n	8001738 <main+0x5d4>
			default:
				break;
 8001736:	bf00      	nop
			}
			uartRxReceived = 0;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <main+0x604>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
		motorA.speed64 = 1500;
 800173e:	e565      	b.n	800120c <main+0xa8>
 8001740:	0800c5d8 	.word	0x0800c5d8
 8001744:	20000324 	.word	0x20000324
 8001748:	200005bc 	.word	0x200005bc
 800174c:	20000368 	.word	0x20000368
 8001750:	0800c600 	.word	0x0800c600
 8001754:	0800c614 	.word	0x0800c614
 8001758:	0800c618 	.word	0x0800c618
 800175c:	0800c630 	.word	0x0800c630
 8001760:	2000002c 	.word	0x2000002c
 8001764:	0800c638 	.word	0x0800c638
 8001768:	20000388 	.word	0x20000388

0800176c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b094      	sub	sp, #80	; 0x50
 8001770:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001772:	f107 0318 	add.w	r3, r7, #24
 8001776:	2238      	movs	r2, #56	; 0x38
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f007 ffde 	bl	800973c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800178e:	2000      	movs	r0, #0
 8001790:	f002 f956 	bl	8003a40 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001794:	2302      	movs	r3, #2
 8001796:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800179e:	2340      	movs	r3, #64	; 0x40
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	2302      	movs	r3, #2
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017a6:	2302      	movs	r3, #2
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80017aa:	2304      	movs	r3, #4
 80017ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80017ae:	2355      	movs	r3, #85	; 0x55
 80017b0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b2:	2302      	movs	r3, #2
 80017b4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 f9e0 	bl	8003b88 <HAL_RCC_OscConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80017ce:	f000 f917 	bl	8001a00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d2:	230f      	movs	r3, #15
 80017d4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d6:	2303      	movs	r3, #3
 80017d8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2104      	movs	r1, #4
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fce4 	bl	80041b8 <HAL_RCC_ClockConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80017f6:	f000 f903 	bl	8001a00 <Error_Handler>
	}
}
 80017fa:	bf00      	nop
 80017fc:	3750      	adds	r7, #80	; 0x50
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	int stringLength;
	// TIM7 = 10Hz for Encodeur mesuring
	if(htim->Instance ==  TIM7){
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a73      	ldr	r2, [pc, #460]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	f040 80d8 	bne.w	80019c8 <HAL_TIM_PeriodElapsedCallback+0x1c4>

		motorA.encPos = __HAL_TIM_GET_COUNTER(&htim2);
 8001818:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	4a72      	ldr	r2, [pc, #456]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001820:	6113      	str	r3, [r2, #16]
		__HAL_TIM_SET_COUNTER(&htim2,37767);
 8001822:	4b70      	ldr	r3, [pc, #448]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f249 3287 	movw	r2, #37767	; 0x9387
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
		motorB.encPos = __HAL_TIM_GET_COUNTER(&htim3);
 800182c:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	4a6f      	ldr	r2, [pc, #444]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001834:	6113      	str	r3, [r2, #16]
		__HAL_TIM_SET_COUNTER(&htim3,37767);
 8001836:	4b6d      	ldr	r3, [pc, #436]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f249 3287 	movw	r2, #37767	; 0x9387
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
		motorC.encPos = __HAL_TIM_GET_COUNTER(&htim4);
 8001840:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	4a6c      	ldr	r2, [pc, #432]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001848:	6113      	str	r3, [r2, #16]
		__HAL_TIM_SET_COUNTER(&htim4,37767);
 800184a:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f249 3287 	movw	r2, #37767	; 0x9387
 8001852:	625a      	str	r2, [r3, #36]	; 0x24

		motorA.encSpeed64 = (motorA.encPos-37767)*24; // 24 = 2*pi/48*0.029*fe*64
 8001854:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	f5a3 235d 	sub.w	r3, r3, #905216	; 0xdd000
 8001864:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8001868:	461a      	mov	r2, r3
 800186a:	4b5f      	ldr	r3, [pc, #380]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800186c:	615a      	str	r2, [r3, #20]
		motorA.diffError64 = (motorA.speed64 - motorA.encSpeed64) - motorA.error64;
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	1ad2      	subs	r2, r2, r3
 8001878:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	4a5a      	ldr	r2, [pc, #360]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001880:	6213      	str	r3, [r2, #32]
		motorA.error64 = (motorA.speed64 - motorA.encSpeed64);
 8001882:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4a56      	ldr	r2, [pc, #344]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800188e:	6193      	str	r3, [r2, #24]
		motorA.sumError64 += motorA.error64;
 8001890:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	4b54      	ldr	r3, [pc, #336]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4413      	add	r3, r2
 800189a:	4a53      	ldr	r2, [pc, #332]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800189c:	61d3      	str	r3, [r2, #28]
		motorA.commande64 = motorA.speed64*motorA.Kp + motorA.sumError64*motorA.Ki + motorA.diffError64*motorA.Kd;
 800189e:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80018a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018a6:	fb03 f202 	mul.w	r2, r3, r2
 80018aa:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	494e      	ldr	r1, [pc, #312]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80018b0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	441a      	add	r2, r3
 80018b8:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	494a      	ldr	r1, [pc, #296]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80018be:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80018c8:	6253      	str	r3, [r2, #36]	; 0x24

		motorB.encSpeed64 = (motorB.encPos-37767)*24; // 24 = 2*pi/48*0.029*fe*64
 80018ca:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	f5a3 235d 	sub.w	r3, r3, #905216	; 0xdd000
 80018da:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 80018de:	461a      	mov	r2, r3
 80018e0:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018e2:	615a      	str	r2, [r3, #20]
		motorB.diffError64 = (motorB.speed64 - motorB.encSpeed64) - motorB.error64;
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	1ad2      	subs	r2, r2, r3
 80018ee:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	4a3e      	ldr	r2, [pc, #248]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018f6:	6213      	str	r3, [r2, #32]
		motorB.error64 = (motorB.speed64 - motorB.encSpeed64);
 80018f8:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	4a3b      	ldr	r2, [pc, #236]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001904:	6193      	str	r3, [r2, #24]
		motorB.sumError64 += motorB.error64;
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001908:	69da      	ldr	r2, [r3, #28]
 800190a:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4413      	add	r3, r2
 8001910:	4a37      	ldr	r2, [pc, #220]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001912:	61d3      	str	r3, [r2, #28]
		motorB.commande64 = motorB.speed64*motorB.Kp + motorB.sumError64*motorB.Ki + motorB.diffError64*motorB.Kd;
 8001914:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a35      	ldr	r2, [pc, #212]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800191a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800191c:	fb03 f202 	mul.w	r2, r3, r2
 8001920:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	4932      	ldr	r1, [pc, #200]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001926:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	441a      	add	r2, r3
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	492f      	ldr	r1, [pc, #188]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001934:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	4413      	add	r3, r2
 800193c:	4a2c      	ldr	r2, [pc, #176]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800193e:	6253      	str	r3, [r2, #36]	; 0x24

		motorC.encSpeed64 = (motorC.encPos-37767)*24; // 24 = 2*pi/48*0.029*fe*64
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	f5a3 235d 	sub.w	r3, r3, #905216	; 0xdd000
 8001950:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8001954:	461a      	mov	r2, r3
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001958:	615a      	str	r2, [r3, #20]
		motorC.diffError64 = (motorC.speed64 - motorC.encSpeed64) - motorC.error64;
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800196c:	6213      	str	r3, [r2, #32]
		motorC.error64 = (motorC.speed64 - motorC.encSpeed64);
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800197a:	6193      	str	r3, [r2, #24]
		motorC.sumError64 += motorC.error64;
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4413      	add	r3, r2
 8001986:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001988:	61d3      	str	r3, [r2, #28]
		motorC.commande64 = motorC.speed64*motorC.Kp + motorC.sumError64*motorC.Ki + motorC.diffError64*motorC.Kd;
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001990:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001992:	fb03 f202 	mul.w	r2, r3, r2
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4917      	ldr	r1, [pc, #92]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800199c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	441a      	add	r2, r3
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4913      	ldr	r1, [pc, #76]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80019aa:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80019b4:	6253      	str	r3, [r2, #36]	; 0x24
		}
		divPrint += 1;
		divPrint %= 100;
		 */

		motorSetSpeed(&motorA);
 80019b6:	480c      	ldr	r0, [pc, #48]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80019b8:	f000 f827 	bl	8001a0a <motorSetSpeed>
		motorSetSpeed(&motorB);
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80019be:	f000 f824 	bl	8001a0a <motorSetSpeed>
		motorSetSpeed(&motorC);
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80019c4:	f000 f821 	bl	8001a0a <motorSetSpeed>
	}
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d101      	bne.n	80019d6 <HAL_TIM_PeriodElapsedCallback+0x1d2>
		HAL_IncTick();
 80019d2:	f001 fb95 	bl	8003100 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40001400 	.word	0x40001400
 80019e4:	2000048c 	.word	0x2000048c
 80019e8:	2000002c 	.word	0x2000002c
 80019ec:	200004d8 	.word	0x200004d8
 80019f0:	20000068 	.word	0x20000068
 80019f4:	20000524 	.word	0x20000524
 80019f8:	200000a4 	.word	0x200000a4
 80019fc:	40001000 	.word	0x40001000

08001a00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a08:	e7fe      	b.n	8001a08 <Error_Handler+0x8>

08001a0a <motorSetSpeed>:
// 1632.67 imp par tour

#define MAX_PWM 1024-1
#define MAX_SPEEDx64 2560 // max 40rad.s-1

HAL_StatusTypeDef motorSetSpeed(Motor_HandleTypeDef *hmotor){
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	motorLimitPWM(hmotor);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f8fc 	bl	8001c10 <motorLimitPWM>
	if(hmotor->commande64==0){
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d118      	bne.n	8001a52 <motorSetSpeed+0x48>
		hmotor->dir = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		hmotor->pwm = 0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Stop(hmotor->htim, hmotor->channel);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4610      	mov	r0, r2
 8001a3a:	f004 f999 	bl	8005d70 <HAL_TIM_PWM_Stop>
		return HAL_TIMEx_PWMN_Stop(hmotor->htim, hmotor->channel);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f005 fc0d 	bl	8007268 <HAL_TIMEx_PWMN_Stop>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	e0bb      	b.n	8001bca <motorSetSpeed+0x1c0>
	}
	else if(hmotor->commande64 > 0){
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	dd5b      	ble.n	8001b12 <motorSetSpeed+0x108>
		hmotor->dir = 1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		hmotor->pwm = hmotor->commande64/64;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da00      	bge.n	8001a6c <motorSetSpeed+0x62>
 8001a6a:	333f      	adds	r3, #63	; 0x3f
 8001a6c:	119b      	asrs	r3, r3, #6
 8001a6e:	461a      	mov	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIMEx_PWMN_Stop(hmotor->htim,  hmotor->channel);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f005 fbf2 	bl	8007268 <HAL_TIMEx_PWMN_Stop>
		__HAL_TIM_SET_COMPARE(hmotor->htim,  hmotor->channel, hmotor->pwm);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <motorSetSpeed+0x90>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34
 8001a98:	e031      	b.n	8001afe <motorSetSpeed+0xf4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d106      	bne.n	8001ab0 <motorSetSpeed+0xa6>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	6393      	str	r3, [r2, #56]	; 0x38
 8001aae:	e026      	b.n	8001afe <motorSetSpeed+0xf4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d106      	bne.n	8001ac6 <motorSetSpeed+0xbc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ac4:	e01b      	b.n	8001afe <motorSetSpeed+0xf4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d106      	bne.n	8001adc <motorSetSpeed+0xd2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	e010      	b.n	8001afe <motorSetSpeed+0xf4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d106      	bne.n	8001af2 <motorSetSpeed+0xe8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	6493      	str	r3, [r2, #72]	; 0x48
 8001af0:	e005      	b.n	8001afe <motorSetSpeed+0xf4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	64d3      	str	r3, [r2, #76]	; 0x4c
		return HAL_TIM_PWM_Start(hmotor->htim,  hmotor->channel);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4610      	mov	r0, r2
 8001b0a:	f004 f831 	bl	8005b70 <HAL_TIM_PWM_Start>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	e05b      	b.n	8001bca <motorSetSpeed+0x1c0>
	}
	else{
		hmotor->dir = -1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	22ff      	movs	r2, #255	; 0xff
 8001b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		hmotor->pwm = -hmotor->commande64/64;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	425b      	negs	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da00      	bge.n	8001b26 <motorSetSpeed+0x11c>
 8001b24:	333f      	adds	r3, #63	; 0x3f
 8001b26:	119b      	asrs	r3, r3, #6
 8001b28:	461a      	mov	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Stop(hmotor->htim,  hmotor->channel);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4610      	mov	r0, r2
 8001b3a:	f004 f919 	bl	8005d70 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COMPARE(hmotor->htim,  hmotor->channel, hmotor->pwm);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <motorSetSpeed+0x14a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b50:	635a      	str	r2, [r3, #52]	; 0x34
 8001b52:	e031      	b.n	8001bb8 <motorSetSpeed+0x1ae>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d106      	bne.n	8001b6a <motorSetSpeed+0x160>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	6393      	str	r3, [r2, #56]	; 0x38
 8001b68:	e026      	b.n	8001bb8 <motorSetSpeed+0x1ae>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d106      	bne.n	8001b80 <motorSetSpeed+0x176>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001b7e:	e01b      	b.n	8001bb8 <motorSetSpeed+0x1ae>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d106      	bne.n	8001b96 <motorSetSpeed+0x18c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	6413      	str	r3, [r2, #64]	; 0x40
 8001b94:	e010      	b.n	8001bb8 <motorSetSpeed+0x1ae>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d106      	bne.n	8001bac <motorSetSpeed+0x1a2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	6493      	str	r3, [r2, #72]	; 0x48
 8001baa:	e005      	b.n	8001bb8 <motorSetSpeed+0x1ae>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	64d3      	str	r3, [r2, #76]	; 0x4c
		return HAL_TIMEx_PWMN_Start(hmotor->htim, hmotor->channel);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f005 fa9c 	bl	8007100 <HAL_TIMEx_PWMN_Start>
 8001bc8:	4603      	mov	r3, r0
	}

}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <motorLimitSpeed>:

void motorLimitSpeed(Motor_HandleTypeDef *hmotor){
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	if(hmotor->speed64>MAX_SPEEDx64) hmotor->speed64 = MAX_SPEEDx64;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001be4:	dd03      	ble.n	8001bee <motorLimitSpeed+0x1a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001bec:	60da      	str	r2, [r3, #12]
	if(hmotor->speed64<-MAX_SPEEDx64) hmotor->speed64 = -MAX_SPEEDx64;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f513 6f20 	cmn.w	r3, #2560	; 0xa00
 8001bf6:	da02      	bge.n	8001bfe <motorLimitSpeed+0x2a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <motorLimitSpeed+0x38>)
 8001bfc:	60da      	str	r2, [r3, #12]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	fffff600 	.word	0xfffff600

08001c10 <motorLimitPWM>:

void motorLimitPWM(Motor_HandleTypeDef *hmotor){
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if(hmotor->pwm>MAX_SPEEDx64) hmotor->pwm = MAX_PWM;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001c20:	d903      	bls.n	8001c2a <motorLimitPWM+0x1a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
	if(hmotor->pwm<-MAX_SPEEDx64) hmotor->pwm = -MAX_PWM;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	f513 6f20 	cmn.w	r3, #2560	; 0xa00
 8001c32:	d203      	bcs.n	8001c3c <motorLimitPWM+0x2c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <NRF24L01_WriteCSN>:
	ret = NRF24L01_WriteRegister(RF_SETUP, txBuffer, 1);   // Power= 0db, data rate = 2Mbps

	return ret;
}

HAL_StatusTypeDef NRF24L01_WriteCSN(GPIO_PinState PinState){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, PinState);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	461a      	mov	r2, r3
 8001c56:	2140      	movs	r1, #64	; 0x40
 8001c58:	4803      	ldr	r0, [pc, #12]	; (8001c68 <NRF24L01_WriteCSN+0x20>)
 8001c5a:	f001 fdb3 	bl	80037c4 <HAL_GPIO_WritePin>
	return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	48000400 	.word	0x48000400

08001c6c <NRF24L01_WriteCE>:

HAL_StatusTypeDef NRF24L01_WriteCE(GPIO_PinState PinState){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, PinState);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2120      	movs	r1, #32
 8001c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c80:	f001 fda0 	bl	80037c4 <HAL_GPIO_WritePin>
	return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <NRF24L01_ReadRegister>:
	NRF24L01_WriteCSN(SET);

	return ret;
}

HAL_StatusTypeDef NRF24L01_ReadRegister(uint8_t reg, uint8_t* rxValue, uint8_t length){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	uint8_t maskedReg;// = (R_REGISTER | (reg & REGISTER_MASK));
	while(length--){
 8001ca0:	e021      	b.n	8001ce6 <NRF24L01_ReadRegister+0x56>
		maskedReg = (R_REGISTER | (reg++ & REGISTER_MASK));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	71fa      	strb	r2, [r7, #7]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff ffc9 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 1, HAL_MAX_DELAY);
 8001cb6:	f107 010e 	add.w	r1, r7, #14
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	480e      	ldr	r0, [pc, #56]	; (8001cfc <NRF24L01_ReadRegister+0x6c>)
 8001cc2:	f002 ff62 	bl	8004b8a <HAL_SPI_Transmit>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, (rxValue++), 1, HAL_MAX_DELAY);
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	1c4b      	adds	r3, r1, #1
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4809      	ldr	r0, [pc, #36]	; (8001cfc <NRF24L01_ReadRegister+0x6c>)
 8001cd8:	f003 f8c5 	bl	8004e66 <HAL_SPI_Receive>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff ffb1 	bl	8001c48 <NRF24L01_WriteCSN>
	while(length--){
 8001ce6:	79bb      	ldrb	r3, [r7, #6]
 8001ce8:	1e5a      	subs	r2, r3, #1
 8001cea:	71ba      	strb	r2, [r7, #6]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1d8      	bne.n	8001ca2 <NRF24L01_ReadRegister+0x12>
	}
	return ret;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000038c 	.word	0x2000038c

08001d00 <NRF24L01_SetRxAddr>:

HAL_StatusTypeDef NRF24L01_SetRxAddr(uint8_t pipe, uint8_t* rxAddr){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	uint8_t maskedReg;
	uint8_t rxAddrFlip[5];

	switch(pipe){
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	f200 812e 	bhi.w	8001f70 <NRF24L01_SetRxAddr+0x270>
 8001d14:	a201      	add	r2, pc, #4	; (adr r2, 8001d1c <NRF24L01_SetRxAddr+0x1c>)
 8001d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1a:	bf00      	nop
 8001d1c:	08001d35 	.word	0x08001d35
 8001d20:	08001d6f 	.word	0x08001d6f
 8001d24:	08001da9 	.word	0x08001da9
 8001d28:	08001e1b 	.word	0x08001e1b
 8001d2c:	08001e8d 	.word	0x08001e8d
 8001d30:	08001eff 	.word	0x08001eff
	case 0:
		maskedReg = (R_REGISTER | (RX_ADDR_P0 & REGISTER_MASK));
 8001d34:	230a      	movs	r3, #10
 8001d36:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff ff85 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 1, HAL_MAX_DELAY);
 8001d3e:	f107 010e 	add.w	r1, r7, #14
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d46:	2201      	movs	r2, #1
 8001d48:	4897      	ldr	r0, [pc, #604]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001d4a:	f002 ff1e 	bl	8004b8a <HAL_SPI_Transmit>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, rxAddrFlip, 5, HAL_MAX_DELAY);
 8001d52:	f107 0108 	add.w	r1, r7, #8
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d5a:	2205      	movs	r2, #5
 8001d5c:	4892      	ldr	r0, [pc, #584]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001d5e:	f003 f882 	bl	8004e66 <HAL_SPI_Receive>
 8001d62:	4603      	mov	r3, r0
 8001d64:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7ff ff6e 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 8001d6c:	e103      	b.n	8001f76 <NRF24L01_SetRxAddr+0x276>
	case 1:
		maskedReg = (R_REGISTER | (RX_ADDR_P1 & REGISTER_MASK));
 8001d6e:	230b      	movs	r3, #11
 8001d70:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff ff68 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 1, HAL_MAX_DELAY);
 8001d78:	f107 010e 	add.w	r1, r7, #14
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d80:	2201      	movs	r2, #1
 8001d82:	4889      	ldr	r0, [pc, #548]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001d84:	f002 ff01 	bl	8004b8a <HAL_SPI_Transmit>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, rxAddrFlip, 5, HAL_MAX_DELAY);
 8001d8c:	f107 0108 	add.w	r1, r7, #8
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d94:	2205      	movs	r2, #5
 8001d96:	4884      	ldr	r0, [pc, #528]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001d98:	f003 f865 	bl	8004e66 <HAL_SPI_Receive>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff ff51 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 8001da6:	e0e6      	b.n	8001f76 <NRF24L01_SetRxAddr+0x276>
	case 2:
		maskedReg = (R_REGISTER | (RX_ADDR_P1 & REGISTER_MASK));
 8001da8:	230b      	movs	r3, #11
 8001daa:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7ff ff4b 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 1, HAL_MAX_DELAY);
 8001db2:	f107 010e 	add.w	r1, r7, #14
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dba:	2201      	movs	r2, #1
 8001dbc:	487a      	ldr	r0, [pc, #488]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001dbe:	f002 fee4 	bl	8004b8a <HAL_SPI_Transmit>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, rxAddrFlip, 5, HAL_MAX_DELAY);
 8001dc6:	f107 0108 	add.w	r1, r7, #8
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dce:	2205      	movs	r2, #5
 8001dd0:	4875      	ldr	r0, [pc, #468]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001dd2:	f003 f848 	bl	8004e66 <HAL_SPI_Receive>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff ff34 	bl	8001c48 <NRF24L01_WriteCSN>
		maskedReg = (R_REGISTER | (RX_ADDR_P2 & REGISTER_MASK));
 8001de0:	230c      	movs	r3, #12
 8001de2:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff ff2f 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 1, HAL_MAX_DELAY);
 8001dea:	f107 010e 	add.w	r1, r7, #14
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df2:	2201      	movs	r2, #1
 8001df4:	486c      	ldr	r0, [pc, #432]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001df6:	f002 fec8 	bl	8004b8a <HAL_SPI_Transmit>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, rxAddrFlip, 1, HAL_MAX_DELAY);
 8001dfe:	f107 0108 	add.w	r1, r7, #8
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e06:	2201      	movs	r2, #1
 8001e08:	4867      	ldr	r0, [pc, #412]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001e0a:	f003 f82c 	bl	8004e66 <HAL_SPI_Receive>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff ff18 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 8001e18:	e0ad      	b.n	8001f76 <NRF24L01_SetRxAddr+0x276>
	case 3:
		maskedReg = (R_REGISTER | (RX_ADDR_P1 & REGISTER_MASK));
 8001e1a:	230b      	movs	r3, #11
 8001e1c:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff ff12 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 5, HAL_MAX_DELAY);
 8001e24:	f107 010e 	add.w	r1, r7, #14
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	485e      	ldr	r0, [pc, #376]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001e30:	f002 feab 	bl	8004b8a <HAL_SPI_Transmit>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, rxAddrFlip, 5, HAL_MAX_DELAY);
 8001e38:	f107 0108 	add.w	r1, r7, #8
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e40:	2205      	movs	r2, #5
 8001e42:	4859      	ldr	r0, [pc, #356]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001e44:	f003 f80f 	bl	8004e66 <HAL_SPI_Receive>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7ff fefb 	bl	8001c48 <NRF24L01_WriteCSN>
		maskedReg = (R_REGISTER | (RX_ADDR_P3 & REGISTER_MASK));
 8001e52:	230d      	movs	r3, #13
 8001e54:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fef6 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 1, HAL_MAX_DELAY);
 8001e5c:	f107 010e 	add.w	r1, r7, #14
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e64:	2201      	movs	r2, #1
 8001e66:	4850      	ldr	r0, [pc, #320]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001e68:	f002 fe8f 	bl	8004b8a <HAL_SPI_Transmit>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, rxAddrFlip, 1, HAL_MAX_DELAY);
 8001e70:	f107 0108 	add.w	r1, r7, #8
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e78:	2201      	movs	r2, #1
 8001e7a:	484b      	ldr	r0, [pc, #300]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001e7c:	f002 fff3 	bl	8004e66 <HAL_SPI_Receive>
 8001e80:	4603      	mov	r3, r0
 8001e82:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7ff fedf 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 8001e8a:	e074      	b.n	8001f76 <NRF24L01_SetRxAddr+0x276>
	case 4:
		maskedReg = (R_REGISTER | (RX_ADDR_P1 & REGISTER_MASK));
 8001e8c:	230b      	movs	r3, #11
 8001e8e:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff fed9 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 5, HAL_MAX_DELAY);
 8001e96:	f107 010e 	add.w	r1, r7, #14
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	4841      	ldr	r0, [pc, #260]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001ea2:	f002 fe72 	bl	8004b8a <HAL_SPI_Transmit>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, rxAddrFlip, 5, HAL_MAX_DELAY);
 8001eaa:	f107 0108 	add.w	r1, r7, #8
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb2:	2205      	movs	r2, #5
 8001eb4:	483c      	ldr	r0, [pc, #240]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001eb6:	f002 ffd6 	bl	8004e66 <HAL_SPI_Receive>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff fec2 	bl	8001c48 <NRF24L01_WriteCSN>
		maskedReg = (R_REGISTER | (RX_ADDR_P4 & REGISTER_MASK));
 8001ec4:	230e      	movs	r3, #14
 8001ec6:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff febd 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 1, HAL_MAX_DELAY);
 8001ece:	f107 010e 	add.w	r1, r7, #14
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4833      	ldr	r0, [pc, #204]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001eda:	f002 fe56 	bl	8004b8a <HAL_SPI_Transmit>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, rxAddrFlip, 1, HAL_MAX_DELAY);
 8001ee2:	f107 0108 	add.w	r1, r7, #8
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eea:	2201      	movs	r2, #1
 8001eec:	482e      	ldr	r0, [pc, #184]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001eee:	f002 ffba 	bl	8004e66 <HAL_SPI_Receive>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f7ff fea6 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 8001efc:	e03b      	b.n	8001f76 <NRF24L01_SetRxAddr+0x276>
	case 5:
		maskedReg = (R_REGISTER | (RX_ADDR_P1 & REGISTER_MASK));
 8001efe:	230b      	movs	r3, #11
 8001f00:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fea0 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 5, HAL_MAX_DELAY);
 8001f08:	f107 010e 	add.w	r1, r7, #14
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f10:	2205      	movs	r2, #5
 8001f12:	4825      	ldr	r0, [pc, #148]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001f14:	f002 fe39 	bl	8004b8a <HAL_SPI_Transmit>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, rxAddrFlip, 5, HAL_MAX_DELAY);
 8001f1c:	f107 0108 	add.w	r1, r7, #8
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f24:	2205      	movs	r2, #5
 8001f26:	4820      	ldr	r0, [pc, #128]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001f28:	f002 ff9d 	bl	8004e66 <HAL_SPI_Receive>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff fe89 	bl	8001c48 <NRF24L01_WriteCSN>
		maskedReg = (R_REGISTER | (RX_ADDR_P5 & REGISTER_MASK));
 8001f36:	230f      	movs	r3, #15
 8001f38:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteCSN(RESET);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fe84 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 1, HAL_MAX_DELAY);
 8001f40:	f107 010e 	add.w	r1, r7, #14
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4817      	ldr	r0, [pc, #92]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001f4c:	f002 fe1d 	bl	8004b8a <HAL_SPI_Transmit>
 8001f50:	4603      	mov	r3, r0
 8001f52:	73fb      	strb	r3, [r7, #15]
		ret = HAL_SPI_Receive(&hspi1, rxAddrFlip, 1, HAL_MAX_DELAY);
 8001f54:	f107 0108 	add.w	r1, r7, #8
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4812      	ldr	r0, [pc, #72]	; (8001fa8 <NRF24L01_SetRxAddr+0x2a8>)
 8001f60:	f002 ff81 	bl	8004e66 <HAL_SPI_Receive>
 8001f64:	4603      	mov	r3, r0
 8001f66:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7ff fe6d 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 8001f6e:	e002      	b.n	8001f76 <NRF24L01_SetRxAddr+0x276>

	default :
		ret = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
		break;
 8001f74:	bf00      	nop
	}

	// Flip LSB and MSB 8-bits datas
	rxAddr[0]=rxAddrFlip[4];
 8001f76:	7b3a      	ldrb	r2, [r7, #12]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	701a      	strb	r2, [r3, #0]
	rxAddr[1]=rxAddrFlip[3];
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	7afa      	ldrb	r2, [r7, #11]
 8001f82:	701a      	strb	r2, [r3, #0]
	rxAddr[2]=rxAddrFlip[2];
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3302      	adds	r3, #2
 8001f88:	7aba      	ldrb	r2, [r7, #10]
 8001f8a:	701a      	strb	r2, [r3, #0]
	rxAddr[3]=rxAddrFlip[1];
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	3303      	adds	r3, #3
 8001f90:	7a7a      	ldrb	r2, [r7, #9]
 8001f92:	701a      	strb	r2, [r3, #0]
	rxAddr[4]=rxAddrFlip[0];
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	3304      	adds	r3, #4
 8001f98:	7a3a      	ldrb	r2, [r7, #8]
 8001f9a:	701a      	strb	r2, [r3, #0]

	return ret;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	2000038c 	.word	0x2000038c

08001fac <NRF24L01_SetTxAddr>:

HAL_StatusTypeDef NRF24L01_SetTxAddr(uint8_t* txAddr){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t maskedReg = (W_REGISTER | (TX_ADDR & REGISTER_MASK));
 8001fb4:	2330      	movs	r3, #48	; 0x30
 8001fb6:	73bb      	strb	r3, [r7, #14]
	uint8_t txAddrFlip[5];

	txAddrFlip[0]=txAddr[4];
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	791b      	ldrb	r3, [r3, #4]
 8001fbc:	723b      	strb	r3, [r7, #8]
	txAddrFlip[1]=txAddr[3];
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	78db      	ldrb	r3, [r3, #3]
 8001fc2:	727b      	strb	r3, [r7, #9]
	txAddrFlip[2]=txAddr[2];
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	789b      	ldrb	r3, [r3, #2]
 8001fc8:	72bb      	strb	r3, [r7, #10]
	txAddrFlip[3]=txAddr[1];
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	72fb      	strb	r3, [r7, #11]
	txAddrFlip[4]=txAddr[0];
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	733b      	strb	r3, [r7, #12]

	NRF24L01_WriteCSN(RESET);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7ff fe36 	bl	8001c48 <NRF24L01_WriteCSN>
	ret = HAL_SPI_Transmit(&hspi1, &maskedReg, 1, HAL_MAX_DELAY);
 8001fdc:	f107 010e 	add.w	r1, r7, #14
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	480b      	ldr	r0, [pc, #44]	; (8002014 <NRF24L01_SetTxAddr+0x68>)
 8001fe8:	f002 fdcf 	bl	8004b8a <HAL_SPI_Transmit>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi1, txAddrFlip, 5, HAL_MAX_DELAY);
 8001ff0:	f107 0108 	add.w	r1, r7, #8
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <NRF24L01_SetTxAddr+0x68>)
 8001ffc:	f002 fdc5 	bl	8004b8a <HAL_SPI_Transmit>
 8002000:	4603      	mov	r3, r0
 8002002:	73fb      	strb	r3, [r7, #15]
	NRF24L01_WriteCSN(SET);
 8002004:	2001      	movs	r0, #1
 8002006:	f7ff fe1f 	bl	8001c48 <NRF24L01_WriteCSN>

	return ret;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000038c 	.word	0x2000038c

08002018 <NRF24L01_WriteRegister>:

HAL_StatusTypeDef NRF24L01_WriteRegister(uint8_t reg, uint8_t* txValue, uint8_t length){
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
 8002024:	4613      	mov	r3, r2
 8002026:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	uint8_t txBuffer[2];
	while(length--){
 8002028:	e020      	b.n	800206c <NRF24L01_WriteRegister+0x54>
		txBuffer[0] = (W_REGISTER | (reg++ & REGISTER_MASK));
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	71fa      	strb	r2, [r7, #7]
 8002030:	b25b      	sxtb	r3, r3
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	b25b      	sxtb	r3, r3
 8002038:	f043 0320 	orr.w	r3, r3, #32
 800203c:	b25b      	sxtb	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	733b      	strb	r3, [r7, #12]
		txBuffer[1] = *(txValue++);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	603a      	str	r2, [r7, #0]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	737b      	strb	r3, [r7, #13]
		NRF24L01_WriteCSN(RESET);
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff fdfb 	bl	8001c48 <NRF24L01_WriteCSN>
		ret = HAL_SPI_Transmit(&hspi1, txBuffer, 2, HAL_MAX_DELAY);
 8002052:	f107 010c 	add.w	r1, r7, #12
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205a:	2202      	movs	r2, #2
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <NRF24L01_WriteRegister+0x68>)
 800205e:	f002 fd94 	bl	8004b8a <HAL_SPI_Transmit>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]
		NRF24L01_WriteCSN(SET);
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff fdee 	bl	8001c48 <NRF24L01_WriteCSN>
	while(length--){
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	71ba      	strb	r2, [r7, #6]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1d9      	bne.n	800202a <NRF24L01_WriteRegister+0x12>
	}

	return ret;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000038c 	.word	0x2000038c

08002084 <NFR24L01_SendCommand>:

HAL_StatusTypeDef NFR24L01_SendCommand(uint8_t cmd){
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	NRF24L01_WriteCSN(RESET);
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff fdda 	bl	8001c48 <NRF24L01_WriteCSN>
	ret = HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8002094:	1df9      	adds	r1, r7, #7
 8002096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800209a:	2201      	movs	r2, #1
 800209c:	4806      	ldr	r0, [pc, #24]	; (80020b8 <NFR24L01_SendCommand+0x34>)
 800209e:	f002 fd74 	bl	8004b8a <HAL_SPI_Transmit>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]
	NRF24L01_WriteCSN(SET);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7ff fdce 	bl	8001c48 <NRF24L01_WriteCSN>
	return ret;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000038c 	.word	0x2000038c

080020bc <NFR24L01_FlushTx>:


HAL_StatusTypeDef NFR24L01_FlushTx(void){
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	return NFR24L01_SendCommand(FLUSH_TX);
 80020c0:	20e1      	movs	r0, #225	; 0xe1
 80020c2:	f7ff ffdf 	bl	8002084 <NFR24L01_SendCommand>
 80020c6:	4603      	mov	r3, r0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}

080020cc <NFR24L01_FlushRx>:

HAL_StatusTypeDef NFR24L01_FlushRx(void){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	return NFR24L01_SendCommand(FLUSH_RX);
 80020d0:	20e2      	movs	r0, #226	; 0xe2
 80020d2:	f7ff ffd7 	bl	8002084 <NFR24L01_SendCommand>
 80020d6:	4603      	mov	r3, r0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}

080020dc <NFR24L01_SetChannel>:

HAL_StatusTypeDef NFR24L01_SetChannel(uint8_t channel){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
	channel%=128;
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	71fb      	strb	r3, [r7, #7]
	return NRF24L01_WriteRegister(RF_CH, &channel, 1);
 80020f0:	1dfb      	adds	r3, r7, #7
 80020f2:	2201      	movs	r2, #1
 80020f4:	4619      	mov	r1, r3
 80020f6:	2005      	movs	r0, #5
 80020f8:	f7ff ff8e 	bl	8002018 <NRF24L01_WriteRegister>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <NRF24L01_SetTxMode>:
	txBuffer[0] = 0x00;
	ret = NRF24L01_WriteRegister(FEATURE, txBuffer, 1);
	return ret;
}

HAL_StatusTypeDef NRF24L01_SetTxMode(uint8_t* addr, uint8_t channel){
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret;
	uint8_t config;
	NRF24L01_WriteCE(RESET);
 8002112:	2000      	movs	r0, #0
 8002114:	f7ff fdaa 	bl	8001c6c <NRF24L01_WriteCE>
	NFR24L01_SetChannel(channel);
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ffde 	bl	80020dc <NFR24L01_SetChannel>
	NRF24L01_SetTxAddr(addr);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff43 	bl	8001fac <NRF24L01_SetTxAddr>
	NRF24L01_ReadRegister(CONFIG, &config, 1);
 8002126:	f107 030e 	add.w	r3, r7, #14
 800212a:	2201      	movs	r2, #1
 800212c:	4619      	mov	r1, r3
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff fdae 	bl	8001c90 <NRF24L01_ReadRegister>
	config |= 0x02; // POWER UP
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	b2db      	uxtb	r3, r3
 800213c:	73bb      	strb	r3, [r7, #14]
	config &= 0xF2; // DISABLE CRC and Set TX Mode
 800213e:	7bbb      	ldrb	r3, [r7, #14]
 8002140:	f023 030d 	bic.w	r3, r3, #13
 8002144:	b2db      	uxtb	r3, r3
 8002146:	73bb      	strb	r3, [r7, #14]
	ret = NRF24L01_WriteRegister(CONFIG, &config, 1);
 8002148:	f107 030e 	add.w	r3, r7, #14
 800214c:	2201      	movs	r2, #1
 800214e:	4619      	mov	r1, r3
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff ff61 	bl	8002018 <NRF24L01_WriteRegister>
 8002156:	4603      	mov	r3, r0
 8002158:	73fb      	strb	r3, [r7, #15]
	NRF24L01_WriteCE(SET);
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff fd86 	bl	8001c6c <NRF24L01_WriteCE>
	return ret;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <NRF24L01_SetRxMode>:

HAL_StatusTypeDef NRF24L01_SetRxMode(uint8_t* addr, uint8_t channel, uint8_t pipe){
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
 8002178:	4613      	mov	r3, r2
 800217a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	uint8_t config;
	uint8_t status=0x00;
 800217c:	2300      	movs	r3, #0
 800217e:	737b      	strb	r3, [r7, #13]
	uint8_t payloadSize = PAYLOAD_SIZE;
 8002180:	2320      	movs	r3, #32
 8002182:	733b      	strb	r3, [r7, #12]
	NRF24L01_WriteCE(RESET);
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff fd71 	bl	8001c6c <NRF24L01_WriteCE>
	NRF24L01_WriteRegister(STATUS, &status, 1);
 800218a:	f107 030d 	add.w	r3, r7, #13
 800218e:	2201      	movs	r2, #1
 8002190:	4619      	mov	r1, r3
 8002192:	2007      	movs	r0, #7
 8002194:	f7ff ff40 	bl	8002018 <NRF24L01_WriteRegister>
	NFR24L01_SetChannel(channel);
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff9e 	bl	80020dc <NFR24L01_SetChannel>
	NRF24L01_SetRxAddr(pipe, addr);
 80021a0:	78bb      	ldrb	r3, [r7, #2]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fdab 	bl	8001d00 <NRF24L01_SetRxAddr>

	switch(pipe){
 80021aa:	78bb      	ldrb	r3, [r7, #2]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d863      	bhi.n	8002278 <NRF24L01_SetRxMode+0x10c>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <NRF24L01_SetRxMode+0x4c>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021d1 	.word	0x080021d1
 80021bc:	080021ed 	.word	0x080021ed
 80021c0:	08002209 	.word	0x08002209
 80021c4:	08002225 	.word	0x08002225
 80021c8:	08002241 	.word	0x08002241
 80021cc:	0800225d 	.word	0x0800225d
	case 0:
		NRF24L01_WriteCSN(RESET);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7ff fd39 	bl	8001c48 <NRF24L01_WriteCSN>
		NRF24L01_WriteRegister(RX_PW_P0, &payloadSize, 1);
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	2201      	movs	r2, #1
 80021dc:	4619      	mov	r1, r3
 80021de:	2011      	movs	r0, #17
 80021e0:	f7ff ff1a 	bl	8002018 <NRF24L01_WriteRegister>
		NRF24L01_WriteCSN(SET);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff fd2f 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 80021ea:	e048      	b.n	800227e <NRF24L01_SetRxMode+0x112>
	case 1:
		NRF24L01_WriteCSN(RESET);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff fd2b 	bl	8001c48 <NRF24L01_WriteCSN>
		NRF24L01_WriteRegister(RX_PW_P1, &payloadSize, 1);
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	2201      	movs	r2, #1
 80021f8:	4619      	mov	r1, r3
 80021fa:	2012      	movs	r0, #18
 80021fc:	f7ff ff0c 	bl	8002018 <NRF24L01_WriteRegister>
		NRF24L01_WriteCSN(SET);
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff fd21 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 8002206:	e03a      	b.n	800227e <NRF24L01_SetRxMode+0x112>
	case 2:
		NRF24L01_WriteCSN(RESET);
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff fd1d 	bl	8001c48 <NRF24L01_WriteCSN>
		NRF24L01_WriteRegister(RX_PW_P2, &payloadSize, 1);
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	2201      	movs	r2, #1
 8002214:	4619      	mov	r1, r3
 8002216:	2013      	movs	r0, #19
 8002218:	f7ff fefe 	bl	8002018 <NRF24L01_WriteRegister>
		NRF24L01_WriteCSN(SET);
 800221c:	2001      	movs	r0, #1
 800221e:	f7ff fd13 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 8002222:	e02c      	b.n	800227e <NRF24L01_SetRxMode+0x112>
	case 3:
		NRF24L01_WriteCSN(RESET);
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff fd0f 	bl	8001c48 <NRF24L01_WriteCSN>
		NRF24L01_WriteRegister(RX_PW_P3, &payloadSize, 1);
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	2201      	movs	r2, #1
 8002230:	4619      	mov	r1, r3
 8002232:	2014      	movs	r0, #20
 8002234:	f7ff fef0 	bl	8002018 <NRF24L01_WriteRegister>
		NRF24L01_WriteCSN(SET);
 8002238:	2001      	movs	r0, #1
 800223a:	f7ff fd05 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 800223e:	e01e      	b.n	800227e <NRF24L01_SetRxMode+0x112>
	case 4:
		NRF24L01_WriteCSN(RESET);
 8002240:	2000      	movs	r0, #0
 8002242:	f7ff fd01 	bl	8001c48 <NRF24L01_WriteCSN>
		NRF24L01_WriteRegister(RX_PW_P4, &payloadSize, 1);
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	2201      	movs	r2, #1
 800224c:	4619      	mov	r1, r3
 800224e:	2015      	movs	r0, #21
 8002250:	f7ff fee2 	bl	8002018 <NRF24L01_WriteRegister>
		NRF24L01_WriteCSN(SET);
 8002254:	2001      	movs	r0, #1
 8002256:	f7ff fcf7 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 800225a:	e010      	b.n	800227e <NRF24L01_SetRxMode+0x112>
	case 5:
		NRF24L01_WriteCSN(RESET);
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff fcf3 	bl	8001c48 <NRF24L01_WriteCSN>
		NRF24L01_WriteRegister(RX_PW_P5, &payloadSize, 1);
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	2201      	movs	r2, #1
 8002268:	4619      	mov	r1, r3
 800226a:	2016      	movs	r0, #22
 800226c:	f7ff fed4 	bl	8002018 <NRF24L01_WriteRegister>
		NRF24L01_WriteCSN(SET);
 8002270:	2001      	movs	r0, #1
 8002272:	f7ff fce9 	bl	8001c48 <NRF24L01_WriteCSN>
		break;
 8002276:	e002      	b.n	800227e <NRF24L01_SetRxMode+0x112>

	default :
		ret = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
		break;
 800227c:	bf00      	nop
	}

	NRF24L01_ReadRegister(CONFIG, &config, 1);
 800227e:	f107 030e 	add.w	r3, r7, #14
 8002282:	2201      	movs	r2, #1
 8002284:	4619      	mov	r1, r3
 8002286:	2000      	movs	r0, #0
 8002288:	f7ff fd02 	bl	8001c90 <NRF24L01_ReadRegister>
	config |= 0x03; // POWER UP and Set RX Mode
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	f043 0303 	orr.w	r3, r3, #3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	73bb      	strb	r3, [r7, #14]
	config &= 0xF3; // DISABLE CRC
 8002296:	7bbb      	ldrb	r3, [r7, #14]
 8002298:	f023 030c 	bic.w	r3, r3, #12
 800229c:	b2db      	uxtb	r3, r3
 800229e:	73bb      	strb	r3, [r7, #14]
	ret = NRF24L01_WriteRegister(CONFIG, &config, 1);
 80022a0:	f107 030e 	add.w	r3, r7, #14
 80022a4:	2201      	movs	r2, #1
 80022a6:	4619      	mov	r1, r3
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7ff feb5 	bl	8002018 <NRF24L01_WriteRegister>
 80022ae:	4603      	mov	r3, r0
 80022b0:	73fb      	strb	r3, [r7, #15]
	NRF24L01_WriteCE(SET);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7ff fcda 	bl	8001c6c <NRF24L01_WriteCE>

	return ret;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop

080022c4 <NRF24L01_WritePayload>:

HAL_StatusTypeDef NRF24L01_WritePayload(uint8_t* data, uint8_t length){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08c      	sub	sp, #48	; 0x30
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret;
	uint8_t fifoStatus;
	uint8_t payload[PAYLOAD_SIZE];
	if(length>PAYLOAD_SIZE) length=PAYLOAD_SIZE;
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d901      	bls.n	80022da <NRF24L01_WritePayload+0x16>
 80022d6:	2320      	movs	r3, #32
 80022d8:	70fb      	strb	r3, [r7, #3]
	memcpy(payload,data,length);
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f007 fa1c 	bl	8009720 <memcpy>
	memcpy(payload+length,NULL,PAYLOAD_SIZE-length);
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	f107 020c 	add.w	r2, r7, #12
 80022ee:	18d0      	adds	r0, r2, r3
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f1c3 0320 	rsb	r3, r3, #32
 80022f6:	461a      	mov	r2, r3
 80022f8:	2100      	movs	r1, #0
 80022fa:	f007 fa11 	bl	8009720 <memcpy>
	NFR24L01_SendCommand(W_TX_PAYLOAD);
 80022fe:	20a0      	movs	r0, #160	; 0xa0
 8002300:	f7ff fec0 	bl	8002084 <NFR24L01_SendCommand>
	NRF24L01_WriteCSN(RESET);
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fc9f 	bl	8001c48 <NRF24L01_WriteCSN>
	HAL_SPI_Transmit(&hspi1, payload, PAYLOAD_SIZE, 1000);
 800230a:	f107 010c 	add.w	r1, r7, #12
 800230e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002312:	2220      	movs	r2, #32
 8002314:	480f      	ldr	r0, [pc, #60]	; (8002354 <NRF24L01_WritePayload+0x90>)
 8002316:	f002 fc38 	bl	8004b8a <HAL_SPI_Transmit>
	NRF24L01_WriteCSN(SET);
 800231a:	2001      	movs	r0, #1
 800231c:	f7ff fc94 	bl	8001c48 <NRF24L01_WriteCSN>
	HAL_Delay(1);
 8002320:	2001      	movs	r0, #1
 8002322:	f000 ff0b 	bl	800313c <HAL_Delay>
	NRF24L01_ReadRegister(FIFO_STATUS, &fifoStatus, 1);
 8002326:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800232a:	2201      	movs	r2, #1
 800232c:	4619      	mov	r1, r3
 800232e:	2017      	movs	r0, #23
 8002330:	f7ff fcae 	bl	8001c90 <NRF24L01_ReadRegister>
//	stringLength = snprintf((char *) uartTxBuffer,32,"Fifo Status : 0x%2x\r\n",0x01&(1<<TX_EMPTY));
//	HAL_UART_Transmit(&huart2, uartTxBuffer, stringLength, 100);
//	HAL_Delay(100);


	if((fifoStatus&(1<<TX_EMPTY))){
 8002334:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <NRF24L01_WritePayload+0x80>
		return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e002      	b.n	800234a <NRF24L01_WritePayload+0x86>
	}
	else{
		NFR24L01_FlushTx();
 8002344:	f7ff feba 	bl	80020bc <NFR24L01_FlushTx>
		return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
	}

}
 800234a:	4618      	mov	r0, r3
 800234c:	3730      	adds	r7, #48	; 0x30
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000038c 	.word	0x2000038c

08002358 <NRF24L01_ReadPayload>:

HAL_StatusTypeDef NRF24L01_ReadPayload(uint8_t* data, uint8_t length){
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b08c      	sub	sp, #48	; 0x30
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret;
	uint8_t status;
	uint8_t payload[PAYLOAD_SIZE];
	memcpy(payload,0xFF,PAYLOAD_SIZE);
 8002364:	23ff      	movs	r3, #255	; 0xff
 8002366:	f107 040c 	add.w	r4, r7, #12
 800236a:	461d      	mov	r5, r3
 800236c:	6828      	ldr	r0, [r5, #0]
 800236e:	6869      	ldr	r1, [r5, #4]
 8002370:	68aa      	ldr	r2, [r5, #8]
 8002372:	68eb      	ldr	r3, [r5, #12]
 8002374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002376:	6928      	ldr	r0, [r5, #16]
 8002378:	6969      	ldr	r1, [r5, #20]
 800237a:	69aa      	ldr	r2, [r5, #24]
 800237c:	69eb      	ldr	r3, [r5, #28]
 800237e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	NRF24L01_WriteCSN(RESET);
 8002380:	2000      	movs	r0, #0
 8002382:	f7ff fc61 	bl	8001c48 <NRF24L01_WriteCSN>
	NFR24L01_SendCommand(R_RX_PAYLOAD);
 8002386:	2061      	movs	r0, #97	; 0x61
 8002388:	f7ff fe7c 	bl	8002084 <NFR24L01_SendCommand>
	ret = HAL_SPI_Receive(&hspi1, payload, PAYLOAD_SIZE, 1000);
 800238c:	f107 010c 	add.w	r1, r7, #12
 8002390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002394:	2220      	movs	r2, #32
 8002396:	480c      	ldr	r0, [pc, #48]	; (80023c8 <NRF24L01_ReadPayload+0x70>)
 8002398:	f002 fd65 	bl	8004e66 <HAL_SPI_Receive>
 800239c:	4603      	mov	r3, r0
 800239e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	NRF24L01_WriteCSN(SET);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f7ff fc50 	bl	8001c48 <NRF24L01_WriteCSN>
	NFR24L01_FlushRx();
 80023a8:	f7ff fe90 	bl	80020cc <NFR24L01_FlushRx>
	memcpy(data,payload,length);
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f007 f9b3 	bl	8009720 <memcpy>
	return ret;
 80023ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3730      	adds	r7, #48	; 0x30
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bdb0      	pop	{r4, r5, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000038c 	.word	0x2000038c

080023cc <NF24L01_IsDataAvailable>:

uint8_t NF24L01_IsDataAvailable(uint8_t pipe){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
	uint8_t rxStatus;
	uint8_t txStatus;
	NRF24L01_ReadRegister(STATUS, &rxStatus, 1);
 80023d6:	f107 030f 	add.w	r3, r7, #15
 80023da:	2201      	movs	r2, #1
 80023dc:	4619      	mov	r1, r3
 80023de:	2007      	movs	r0, #7
 80023e0:	f7ff fc56 	bl	8001c90 <NRF24L01_ReadRegister>
	//if ((rxStatus&(1<<RX_DR))&&(rxStatus&(pipe<<1))){
	if (rxStatus&(1<<RX_DR)){
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <NF24L01_IsDataAvailable+0x38>
		txStatus = 1<<6;
 80023ee:	2340      	movs	r3, #64	; 0x40
 80023f0:	73bb      	strb	r3, [r7, #14]
		NRF24L01_WriteRegister(STATUS, &txStatus, 1);
 80023f2:	f107 030e 	add.w	r3, r7, #14
 80023f6:	2201      	movs	r2, #1
 80023f8:	4619      	mov	r1, r3
 80023fa:	2007      	movs	r0, #7
 80023fc:	f7ff fe0c 	bl	8002018 <NRF24L01_WriteRegister>
		return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <NF24L01_IsDataAvailable+0x3a>
	}
	return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <MX_SPI1_Init+0x74>)
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <MX_SPI1_Init+0x78>)
 8002418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <MX_SPI1_Init+0x74>)
 800241c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <MX_SPI1_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <MX_SPI1_Init+0x74>)
 800242a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800242e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MX_SPI1_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <MX_SPI1_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <MX_SPI1_Init+0x74>)
 800243e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002442:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MX_SPI1_Init+0x74>)
 8002446:	2220      	movs	r2, #32
 8002448:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <MX_SPI1_Init+0x74>)
 800244c:	2200      	movs	r2, #0
 800244e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MX_SPI1_Init+0x74>)
 8002452:	2200      	movs	r2, #0
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <MX_SPI1_Init+0x74>)
 8002458:	2200      	movs	r2, #0
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <MX_SPI1_Init+0x74>)
 800245e:	2207      	movs	r2, #7
 8002460:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <MX_SPI1_Init+0x74>)
 8002464:	2200      	movs	r2, #0
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <MX_SPI1_Init+0x74>)
 800246a:	2208      	movs	r2, #8
 800246c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_SPI1_Init+0x74>)
 8002470:	f002 fae0 	bl	8004a34 <HAL_SPI_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800247a:	f7ff fac1 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000038c 	.word	0x2000038c
 8002488:	40013000 	.word	0x40013000

0800248c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_SPI_MspInit+0x7c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d127      	bne.n	80024fe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <HAL_SPI_MspInit+0x80>)
 80024b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <HAL_SPI_MspInit+0x80>)
 80024b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024b8:	6613      	str	r3, [r2, #96]	; 0x60
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_SPI_MspInit+0x80>)
 80024bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_SPI_MspInit+0x80>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ca:	4a10      	ldr	r2, [pc, #64]	; (800250c <HAL_SPI_MspInit+0x80>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <HAL_SPI_MspInit+0x80>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024de:	2338      	movs	r3, #56	; 0x38
 80024e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ee:	2305      	movs	r3, #5
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <HAL_SPI_MspInit+0x84>)
 80024fa:	f000 ffe1 	bl	80034c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024fe:	bf00      	nop
 8002500:	3728      	adds	r7, #40	; 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40013000 	.word	0x40013000
 800250c:	40021000 	.word	0x40021000
 8002510:	48000400 	.word	0x48000400

08002514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_MspInit+0x44>)
 800251c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_MspInit+0x44>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6613      	str	r3, [r2, #96]	; 0x60
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_MspInit+0x44>)
 8002528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_MspInit+0x44>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_MspInit+0x44>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	6593      	str	r3, [r2, #88]	; 0x58
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_MspInit+0x44>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08c      	sub	sp, #48	; 0x30
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_InitTick+0xcc>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <HAL_InitTick+0xcc>)
 8002578:	f043 0310 	orr.w	r3, r3, #16
 800257c:	6593      	str	r3, [r2, #88]	; 0x58
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_InitTick+0xcc>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800258a:	f107 020c 	add.w	r2, r7, #12
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f001 ffe5 	bl	8004564 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800259a:	f001 ffb7 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 800259e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	4a22      	ldr	r2, [pc, #136]	; (800262c <HAL_InitTick+0xd0>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	0c9b      	lsrs	r3, r3, #18
 80025aa:	3b01      	subs	r3, #1
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_InitTick+0xd4>)
 80025b0:	4a20      	ldr	r2, [pc, #128]	; (8002634 <HAL_InitTick+0xd8>)
 80025b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025b4:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <HAL_InitTick+0xd4>)
 80025b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025bc:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_InitTick+0xd4>)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_InitTick+0xd4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_InitTick+0xd4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80025ce:	4818      	ldr	r0, [pc, #96]	; (8002630 <HAL_InitTick+0xd4>)
 80025d0:	f003 f948 	bl	8005864 <HAL_TIM_Base_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80025da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11b      	bne.n	800261a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80025e2:	4813      	ldr	r0, [pc, #76]	; (8002630 <HAL_InitTick+0xd4>)
 80025e4:	f003 f9f8 	bl	80059d8 <HAL_TIM_Base_Start_IT>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80025ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d111      	bne.n	800261a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025f6:	2036      	movs	r0, #54	; 0x36
 80025f8:	f000 fe94 	bl	8003324 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b0f      	cmp	r3, #15
 8002600:	d808      	bhi.n	8002614 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002602:	2200      	movs	r2, #0
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	2036      	movs	r0, #54	; 0x36
 8002608:	f000 fe72 	bl	80032f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_InitTick+0xdc>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e002      	b.n	800261a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800261a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800261e:	4618      	mov	r0, r3
 8002620:	3730      	adds	r7, #48	; 0x30
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	431bde83 	.word	0x431bde83
 8002630:	200003f0 	.word	0x200003f0
 8002634:	40001000 	.word	0x40001000
 8002638:	200000e4 	.word	0x200000e4

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <NMI_Handler+0x4>

08002642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <MemManage_Handler+0x4>

0800264e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <BusFault_Handler+0x4>

08002654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <UsageFault_Handler+0x4>

0800265a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <USART2_IRQHandler+0x10>)
 800269a:	f005 f90d 	bl	80078b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200005bc 	.word	0x200005bc

080026a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <TIM6_DAC_IRQHandler+0x10>)
 80026ae:	f003 fd29 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200003f0 	.word	0x200003f0

080026bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <TIM7_IRQHandler+0x10>)
 80026c2:	f003 fd1f 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000570 	.word	0x20000570

080026d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
	return 1;
 80026d4:	2301      	movs	r3, #1
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_kill>:

int _kill(int pid, int sig)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026ea:	f006 ffef 	bl	80096cc <__errno>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2216      	movs	r2, #22
 80026f2:	601a      	str	r2, [r3, #0]
	return -1;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_exit>:

void _exit (int status)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ffe7 	bl	80026e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002712:	e7fe      	b.n	8002712 <_exit+0x12>

08002714 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e00a      	b.n	800273c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002726:	f3af 8000 	nop.w
 800272a:	4601      	mov	r1, r0
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	60ba      	str	r2, [r7, #8]
 8002732:	b2ca      	uxtb	r2, r1
 8002734:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3301      	adds	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	dbf0      	blt.n	8002726 <_read+0x12>
	}

return len;
 8002744:	687b      	ldr	r3, [r7, #4]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e009      	b.n	8002774 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	60ba      	str	r2, [r7, #8]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3301      	adds	r3, #1
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	429a      	cmp	r2, r3
 800277a:	dbf1      	blt.n	8002760 <_write+0x12>
	}
	return len;
 800277c:	687b      	ldr	r3, [r7, #4]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <_close>:

int _close(int file)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
	return -1;
 800278e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ae:	605a      	str	r2, [r3, #4]
	return 0;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <_isatty>:

int _isatty(int file)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
	return 1;
 80027c6:	2301      	movs	r3, #1
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
	return 0;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <_sbrk+0x5c>)
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <_sbrk+0x60>)
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <_sbrk+0x64>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <_sbrk+0x64>)
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <_sbrk+0x68>)
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <_sbrk+0x64>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	429a      	cmp	r2, r3
 800281e:	d207      	bcs.n	8002830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002820:	f006 ff54 	bl	80096cc <__errno>
 8002824:	4603      	mov	r3, r0
 8002826:	220c      	movs	r2, #12
 8002828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282e:	e009      	b.n	8002844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <_sbrk+0x64>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <_sbrk+0x64>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	4a05      	ldr	r2, [pc, #20]	; (8002854 <_sbrk+0x64>)
 8002840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002842:	68fb      	ldr	r3, [r7, #12]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20008000 	.word	0x20008000
 8002850:	00000400 	.word	0x00000400
 8002854:	2000043c 	.word	0x2000043c
 8002858:	20000660 	.word	0x20000660

0800285c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <SystemInit+0x20>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <SystemInit+0x20>)
 8002868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800286c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b09c      	sub	sp, #112	; 0x70
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002886:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
 80028b0:	615a      	str	r2, [r3, #20]
 80028b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	2234      	movs	r2, #52	; 0x34
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f006 ff3e 	bl	800973c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028c0:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <MX_TIM1_Init+0x188>)
 80028c2:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <MX_TIM1_Init+0x18c>)
 80028c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 80028c6:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <MX_TIM1_Init+0x188>)
 80028c8:	220a      	movs	r2, #10
 80028ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028cc:	4b4e      	ldr	r3, [pc, #312]	; (8002a08 <MX_TIM1_Init+0x188>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80028d2:	4b4d      	ldr	r3, [pc, #308]	; (8002a08 <MX_TIM1_Init+0x188>)
 80028d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028da:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <MX_TIM1_Init+0x188>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028e0:	4b49      	ldr	r3, [pc, #292]	; (8002a08 <MX_TIM1_Init+0x188>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028e6:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <MX_TIM1_Init+0x188>)
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028ec:	4846      	ldr	r0, [pc, #280]	; (8002a08 <MX_TIM1_Init+0x188>)
 80028ee:	f002 ffb9 	bl	8005864 <HAL_TIM_Base_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80028f8:	f7ff f882 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002900:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002902:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002906:	4619      	mov	r1, r3
 8002908:	483f      	ldr	r0, [pc, #252]	; (8002a08 <MX_TIM1_Init+0x188>)
 800290a:	f003 fe8f 	bl	800662c <HAL_TIM_ConfigClockSource>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002914:	f7ff f874 	bl	8001a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002918:	483b      	ldr	r0, [pc, #236]	; (8002a08 <MX_TIM1_Init+0x188>)
 800291a:	f003 f8c7 	bl	8005aac <HAL_TIM_PWM_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002924:	f7ff f86c 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002934:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002938:	4619      	mov	r1, r3
 800293a:	4833      	ldr	r0, [pc, #204]	; (8002a08 <MX_TIM1_Init+0x188>)
 800293c:	f004 fcf2 	bl	8007324 <HAL_TIMEx_MasterConfigSynchronization>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002946:	f7ff f85b 	bl	8001a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800294a:	2360      	movs	r3, #96	; 0x60
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002952:	2300      	movs	r3, #0
 8002954:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002956:	2300      	movs	r3, #0
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002966:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800296a:	2200      	movs	r2, #0
 800296c:	4619      	mov	r1, r3
 800296e:	4826      	ldr	r0, [pc, #152]	; (8002a08 <MX_TIM1_Init+0x188>)
 8002970:	f003 fd48 	bl	8006404 <HAL_TIM_PWM_ConfigChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800297a:	f7ff f841 	bl	8001a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800297e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002982:	2204      	movs	r2, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4820      	ldr	r0, [pc, #128]	; (8002a08 <MX_TIM1_Init+0x188>)
 8002988:	f003 fd3c 	bl	8006404 <HAL_TIM_PWM_ConfigChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002992:	f7ff f835 	bl	8001a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002996:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800299a:	2208      	movs	r2, #8
 800299c:	4619      	mov	r1, r3
 800299e:	481a      	ldr	r0, [pc, #104]	; (8002a08 <MX_TIM1_Init+0x188>)
 80029a0:	f003 fd30 	bl	8006404 <HAL_TIM_PWM_ConfigChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80029aa:	f7ff f829 	bl	8001a00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80029cc:	2300      	movs	r3, #0
 80029ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80029de:	2300      	movs	r3, #0
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4807      	ldr	r0, [pc, #28]	; (8002a08 <MX_TIM1_Init+0x188>)
 80029ec:	f004 fd1c 	bl	8007428 <HAL_TIMEx_ConfigBreakDeadTime>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80029f6:	f7ff f803 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029fa:	4803      	ldr	r0, [pc, #12]	; (8002a08 <MX_TIM1_Init+0x188>)
 80029fc:	f000 fa1e 	bl	8002e3c <HAL_TIM_MspPostInit>

}
 8002a00:	bf00      	nop
 8002a02:	3770      	adds	r7, #112	; 0x70
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000440 	.word	0x20000440
 8002a0c:	40012c00 	.word	0x40012c00

08002a10 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	; 0x30
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a16:	f107 030c 	add.w	r3, r7, #12
 8002a1a:	2224      	movs	r2, #36	; 0x24
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f006 fe8c 	bl	800973c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a24:	463b      	mov	r3, r7
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <MX_TIM2_Init+0xa4>)
 8002a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <MX_TIM2_Init+0xa4>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <MX_TIM2_Init+0xa4>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <MX_TIM2_Init+0xa4>)
 8002a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <MX_TIM2_Init+0xa4>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <MX_TIM2_Init+0xa4>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a56:	2303      	movs	r3, #3
 8002a58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	4619      	mov	r1, r3
 8002a80:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <MX_TIM2_Init+0xa4>)
 8002a82:	f003 fa0b 	bl	8005e9c <HAL_TIM_Encoder_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002a8c:	f7fe ffb8 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a98:	463b      	mov	r3, r7
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_TIM2_Init+0xa4>)
 8002a9e:	f004 fc41 	bl	8007324 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002aa8:	f7fe ffaa 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002aac:	bf00      	nop
 8002aae:	3730      	adds	r7, #48	; 0x30
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000048c 	.word	0x2000048c

08002ab8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002abe:	f107 030c 	add.w	r3, r7, #12
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f006 fe38 	bl	800973c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002acc:	463b      	mov	r3, r7
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ad6:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <MX_TIM3_Init+0xa4>)
 8002ad8:	4a21      	ldr	r2, [pc, #132]	; (8002b60 <MX_TIM3_Init+0xa8>)
 8002ada:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <MX_TIM3_Init+0xa4>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <MX_TIM3_Init+0xa4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <MX_TIM3_Init+0xa4>)
 8002aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <MX_TIM3_Init+0xa4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <MX_TIM3_Init+0xa4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002afc:	2303      	movs	r3, #3
 8002afe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b04:	2301      	movs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b14:	2301      	movs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	4619      	mov	r1, r3
 8002b26:	480d      	ldr	r0, [pc, #52]	; (8002b5c <MX_TIM3_Init+0xa4>)
 8002b28:	f003 f9b8 	bl	8005e9c <HAL_TIM_Encoder_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002b32:	f7fe ff65 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b3e:	463b      	mov	r3, r7
 8002b40:	4619      	mov	r1, r3
 8002b42:	4806      	ldr	r0, [pc, #24]	; (8002b5c <MX_TIM3_Init+0xa4>)
 8002b44:	f004 fbee 	bl	8007324 <HAL_TIMEx_MasterConfigSynchronization>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002b4e:	f7fe ff57 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b52:	bf00      	nop
 8002b54:	3730      	adds	r7, #48	; 0x30
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200004d8 	.word	0x200004d8
 8002b60:	40000400 	.word	0x40000400

08002b64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08c      	sub	sp, #48	; 0x30
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f006 fde2 	bl	800973c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b78:	463b      	mov	r3, r7
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <MX_TIM4_Init+0xa4>)
 8002b84:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <MX_TIM4_Init+0xa8>)
 8002b86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <MX_TIM4_Init+0xa4>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <MX_TIM4_Init+0xa4>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_TIM4_Init+0xa4>)
 8002b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_TIM4_Init+0xa4>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MX_TIM4_Init+0xa4>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	480d      	ldr	r0, [pc, #52]	; (8002c08 <MX_TIM4_Init+0xa4>)
 8002bd4:	f003 f962 	bl	8005e9c <HAL_TIM_Encoder_Init>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002bde:	f7fe ff0f 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bea:	463b      	mov	r3, r7
 8002bec:	4619      	mov	r1, r3
 8002bee:	4806      	ldr	r0, [pc, #24]	; (8002c08 <MX_TIM4_Init+0xa4>)
 8002bf0:	f004 fb98 	bl	8007324 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002bfa:	f7fe ff01 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	3730      	adds	r7, #48	; 0x30
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000524 	.word	0x20000524
 8002c0c:	40000800 	.word	0x40000800

08002c10 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <MX_TIM7_Init+0x68>)
 8002c22:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <MX_TIM7_Init+0x6c>)
 8002c24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1700-1;
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <MX_TIM7_Init+0x68>)
 8002c28:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8002c2c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <MX_TIM7_Init+0x68>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <MX_TIM7_Init+0x68>)
 8002c36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c3a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <MX_TIM7_Init+0x68>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <MX_TIM7_Init+0x68>)
 8002c44:	f002 fe0e 	bl	8005864 <HAL_TIM_Base_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002c4e:	f7fe fed7 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4806      	ldr	r0, [pc, #24]	; (8002c78 <MX_TIM7_Init+0x68>)
 8002c60:	f004 fb60 	bl	8007324 <HAL_TIMEx_MasterConfigSynchronization>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002c6a:	f7fe fec9 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000570 	.word	0x20000570
 8002c7c:	40001400 	.word	0x40001400

08002c80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_TIM_Base_MspInit+0x68>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10c      	bne.n	8002cac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_TIM_Base_MspInit+0x6c>)
 8002c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c96:	4a15      	ldr	r2, [pc, #84]	; (8002cec <HAL_TIM_Base_MspInit+0x6c>)
 8002c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c9e:	4b13      	ldr	r3, [pc, #76]	; (8002cec <HAL_TIM_Base_MspInit+0x6c>)
 8002ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002caa:	e018      	b.n	8002cde <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <HAL_TIM_Base_MspInit+0x70>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d113      	bne.n	8002cde <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_TIM_Base_MspInit+0x6c>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <HAL_TIM_Base_MspInit+0x6c>)
 8002cbc:	f043 0320 	orr.w	r3, r3, #32
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_TIM_Base_MspInit+0x6c>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2037      	movs	r0, #55	; 0x37
 8002cd4:	f000 fb0c 	bl	80032f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002cd8:	2037      	movs	r0, #55	; 0x37
 8002cda:	f000 fb23 	bl	8003324 <HAL_NVIC_EnableIRQ>
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40001400 	.word	0x40001400

08002cf4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08e      	sub	sp, #56	; 0x38
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d129      	bne.n	8002d6a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d16:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1a:	4a45      	ldr	r2, [pc, #276]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6593      	str	r3, [r2, #88]	; 0x58
 8002d22:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	623b      	str	r3, [r7, #32]
 8002d2c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	4a3f      	ldr	r2, [pc, #252]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d46:	2303      	movs	r3, #3
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d56:	2301      	movs	r3, #1
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d64:	f000 fbac 	bl	80034c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d68:	e05d      	b.n	8002e26 <HAL_TIM_Encoder_MspInit+0x132>
  else if(tim_encoderHandle->Instance==TIM3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a31      	ldr	r2, [pc, #196]	; (8002e34 <HAL_TIM_Encoder_MspInit+0x140>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d129      	bne.n	8002dc8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d74:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	4a2d      	ldr	r2, [pc, #180]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d7a:	f043 0302 	orr.w	r3, r3, #2
 8002d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d80:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d90:	4a27      	ldr	r2, [pc, #156]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002da4:	2350      	movs	r3, #80	; 0x50
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002db4:	2302      	movs	r3, #2
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc2:	f000 fb7d 	bl	80034c0 <HAL_GPIO_Init>
}
 8002dc6:	e02e      	b.n	8002e26 <HAL_TIM_Encoder_MspInit+0x132>
  else if(tim_encoderHandle->Instance==TIM4)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <HAL_TIM_Encoder_MspInit+0x144>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d129      	bne.n	8002e26 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	4a10      	ldr	r2, [pc, #64]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <HAL_TIM_Encoder_MspInit+0x13c>)
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e10:	2300      	movs	r3, #0
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002e14:	230a      	movs	r3, #10
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e22:	f000 fb4d 	bl	80034c0 <HAL_GPIO_Init>
}
 8002e26:	bf00      	nop
 8002e28:	3738      	adds	r7, #56	; 0x38
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40000800 	.word	0x40000800

08002e3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2e      	ldr	r2, [pc, #184]	; (8002f14 <HAL_TIM_MspPostInit+0xd8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d155      	bne.n	8002f0a <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_TIM_MspPostInit+0xdc>)
 8002e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <HAL_TIM_MspPostInit+0xdc>)
 8002e64:	f043 0320 	orr.w	r3, r3, #32
 8002e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e6a:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_TIM_MspPostInit+0xdc>)
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_TIM_MspPostInit+0xdc>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7a:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <HAL_TIM_MspPostInit+0xdc>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_TIM_MspPostInit+0xdc>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <HAL_TIM_MspPostInit+0xdc>)
 8002e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e92:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <HAL_TIM_MspPostInit+0xdc>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <HAL_TIM_MspPostInit+0xdc>)
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002eb6:	2306      	movs	r3, #6
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4816      	ldr	r0, [pc, #88]	; (8002f1c <HAL_TIM_MspPostInit+0xe0>)
 8002ec2:	f000 fafd 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002ec6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002ed8:	2306      	movs	r3, #6
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ee6:	f000 faeb 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002eea:	2301      	movs	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002efa:	2306      	movs	r3, #6
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4619      	mov	r1, r3
 8002f04:	4806      	ldr	r0, [pc, #24]	; (8002f20 <HAL_TIM_MspPostInit+0xe4>)
 8002f06:	f000 fadb 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	; 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	48001400 	.word	0x48001400
 8002f20:	48000400 	.word	0x48000400

08002f24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f2a:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <MX_USART2_UART_Init+0x94>)
 8002f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f36:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f42:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f48:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f54:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f5a:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f6c:	4811      	ldr	r0, [pc, #68]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f6e:	f004 fb66 	bl	800763e <HAL_UART_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002f78:	f7fe fd42 	bl	8001a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	480d      	ldr	r0, [pc, #52]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f80:	f006 fad9 	bl	8009536 <HAL_UARTEx_SetTxFifoThreshold>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f8a:	f7fe fd39 	bl	8001a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4808      	ldr	r0, [pc, #32]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002f92:	f006 fb0e 	bl	80095b2 <HAL_UARTEx_SetRxFifoThreshold>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002f9c:	f7fe fd30 	bl	8001a00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002fa0:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <MX_USART2_UART_Init+0x90>)
 8002fa2:	f006 fa8f 	bl	80094c4 <HAL_UARTEx_DisableFifoMode>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002fac:	f7fe fd28 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	200005bc 	.word	0x200005bc
 8002fb8:	40004400 	.word	0x40004400

08002fbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b09a      	sub	sp, #104	; 0x68
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fd4:	f107 0310 	add.w	r3, r7, #16
 8002fd8:	2244      	movs	r2, #68	; 0x44
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f006 fbad 	bl	800973c <memset>
  if(uartHandle->Instance==USART2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_UART_MspInit+0xb8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d13e      	bne.n	800306a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fec:	2302      	movs	r3, #2
 8002fee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff4:	f107 0310 	add.w	r3, r7, #16
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 fb2b 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003004:	f7fe fcfc 	bl	8001a00 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_UART_MspInit+0xbc>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <HAL_UART_MspInit+0xbc>)
 800300e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003012:	6593      	str	r3, [r2, #88]	; 0x58
 8003014:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_UART_MspInit+0xbc>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003020:	4b15      	ldr	r3, [pc, #84]	; (8003078 <HAL_UART_MspInit+0xbc>)
 8003022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <HAL_UART_MspInit+0xbc>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_UART_MspInit+0xbc>)
 800302e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003038:	230c      	movs	r3, #12
 800303a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303c:	2302      	movs	r3, #2
 800303e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003044:	2300      	movs	r3, #0
 8003046:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003048:	2307      	movs	r3, #7
 800304a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003050:	4619      	mov	r1, r3
 8003052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003056:	f000 fa33 	bl	80034c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	2026      	movs	r0, #38	; 0x26
 8003060:	f000 f946 	bl	80032f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003064:	2026      	movs	r0, #38	; 0x26
 8003066:	f000 f95d 	bl	8003324 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800306a:	bf00      	nop
 800306c:	3768      	adds	r7, #104	; 0x68
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40004400 	.word	0x40004400
 8003078:	40021000 	.word	0x40021000

0800307c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800307c:	480d      	ldr	r0, [pc, #52]	; (80030b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800307e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003080:	480d      	ldr	r0, [pc, #52]	; (80030b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003082:	490e      	ldr	r1, [pc, #56]	; (80030bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003084:	4a0e      	ldr	r2, [pc, #56]	; (80030c0 <LoopForever+0xe>)
  movs r3, #0
 8003086:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003088:	e002      	b.n	8003090 <LoopCopyDataInit>

0800308a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800308a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800308c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800308e:	3304      	adds	r3, #4

08003090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003094:	d3f9      	bcc.n	800308a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003096:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003098:	4c0b      	ldr	r4, [pc, #44]	; (80030c8 <LoopForever+0x16>)
  movs r3, #0
 800309a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800309c:	e001      	b.n	80030a2 <LoopFillZerobss>

0800309e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800309e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a0:	3204      	adds	r2, #4

080030a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a4:	d3fb      	bcc.n	800309e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030a6:	f7ff fbd9 	bl	800285c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030aa:	f006 fb15 	bl	80096d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030ae:	f7fe f859 	bl	8001164 <main>

080030b2 <LoopForever>:

LoopForever:
    b LoopForever
 80030b2:	e7fe      	b.n	80030b2 <LoopForever>
  ldr   r0, =_estack
 80030b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80030b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030bc:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 80030c0:	0800ca7c 	.word	0x0800ca7c
  ldr r2, =_sbss
 80030c4:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 80030c8:	20000660 	.word	0x20000660

080030cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030cc:	e7fe      	b.n	80030cc <ADC1_2_IRQHandler>

080030ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d8:	2003      	movs	r0, #3
 80030da:	f000 f8fe 	bl	80032da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030de:	200f      	movs	r0, #15
 80030e0:	f7ff fa3c 	bl	800255c <HAL_InitTick>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	71fb      	strb	r3, [r7, #7]
 80030ee:	e001      	b.n	80030f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030f0:	f7ff fa10 	bl	8002514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030f4:	79fb      	ldrb	r3, [r7, #7]

}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_IncTick+0x1c>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_IncTick+0x20>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4413      	add	r3, r2
 800310e:	4a03      	ldr	r2, [pc, #12]	; (800311c <HAL_IncTick+0x1c>)
 8003110:	6013      	str	r3, [r2, #0]
}
 8003112:	bf00      	nop
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	2000064c 	.word	0x2000064c
 8003120:	200000e8 	.word	0x200000e8

08003124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return uwTick;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_GetTick+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	2000064c 	.word	0x2000064c

0800313c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff ffee 	bl	8003124 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003154:	d004      	beq.n	8003160 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_Delay+0x40>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4413      	add	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003160:	bf00      	nop
 8003162:	f7ff ffdf 	bl	8003124 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	429a      	cmp	r2, r3
 8003170:	d8f7      	bhi.n	8003162 <HAL_Delay+0x26>
  {
  }
}
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	200000e8 	.word	0x200000e8

08003180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800319c:	4013      	ands	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b2:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	60d3      	str	r3, [r2, #12]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 0307 	and.w	r3, r3, #7
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db0b      	blt.n	800320e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	4907      	ldr	r1, [pc, #28]	; (800321c <__NVIC_EnableIRQ+0x38>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2001      	movs	r0, #1
 8003206:	fa00 f202 	lsl.w	r2, r0, r2
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	; (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff4c 	bl	8003180 <__NVIC_SetPriorityGrouping>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032fe:	f7ff ff63 	bl	80031c8 <__NVIC_GetPriorityGrouping>
 8003302:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	6978      	ldr	r0, [r7, #20]
 800330a:	f7ff ffb3 	bl	8003274 <NVIC_EncodePriority>
 800330e:	4602      	mov	r2, r0
 8003310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff82 	bl	8003220 <__NVIC_SetPriority>
}
 800331c:	bf00      	nop
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff56 	bl	80031e4 <__NVIC_EnableIRQ>
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d005      	beq.n	8003364 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2204      	movs	r2, #4
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
 8003362:	e037      	b.n	80033d4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 020e 	bic.w	r2, r2, #14
 8003372:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003382:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033b0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00c      	beq.n	80033d4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033c8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033d2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d00d      	beq.n	8003426 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2204      	movs	r2, #4
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
 8003424:	e047      	b.n	80034b6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 020e 	bic.w	r2, r2, #14
 8003434:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0201 	bic.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f003 021f 	and.w	r2, r3, #31
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003472:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00c      	beq.n	8003496 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800348a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003494:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	4798      	blx	r3
    }
  }
  return status;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034ce:	e15a      	b.n	8003786 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	4013      	ands	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 814c 	beq.w	8003780 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d005      	beq.n	8003500 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d130      	bne.n	8003562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	2203      	movs	r2, #3
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003536:	2201      	movs	r2, #1
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4013      	ands	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f003 0201 	and.w	r2, r3, #1
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b03      	cmp	r3, #3
 800356c:	d017      	beq.n	800359e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	2203      	movs	r2, #3
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4013      	ands	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d123      	bne.n	80035f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	08da      	lsrs	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3208      	adds	r2, #8
 80035b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	08da      	lsrs	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3208      	adds	r2, #8
 80035ec:	6939      	ldr	r1, [r7, #16]
 80035ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2203      	movs	r2, #3
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 0203 	and.w	r2, r3, #3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80a6 	beq.w	8003780 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003634:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <HAL_GPIO_Init+0x2e4>)
 8003636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003638:	4a5a      	ldr	r2, [pc, #360]	; (80037a4 <HAL_GPIO_Init+0x2e4>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6613      	str	r3, [r2, #96]	; 0x60
 8003640:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <HAL_GPIO_Init+0x2e4>)
 8003642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800364c:	4a56      	ldr	r2, [pc, #344]	; (80037a8 <HAL_GPIO_Init+0x2e8>)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	3302      	adds	r3, #2
 8003654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003658:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	220f      	movs	r2, #15
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003676:	d01f      	beq.n	80036b8 <HAL_GPIO_Init+0x1f8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <HAL_GPIO_Init+0x2ec>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d019      	beq.n	80036b4 <HAL_GPIO_Init+0x1f4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a4b      	ldr	r2, [pc, #300]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_GPIO_Init+0x1f0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a4a      	ldr	r2, [pc, #296]	; (80037b4 <HAL_GPIO_Init+0x2f4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00d      	beq.n	80036ac <HAL_GPIO_Init+0x1ec>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a49      	ldr	r2, [pc, #292]	; (80037b8 <HAL_GPIO_Init+0x2f8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <HAL_GPIO_Init+0x1e8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a48      	ldr	r2, [pc, #288]	; (80037bc <HAL_GPIO_Init+0x2fc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_GPIO_Init+0x1e4>
 80036a0:	2305      	movs	r3, #5
 80036a2:	e00a      	b.n	80036ba <HAL_GPIO_Init+0x1fa>
 80036a4:	2306      	movs	r3, #6
 80036a6:	e008      	b.n	80036ba <HAL_GPIO_Init+0x1fa>
 80036a8:	2304      	movs	r3, #4
 80036aa:	e006      	b.n	80036ba <HAL_GPIO_Init+0x1fa>
 80036ac:	2303      	movs	r3, #3
 80036ae:	e004      	b.n	80036ba <HAL_GPIO_Init+0x1fa>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e002      	b.n	80036ba <HAL_GPIO_Init+0x1fa>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_GPIO_Init+0x1fa>
 80036b8:	2300      	movs	r3, #0
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	f002 0203 	and.w	r2, r2, #3
 80036c0:	0092      	lsls	r2, r2, #2
 80036c2:	4093      	lsls	r3, r2
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036ca:	4937      	ldr	r1, [pc, #220]	; (80037a8 <HAL_GPIO_Init+0x2e8>)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	3302      	adds	r3, #2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_GPIO_Init+0x300>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036fc:	4a30      	ldr	r2, [pc, #192]	; (80037c0 <HAL_GPIO_Init+0x300>)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003702:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_GPIO_Init+0x300>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	43db      	mvns	r3, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003726:	4a26      	ldr	r2, [pc, #152]	; (80037c0 <HAL_GPIO_Init+0x300>)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_GPIO_Init+0x300>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	43db      	mvns	r3, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_GPIO_Init+0x300>)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <HAL_GPIO_Init+0x300>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	43db      	mvns	r3, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800377a:	4a11      	ldr	r2, [pc, #68]	; (80037c0 <HAL_GPIO_Init+0x300>)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3301      	adds	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	f47f ae9d 	bne.w	80034d0 <HAL_GPIO_Init+0x10>
  }
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40010000 	.word	0x40010000
 80037ac:	48000400 	.word	0x48000400
 80037b0:	48000800 	.word	0x48000800
 80037b4:	48000c00 	.word	0x48000c00
 80037b8:	48001000 	.word	0x48001000
 80037bc:	48001400 	.word	0x48001400
 80037c0:	40010400 	.word	0x40010400

080037c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	807b      	strh	r3, [r7, #2]
 80037d0:	4613      	mov	r3, r2
 80037d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037d4:	787b      	ldrb	r3, [r7, #1]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037e0:	e002      	b.n	80037e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037e2:	887a      	ldrh	r2, [r7, #2]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e081      	b.n	800390a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fc10 	bl	8001040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d107      	bne.n	800386e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	e006      	b.n	800387c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800387a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d104      	bne.n	800388e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800388c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800389c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b20      	cmp	r3, #32
 8003926:	d138      	bne.n	800399a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003932:	2302      	movs	r3, #2
 8003934:	e032      	b.n	800399c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2224      	movs	r2, #36	; 0x24
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003964:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e000      	b.n	800399c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800399a:	2302      	movs	r3, #2
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d139      	bne.n	8003a32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e033      	b.n	8003a34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	; 0x24
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d141      	bne.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a4e:	4b4b      	ldr	r3, [pc, #300]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5a:	d131      	bne.n	8003ac0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a5c:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a62:	4a46      	ldr	r2, [pc, #280]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a6c:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a74:	4a41      	ldr	r2, [pc, #260]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a7c:	4b40      	ldr	r3, [pc, #256]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2232      	movs	r2, #50	; 0x32
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	4a3f      	ldr	r2, [pc, #252]	; (8003b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	0c9b      	lsrs	r3, r3, #18
 8003a8e:	3301      	adds	r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a92:	e002      	b.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a9a:	4b38      	ldr	r3, [pc, #224]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa6:	d102      	bne.n	8003aae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f2      	bne.n	8003a94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aae:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aba:	d158      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e057      	b.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac0:	4b2e      	ldr	r3, [pc, #184]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac6:	4a2d      	ldr	r2, [pc, #180]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003acc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ad0:	e04d      	b.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d141      	bne.n	8003b5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ada:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae6:	d131      	bne.n	8003b4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ae8:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aee:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af8:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b00:	4a1e      	ldr	r2, [pc, #120]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2232      	movs	r2, #50	; 0x32
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	4a1c      	ldr	r2, [pc, #112]	; (8003b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	0c9b      	lsrs	r3, r3, #18
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1e:	e002      	b.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b26:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b32:	d102      	bne.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f2      	bne.n	8003b20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b46:	d112      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e011      	b.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b5c:	e007      	b.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b5e:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b66:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	200000e0 	.word	0x200000e0
 8003b84:	431bde83 	.word	0x431bde83

08003b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e306      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d075      	beq.n	8003c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba6:	4b97      	ldr	r3, [pc, #604]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bb0:	4b94      	ldr	r3, [pc, #592]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b0c      	cmp	r3, #12
 8003bbe:	d102      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x3e>
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_OscConfig+0x44>
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d10b      	bne.n	8003be4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	4b8d      	ldr	r3, [pc, #564]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d05b      	beq.n	8003c90 <HAL_RCC_OscConfig+0x108>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d157      	bne.n	8003c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e2e1      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bec:	d106      	bne.n	8003bfc <HAL_RCC_OscConfig+0x74>
 8003bee:	4b85      	ldr	r3, [pc, #532]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a84      	ldr	r2, [pc, #528]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e01d      	b.n	8003c38 <HAL_RCC_OscConfig+0xb0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x98>
 8003c06:	4b7f      	ldr	r3, [pc, #508]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7e      	ldr	r2, [pc, #504]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b7c      	ldr	r3, [pc, #496]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7b      	ldr	r2, [pc, #492]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0xb0>
 8003c20:	4b78      	ldr	r3, [pc, #480]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a77      	ldr	r2, [pc, #476]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b75      	ldr	r3, [pc, #468]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a74      	ldr	r2, [pc, #464]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7ff fa70 	bl	8003124 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7ff fa6c 	bl	8003124 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e2a6      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c5a:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0xc0>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7ff fa5c 	bl	8003124 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7ff fa58 	bl	8003124 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e292      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c82:	4b60      	ldr	r3, [pc, #384]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0xe8>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d075      	beq.n	8003d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c9e:	4b59      	ldr	r3, [pc, #356]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca8:	4b56      	ldr	r3, [pc, #344]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d102      	bne.n	8003cbe <HAL_RCC_OscConfig+0x136>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d002      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x13c>
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d11f      	bne.n	8003d04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc4:	4b4f      	ldr	r3, [pc, #316]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_OscConfig+0x154>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e265      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	4b49      	ldr	r3, [pc, #292]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	061b      	lsls	r3, r3, #24
 8003cea:	4946      	ldr	r1, [pc, #280]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cf0:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <HAL_RCC_OscConfig+0x280>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fc31 	bl	800255c <HAL_InitTick>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d043      	beq.n	8003d88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e251      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d023      	beq.n	8003d54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d0c:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a3c      	ldr	r2, [pc, #240]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7ff fa04 	bl	8003124 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d20:	f7ff fa00 	bl	8003124 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e23a      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d32:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3e:	4b31      	ldr	r3, [pc, #196]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	061b      	lsls	r3, r3, #24
 8003d4c:	492d      	ldr	r1, [pc, #180]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]
 8003d52:	e01a      	b.n	8003d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d54:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7ff f9e0 	bl	8003124 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d68:	f7ff f9dc 	bl	8003124 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e216      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d7a:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x1e0>
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d041      	beq.n	8003e1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d01c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9e:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da4:	4a17      	ldr	r2, [pc, #92]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dae:	f7ff f9b9 	bl	8003124 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db6:	f7ff f9b5 	bl	8003124 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e1ef      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ef      	beq.n	8003db6 <HAL_RCC_OscConfig+0x22e>
 8003dd6:	e020      	b.n	8003e1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dde:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <HAL_RCC_OscConfig+0x27c>)
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7ff f99c 	bl	8003124 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dee:	e00d      	b.n	8003e0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df0:	f7ff f998 	bl	8003124 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d906      	bls.n	8003e0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1d2      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	200000e4 	.word	0x200000e4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e0c:	4b8c      	ldr	r3, [pc, #560]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ea      	bne.n	8003df0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80a6 	beq.w	8003f74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e2c:	4b84      	ldr	r3, [pc, #528]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_OscConfig+0x2b4>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x2b6>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b7f      	ldr	r3, [pc, #508]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	4a7e      	ldr	r2, [pc, #504]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e4e:	4b7c      	ldr	r3, [pc, #496]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5e:	4b79      	ldr	r3, [pc, #484]	; (8004044 <HAL_RCC_OscConfig+0x4bc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e6a:	4b76      	ldr	r3, [pc, #472]	; (8004044 <HAL_RCC_OscConfig+0x4bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a75      	ldr	r2, [pc, #468]	; (8004044 <HAL_RCC_OscConfig+0x4bc>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7ff f955 	bl	8003124 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7ff f951 	bl	8003124 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e18b      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e90:	4b6c      	ldr	r3, [pc, #432]	; (8004044 <HAL_RCC_OscConfig+0x4bc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d108      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x32e>
 8003ea4:	4b66      	ldr	r3, [pc, #408]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	4a65      	ldr	r2, [pc, #404]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eb4:	e024      	b.n	8003f00 <HAL_RCC_OscConfig+0x378>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d110      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x358>
 8003ebe:	4b60      	ldr	r3, [pc, #384]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	4a5e      	ldr	r2, [pc, #376]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003ec6:	f043 0304 	orr.w	r3, r3, #4
 8003eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ece:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	4a5a      	ldr	r2, [pc, #360]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ede:	e00f      	b.n	8003f00 <HAL_RCC_OscConfig+0x378>
 8003ee0:	4b57      	ldr	r3, [pc, #348]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	4a56      	ldr	r2, [pc, #344]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ef0:	4b53      	ldr	r3, [pc, #332]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	4a52      	ldr	r2, [pc, #328]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d016      	beq.n	8003f36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f08:	f7ff f90c 	bl	8003124 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7ff f908 	bl	8003124 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e140      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f26:	4b46      	ldr	r3, [pc, #280]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ed      	beq.n	8003f10 <HAL_RCC_OscConfig+0x388>
 8003f34:	e015      	b.n	8003f62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f36:	f7ff f8f5 	bl	8003124 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7ff f8f1 	bl	8003124 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e129      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f54:	4b3a      	ldr	r3, [pc, #232]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1ed      	bne.n	8003f3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f62:	7ffb      	ldrb	r3, [r7, #31]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d105      	bne.n	8003f74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f68:	4b35      	ldr	r3, [pc, #212]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	4a34      	ldr	r2, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d03c      	beq.n	8003ffa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7ff f8c4 	bl	8003124 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fa0:	f7ff f8c0 	bl	8003124 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e0fa      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fb2:	4b23      	ldr	r3, [pc, #140]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ef      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x418>
 8003fc0:	e01b      	b.n	8003ffa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7ff f8a7 	bl	8003124 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fda:	f7ff f8a3 	bl	8003124 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0dd      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8003fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1ef      	bne.n	8003fda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80d1 	beq.w	80041a6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004004:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b0c      	cmp	r3, #12
 800400e:	f000 808b 	beq.w	8004128 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d15e      	bne.n	80040d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a08      	ldr	r2, [pc, #32]	; (8004040 <HAL_RCC_OscConfig+0x4b8>)
 8004020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004026:	f7ff f87d 	bl	8003124 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402c:	e00c      	b.n	8004048 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402e:	f7ff f879 	bl	8003124 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d905      	bls.n	8004048 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e0b3      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
 8004040:	40021000 	.word	0x40021000
 8004044:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004048:	4b59      	ldr	r3, [pc, #356]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1ec      	bne.n	800402e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004054:	4b56      	ldr	r3, [pc, #344]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	4b56      	ldr	r3, [pc, #344]	; (80041b4 <HAL_RCC_OscConfig+0x62c>)
 800405a:	4013      	ands	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6a11      	ldr	r1, [r2, #32]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004064:	3a01      	subs	r2, #1
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	4311      	orrs	r1, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800406e:	0212      	lsls	r2, r2, #8
 8004070:	4311      	orrs	r1, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004076:	0852      	lsrs	r2, r2, #1
 8004078:	3a01      	subs	r2, #1
 800407a:	0552      	lsls	r2, r2, #21
 800407c:	4311      	orrs	r1, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004082:	0852      	lsrs	r2, r2, #1
 8004084:	3a01      	subs	r2, #1
 8004086:	0652      	lsls	r2, r2, #25
 8004088:	4311      	orrs	r1, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800408e:	06d2      	lsls	r2, r2, #27
 8004090:	430a      	orrs	r2, r1
 8004092:	4947      	ldr	r1, [pc, #284]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 8004094:	4313      	orrs	r3, r2
 8004096:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004098:	4b45      	ldr	r3, [pc, #276]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a44      	ldr	r2, [pc, #272]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 800409e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040a4:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a41      	ldr	r2, [pc, #260]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 80040aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7ff f838 	bl	8003124 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7ff f834 	bl	8003124 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e06e      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	4b39      	ldr	r3, [pc, #228]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x530>
 80040d6:	e066      	b.n	80041a6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d8:	4b35      	ldr	r3, [pc, #212]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a34      	ldr	r2, [pc, #208]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 80040de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80040e4:	4b32      	ldr	r3, [pc, #200]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a31      	ldr	r2, [pc, #196]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80040f0:	4b2f      	ldr	r3, [pc, #188]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a2e      	ldr	r2, [pc, #184]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 80040f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7ff f810 	bl	8003124 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004108:	f7ff f80c 	bl	8003124 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e046      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411a:	4b25      	ldr	r3, [pc, #148]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x580>
 8004126:	e03e      	b.n	80041a6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e039      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004134:	4b1e      	ldr	r3, [pc, #120]	; (80041b0 <HAL_RCC_OscConfig+0x628>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f003 0203 	and.w	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	429a      	cmp	r2, r3
 8004146:	d12c      	bne.n	80041a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	3b01      	subs	r3, #1
 8004154:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d123      	bne.n	80041a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d11b      	bne.n	80041a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d113      	bne.n	80041a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	3b01      	subs	r3, #1
 8004188:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	085b      	lsrs	r3, r3, #1
 800419a:	3b01      	subs	r3, #1
 800419c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d001      	beq.n	80041a6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40021000 	.word	0x40021000
 80041b4:	019f800c 	.word	0x019f800c

080041b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e11e      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d0:	4b91      	ldr	r3, [pc, #580]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d910      	bls.n	8004200 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b8e      	ldr	r3, [pc, #568]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 020f 	bic.w	r2, r3, #15
 80041e6:	498c      	ldr	r1, [pc, #560]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b8a      	ldr	r3, [pc, #552]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e106      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d073      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d129      	bne.n	8004268 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004214:	4b81      	ldr	r3, [pc, #516]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0f4      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004224:	f000 f9d0 	bl	80045c8 <RCC_GetSysClockFreqFromPLLSource>
 8004228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4a7c      	ldr	r2, [pc, #496]	; (8004420 <HAL_RCC_ClockConfig+0x268>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d93f      	bls.n	80042b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004232:	4b7a      	ldr	r3, [pc, #488]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004246:	2b00      	cmp	r3, #0
 8004248:	d033      	beq.n	80042b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800424e:	2b00      	cmp	r3, #0
 8004250:	d12f      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004252:	4b72      	ldr	r3, [pc, #456]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800425a:	4a70      	ldr	r2, [pc, #448]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 800425c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004260:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e024      	b.n	80042b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d107      	bne.n	8004280 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004270:	4b6a      	ldr	r3, [pc, #424]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d109      	bne.n	8004290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0c6      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004280:	4b66      	ldr	r3, [pc, #408]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0be      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004290:	f000 f8ce 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 8004294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4a61      	ldr	r2, [pc, #388]	; (8004420 <HAL_RCC_ClockConfig+0x268>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d909      	bls.n	80042b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800429e:	4b5f      	ldr	r3, [pc, #380]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042a6:	4a5d      	ldr	r2, [pc, #372]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80042a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b2:	4b5a      	ldr	r3, [pc, #360]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f023 0203 	bic.w	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4957      	ldr	r1, [pc, #348]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fe ff2e 	bl	8003124 <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042cc:	f7fe ff2a 	bl	8003124 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e095      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	4b4e      	ldr	r3, [pc, #312]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 020c 	and.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1eb      	bne.n	80042cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d023      	beq.n	8004348 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b43      	ldr	r3, [pc, #268]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a42      	ldr	r2, [pc, #264]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004316:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004324:	4b3d      	ldr	r3, [pc, #244]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800432c:	4a3b      	ldr	r2, [pc, #236]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 800432e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004334:	4b39      	ldr	r3, [pc, #228]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4936      	ldr	r1, [pc, #216]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
 8004346:	e008      	b.n	800435a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d105      	bne.n	800435a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800434e:	4b33      	ldr	r3, [pc, #204]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4a32      	ldr	r2, [pc, #200]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004354:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004358:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800435a:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d21d      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004368:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 020f 	bic.w	r2, r3, #15
 8004370:	4929      	ldr	r1, [pc, #164]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004378:	f7fe fed4 	bl	8003124 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	e00a      	b.n	8004396 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fe fed0 	bl	8003124 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e03b      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1ed      	bne.n	8004380 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b0:	4b1a      	ldr	r3, [pc, #104]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4917      	ldr	r1, [pc, #92]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ce:	4b13      	ldr	r3, [pc, #76]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	490f      	ldr	r1, [pc, #60]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043e2:	f000 f825 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4b0c      	ldr	r3, [pc, #48]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	490c      	ldr	r1, [pc, #48]	; (8004424 <HAL_RCC_ClockConfig+0x26c>)
 80043f4:	5ccb      	ldrb	r3, [r1, r3]
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	fa22 f303 	lsr.w	r3, r2, r3
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <HAL_RCC_ClockConfig+0x270>)
 8004400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe f8a8 	bl	800255c <HAL_InitTick>
 800440c:	4603      	mov	r3, r0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40022000 	.word	0x40022000
 800441c:	40021000 	.word	0x40021000
 8004420:	04c4b400 	.word	0x04c4b400
 8004424:	0800c654 	.word	0x0800c654
 8004428:	200000e0 	.word	0x200000e0
 800442c:	200000e4 	.word	0x200000e4

08004430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004436:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b04      	cmp	r3, #4
 8004440:	d102      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004442:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e047      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004448:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b08      	cmp	r3, #8
 8004452:	d102      	bne.n	800445a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	e03e      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800445a:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b0c      	cmp	r3, #12
 8004464:	d136      	bne.n	80044d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004466:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	3301      	adds	r3, #1
 800447c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d10c      	bne.n	800449e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004484:	4a1a      	ldr	r2, [pc, #104]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800448e:	68d2      	ldr	r2, [r2, #12]
 8004490:	0a12      	lsrs	r2, r2, #8
 8004492:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004496:	fb02 f303 	mul.w	r3, r2, r3
 800449a:	617b      	str	r3, [r7, #20]
      break;
 800449c:	e00c      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800449e:	4a13      	ldr	r2, [pc, #76]	; (80044ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044a8:	68d2      	ldr	r2, [r2, #12]
 80044aa:	0a12      	lsrs	r2, r2, #8
 80044ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044b0:	fb02 f303 	mul.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
      break;
 80044b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	0e5b      	lsrs	r3, r3, #25
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	3301      	adds	r3, #1
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e001      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044d8:	693b      	ldr	r3, [r7, #16]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	00f42400 	.word	0x00f42400
 80044f0:	007a1200 	.word	0x007a1200

080044f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_RCC_GetHCLKFreq+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	200000e0 	.word	0x200000e0

0800450c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004510:	f7ff fff0 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4904      	ldr	r1, [pc, #16]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	0800c664 	.word	0x0800c664

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800453c:	f7ff ffda 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0adb      	lsrs	r3, r3, #11
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4904      	ldr	r1, [pc, #16]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	0800c664 	.word	0x0800c664

08004564 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	220f      	movs	r2, #15
 8004572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004574:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0203 	and.w	r2, r3, #3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800458c:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <HAL_RCC_GetClockConfig+0x5c>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCC_GetClockConfig+0x5c>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	08db      	lsrs	r3, r3, #3
 800459e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80045a6:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <HAL_RCC_GetClockConfig+0x60>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 020f 	and.w	r2, r3, #15
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	601a      	str	r2, [r3, #0]
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40022000 	.word	0x40022000

080045c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ce:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d10c      	bne.n	8004606 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045ec:	4a17      	ldr	r2, [pc, #92]	; (800464c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045f6:	68d2      	ldr	r2, [r2, #12]
 80045f8:	0a12      	lsrs	r2, r2, #8
 80045fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	617b      	str	r3, [r7, #20]
    break;
 8004604:	e00c      	b.n	8004620 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004606:	4a12      	ldr	r2, [pc, #72]	; (8004650 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	4a0e      	ldr	r2, [pc, #56]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	0a12      	lsrs	r2, r2, #8
 8004614:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
    break;
 800461e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004620:	4b09      	ldr	r3, [pc, #36]	; (8004648 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	0e5b      	lsrs	r3, r3, #25
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800463a:	687b      	ldr	r3, [r7, #4]
}
 800463c:	4618      	mov	r0, r3
 800463e:	371c      	adds	r7, #28
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40021000 	.word	0x40021000
 800464c:	007a1200 	.word	0x007a1200
 8004650:	00f42400 	.word	0x00f42400

08004654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800465c:	2300      	movs	r3, #0
 800465e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004660:	2300      	movs	r3, #0
 8004662:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8098 	beq.w	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004676:	4b43      	ldr	r3, [pc, #268]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	4b40      	ldr	r3, [pc, #256]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	4a3f      	ldr	r2, [pc, #252]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468c:	6593      	str	r3, [r2, #88]	; 0x58
 800468e:	4b3d      	ldr	r3, [pc, #244]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469a:	2301      	movs	r3, #1
 800469c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469e:	4b3a      	ldr	r3, [pc, #232]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a39      	ldr	r2, [pc, #228]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046aa:	f7fe fd3b 	bl	8003124 <HAL_GetTick>
 80046ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046b0:	e009      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b2:	f7fe fd37 	bl	8003124 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d902      	bls.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	74fb      	strb	r3, [r7, #19]
        break;
 80046c4:	e005      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c6:	4b30      	ldr	r3, [pc, #192]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ef      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d159      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046d8:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01e      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d019      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046f4:	4b23      	ldr	r3, [pc, #140]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004700:	4b20      	ldr	r3, [pc, #128]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004710:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004720:	4a18      	ldr	r2, [pc, #96]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004732:	f7fe fcf7 	bl	8003124 <HAL_GetTick>
 8004736:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004738:	e00b      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fe fcf3 	bl	8003124 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d902      	bls.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	74fb      	strb	r3, [r7, #19]
            break;
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004752:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ec      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10b      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	4903      	ldr	r1, [pc, #12]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800477c:	e008      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800477e:	7cfb      	ldrb	r3, [r7, #19]
 8004780:	74bb      	strb	r3, [r7, #18]
 8004782:	e005      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004784:	40021000 	.word	0x40021000
 8004788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004790:	7c7b      	ldrb	r3, [r7, #17]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d105      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004796:	4ba6      	ldr	r3, [pc, #664]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	4aa5      	ldr	r2, [pc, #660]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ae:	4ba0      	ldr	r3, [pc, #640]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f023 0203 	bic.w	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	499c      	ldr	r1, [pc, #624]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047d0:	4b97      	ldr	r3, [pc, #604]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f023 020c 	bic.w	r2, r3, #12
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	4994      	ldr	r1, [pc, #592]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047f2:	4b8f      	ldr	r3, [pc, #572]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	498b      	ldr	r1, [pc, #556]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004814:	4b86      	ldr	r3, [pc, #536]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	4983      	ldr	r1, [pc, #524]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004836:	4b7e      	ldr	r3, [pc, #504]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	497a      	ldr	r1, [pc, #488]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004858:	4b75      	ldr	r3, [pc, #468]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	4972      	ldr	r1, [pc, #456]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800487a:	4b6d      	ldr	r3, [pc, #436]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	4969      	ldr	r1, [pc, #420]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800489c:	4b64      	ldr	r3, [pc, #400]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4961      	ldr	r1, [pc, #388]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048be:	4b5c      	ldr	r3, [pc, #368]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	4958      	ldr	r1, [pc, #352]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d015      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048e0:	4b53      	ldr	r3, [pc, #332]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	4950      	ldr	r1, [pc, #320]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fe:	d105      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004900:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a4a      	ldr	r2, [pc, #296]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004914:	2b00      	cmp	r3, #0
 8004916:	d015      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004918:	4b45      	ldr	r3, [pc, #276]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	4942      	ldr	r1, [pc, #264]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004936:	d105      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004938:	4b3d      	ldr	r3, [pc, #244]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a3c      	ldr	r2, [pc, #240]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004942:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d015      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004950:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	4934      	ldr	r1, [pc, #208]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800496e:	d105      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004970:	4b2f      	ldr	r3, [pc, #188]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4a2e      	ldr	r2, [pc, #184]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004988:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	4926      	ldr	r1, [pc, #152]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049a6:	d105      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a8:	4b21      	ldr	r3, [pc, #132]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4a20      	ldr	r2, [pc, #128]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d015      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049c0:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	4918      	ldr	r1, [pc, #96]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049de:	d105      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e0:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d015      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f8:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	490a      	ldr	r1, [pc, #40]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a16:	d105      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a24:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000

08004a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e09d      	b.n	8004b82 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d108      	bne.n	8004a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a56:	d009      	beq.n	8004a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	61da      	str	r2, [r3, #28]
 8004a5e:	e005      	b.n	8004a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fd fd00 	bl	800248c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aac:	d902      	bls.n	8004ab4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e002      	b.n	8004aba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ac2:	d007      	beq.n	8004ad4 <HAL_SPI_Init+0xa0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	ea42 0103 	orr.w	r1, r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	f003 0204 	and.w	r2, r3, #4
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b50:	ea42 0103 	orr.w	r1, r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b088      	sub	sp, #32
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_SPI_Transmit+0x22>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e158      	b.n	8004e5e <HAL_SPI_Transmit+0x2d4>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bb4:	f7fe fab6 	bl	8003124 <HAL_GetTick>
 8004bb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d002      	beq.n	8004bd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bce:	e13d      	b.n	8004e4c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_SPI_Transmit+0x52>
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004be0:	e134      	b.n	8004e4c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2203      	movs	r2, #3
 8004be6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	88fa      	ldrh	r2, [r7, #6]
 8004c00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2c:	d10f      	bne.n	8004c4e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d007      	beq.n	8004c6c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c74:	d94b      	bls.n	8004d0e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_SPI_Transmit+0xfa>
 8004c7e:	8afb      	ldrh	r3, [r7, #22]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d13e      	bne.n	8004d02 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	881a      	ldrh	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	1c9a      	adds	r2, r3, #2
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ca8:	e02b      	b.n	8004d02 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d112      	bne.n	8004cde <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	881a      	ldrh	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	1c9a      	adds	r2, r3, #2
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cdc:	e011      	b.n	8004d02 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cde:	f7fe fa21 	bl	8003124 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d803      	bhi.n	8004cf6 <HAL_SPI_Transmit+0x16c>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cf4:	d102      	bne.n	8004cfc <HAL_SPI_Transmit+0x172>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d00:	e0a4      	b.n	8004e4c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1ce      	bne.n	8004caa <HAL_SPI_Transmit+0x120>
 8004d0c:	e07c      	b.n	8004e08 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Transmit+0x192>
 8004d16:	8afb      	ldrh	r3, [r7, #22]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d170      	bne.n	8004dfe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d912      	bls.n	8004d4c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	881a      	ldrh	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	1c9a      	adds	r2, r3, #2
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b02      	subs	r3, #2
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d4a:	e058      	b.n	8004dfe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	7812      	ldrb	r2, [r2, #0]
 8004d58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d72:	e044      	b.n	8004dfe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d12b      	bne.n	8004dda <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d912      	bls.n	8004db2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	881a      	ldrh	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	1c9a      	adds	r2, r3, #2
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b02      	subs	r3, #2
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004db0:	e025      	b.n	8004dfe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	7812      	ldrb	r2, [r2, #0]
 8004dbe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dd8:	e011      	b.n	8004dfe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dda:	f7fe f9a3 	bl	8003124 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d803      	bhi.n	8004df2 <HAL_SPI_Transmit+0x268>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df0:	d102      	bne.n	8004df8 <HAL_SPI_Transmit+0x26e>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d102      	bne.n	8004dfe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dfc:	e026      	b.n	8004e4c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1b5      	bne.n	8004d74 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	6839      	ldr	r1, [r7, #0]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fce3 	bl	80057d8 <SPI_EndRxTxTransaction>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e000      	b.n	8004e4c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004e4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b088      	sub	sp, #32
 8004e6a:	af02      	add	r7, sp, #8
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e82:	d112      	bne.n	8004eaa <HAL_SPI_Receive+0x44>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10e      	bne.n	8004eaa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e94:	88fa      	ldrh	r2, [r7, #6]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f910 	bl	80050c6 <HAL_SPI_TransmitReceive>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	e109      	b.n	80050be <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_SPI_Receive+0x52>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e102      	b.n	80050be <HAL_SPI_Receive+0x258>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ec0:	f7fe f930 	bl	8003124 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d002      	beq.n	8004ed8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ed6:	e0e9      	b.n	80050ac <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_SPI_Receive+0x7e>
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ee8:	e0e0      	b.n	80050ac <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2204      	movs	r2, #4
 8004eee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	88fa      	ldrh	r2, [r7, #6]
 8004f02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	88fa      	ldrh	r2, [r7, #6]
 8004f0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f34:	d908      	bls.n	8004f48 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	e007      	b.n	8004f58 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f56:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f60:	d10f      	bne.n	8004f82 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d007      	beq.n	8004fa0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fa8:	d867      	bhi.n	800507a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004faa:	e030      	b.n	800500e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d117      	bne.n	8004fea <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f103 020c 	add.w	r2, r3, #12
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	7812      	ldrb	r2, [r2, #0]
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004fe8:	e011      	b.n	800500e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fea:	f7fe f89b 	bl	8003124 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d803      	bhi.n	8005002 <HAL_SPI_Receive+0x19c>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005000:	d102      	bne.n	8005008 <HAL_SPI_Receive+0x1a2>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800500c:	e04e      	b.n	80050ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1c8      	bne.n	8004fac <HAL_SPI_Receive+0x146>
 800501a:	e034      	b.n	8005086 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d115      	bne.n	8005056 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	b292      	uxth	r2, r2
 8005036:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	1c9a      	adds	r2, r3, #2
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005054:	e011      	b.n	800507a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005056:	f7fe f865 	bl	8003124 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d803      	bhi.n	800506e <HAL_SPI_Receive+0x208>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800506c:	d102      	bne.n	8005074 <HAL_SPI_Receive+0x20e>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005078:	e018      	b.n	80050ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1ca      	bne.n	800501c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fb4c 	bl	8005728 <SPI_EndRxTransaction>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	75fb      	strb	r3, [r7, #23]
 80050a8:	e000      	b.n	80050ac <HAL_SPI_Receive+0x246>
  }

error :
 80050aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b08a      	sub	sp, #40	; 0x28
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	607a      	str	r2, [r7, #4]
 80050d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050d4:	2301      	movs	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x26>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e1fb      	b.n	80054e4 <HAL_SPI_TransmitReceive+0x41e>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f4:	f7fe f816 	bl	8003124 <HAL_GetTick>
 80050f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005100:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005108:	887b      	ldrh	r3, [r7, #2]
 800510a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800510c:	887b      	ldrh	r3, [r7, #2]
 800510e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005110:	7efb      	ldrb	r3, [r7, #27]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d00e      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x6e>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511c:	d106      	bne.n	800512c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <HAL_SPI_TransmitReceive+0x66>
 8005126:	7efb      	ldrb	r3, [r7, #27]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d003      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800512c:	2302      	movs	r3, #2
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005132:	e1cd      	b.n	80054d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_SPI_TransmitReceive+0x80>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <HAL_SPI_TransmitReceive+0x80>
 8005140:	887b      	ldrh	r3, [r7, #2]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d103      	bne.n	800514e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800514c:	e1c0      	b.n	80054d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b04      	cmp	r3, #4
 8005158:	d003      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2205      	movs	r2, #5
 800515e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	887a      	ldrh	r2, [r7, #2]
 8005172:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	887a      	ldrh	r2, [r7, #2]
 800517a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	887a      	ldrh	r2, [r7, #2]
 800518e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051a4:	d802      	bhi.n	80051ac <HAL_SPI_TransmitReceive+0xe6>
 80051a6:	8a3b      	ldrh	r3, [r7, #16]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d908      	bls.n	80051be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051ba:	605a      	str	r2, [r3, #4]
 80051bc:	e007      	b.n	80051ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b40      	cmp	r3, #64	; 0x40
 80051da:	d007      	beq.n	80051ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051f4:	d97c      	bls.n	80052f0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_SPI_TransmitReceive+0x13e>
 80051fe:	8a7b      	ldrh	r3, [r7, #18]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d169      	bne.n	80052d8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	1c9a      	adds	r2, r3, #2
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005228:	e056      	b.n	80052d8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b02      	cmp	r3, #2
 8005236:	d11b      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x1aa>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x1aa>
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	2b01      	cmp	r3, #1
 8005246:	d113      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	881a      	ldrh	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d11c      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x1f2>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d016      	beq.n	80052b8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	b292      	uxth	r2, r2
 8005296:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	1c9a      	adds	r2, r3, #2
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052b4:	2301      	movs	r3, #1
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052b8:	f7fd ff34 	bl	8003124 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d807      	bhi.n	80052d8 <HAL_SPI_TransmitReceive+0x212>
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ce:	d003      	beq.n	80052d8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052d6:	e0fb      	b.n	80054d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1a3      	bne.n	800522a <HAL_SPI_TransmitReceive+0x164>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d19d      	bne.n	800522a <HAL_SPI_TransmitReceive+0x164>
 80052ee:	e0df      	b.n	80054b0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x23a>
 80052f8:	8a7b      	ldrh	r3, [r7, #18]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	f040 80cb 	bne.w	8005496 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d912      	bls.n	8005330 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	881a      	ldrh	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	1c9a      	adds	r2, r3, #2
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b02      	subs	r3, #2
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800532e:	e0b2      	b.n	8005496 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	7812      	ldrb	r2, [r2, #0]
 800533c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005356:	e09e      	b.n	8005496 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d134      	bne.n	80053d0 <HAL_SPI_TransmitReceive+0x30a>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02f      	beq.n	80053d0 <HAL_SPI_TransmitReceive+0x30a>
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	2b01      	cmp	r3, #1
 8005374:	d12c      	bne.n	80053d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d912      	bls.n	80053a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	881a      	ldrh	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	1c9a      	adds	r2, r3, #2
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b02      	subs	r3, #2
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053a4:	e012      	b.n	80053cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	7812      	ldrb	r2, [r2, #0]
 80053b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d148      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x3aa>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d042      	beq.n	8005470 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d923      	bls.n	800543e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	b292      	uxth	r2, r2
 8005402:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	1c9a      	adds	r2, r3, #2
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b02      	subs	r3, #2
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d81f      	bhi.n	800546c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800543a:	605a      	str	r2, [r3, #4]
 800543c:	e016      	b.n	800546c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f103 020c 	add.w	r2, r3, #12
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	7812      	ldrb	r2, [r2, #0]
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800546c:	2301      	movs	r3, #1
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005470:	f7fd fe58 	bl	8003124 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547c:	429a      	cmp	r2, r3
 800547e:	d803      	bhi.n	8005488 <HAL_SPI_TransmitReceive+0x3c2>
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005486:	d102      	bne.n	800548e <HAL_SPI_TransmitReceive+0x3c8>
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	2b00      	cmp	r3, #0
 800548c:	d103      	bne.n	8005496 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005494:	e01c      	b.n	80054d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	f47f af5b 	bne.w	8005358 <HAL_SPI_TransmitReceive+0x292>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f47f af54 	bne.w	8005358 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f98f 	bl	80057d8 <SPI_EndRxTxTransaction>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d006      	beq.n	80054ce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	661a      	str	r2, [r3, #96]	; 0x60
 80054cc:	e000      	b.n	80054d0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80054ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3728      	adds	r7, #40	; 0x28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054fc:	f7fd fe12 	bl	8003124 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	4413      	add	r3, r2
 800550a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800550c:	f7fd fe0a 	bl	8003124 <HAL_GetTick>
 8005510:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005512:	4b39      	ldr	r3, [pc, #228]	; (80055f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	015b      	lsls	r3, r3, #5
 8005518:	0d1b      	lsrs	r3, r3, #20
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	fb02 f303 	mul.w	r3, r2, r3
 8005520:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005522:	e054      	b.n	80055ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800552a:	d050      	beq.n	80055ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800552c:	f7fd fdfa 	bl	8003124 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	429a      	cmp	r2, r3
 800553a:	d902      	bls.n	8005542 <SPI_WaitFlagStateUntilTimeout+0x56>
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d13d      	bne.n	80055be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005550:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555a:	d111      	bne.n	8005580 <SPI_WaitFlagStateUntilTimeout+0x94>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005564:	d004      	beq.n	8005570 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800556e:	d107      	bne.n	8005580 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005588:	d10f      	bne.n	80055aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e017      	b.n	80055ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	bf0c      	ite	eq
 80055de:	2301      	moveq	r3, #1
 80055e0:	2300      	movne	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d19b      	bne.n	8005524 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	200000e0 	.word	0x200000e0

080055fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800560e:	f7fd fd89 	bl	8003124 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	1a9b      	subs	r3, r3, r2
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	4413      	add	r3, r2
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800561e:	f7fd fd81 	bl	8003124 <HAL_GetTick>
 8005622:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	330c      	adds	r3, #12
 800562a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800562c:	4b3d      	ldr	r3, [pc, #244]	; (8005724 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	00da      	lsls	r2, r3, #3
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	0d1b      	lsrs	r3, r3, #20
 800563c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005644:	e060      	b.n	8005708 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800564c:	d107      	bne.n	800565e <SPI_WaitFifoStateUntilTimeout+0x62>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b2db      	uxtb	r3, r3
 800565a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800565c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005664:	d050      	beq.n	8005708 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005666:	f7fd fd5d 	bl	8003124 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005672:	429a      	cmp	r2, r3
 8005674:	d902      	bls.n	800567c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	d13d      	bne.n	80056f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800568a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005694:	d111      	bne.n	80056ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569e:	d004      	beq.n	80056aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a8:	d107      	bne.n	80056ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c2:	d10f      	bne.n	80056e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e010      	b.n	800571a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	3b01      	subs	r3, #1
 8005706:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4013      	ands	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d196      	bne.n	8005646 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3728      	adds	r7, #40	; 0x28
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	200000e0 	.word	0x200000e0

08005728 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800573c:	d111      	bne.n	8005762 <SPI_EndRxTransaction+0x3a>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005746:	d004      	beq.n	8005752 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005750:	d107      	bne.n	8005762 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005760:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2200      	movs	r2, #0
 800576a:	2180      	movs	r1, #128	; 0x80
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff febd 	bl	80054ec <SPI_WaitFlagStateUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577c:	f043 0220 	orr.w	r2, r3, #32
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e023      	b.n	80057d0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005790:	d11d      	bne.n	80057ce <SPI_EndRxTransaction+0xa6>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579a:	d004      	beq.n	80057a6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a4:	d113      	bne.n	80057ce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff ff22 	bl	80055fc <SPI_WaitFifoStateUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c2:	f043 0220 	orr.w	r2, r3, #32
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e000      	b.n	80057d0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff ff03 	bl	80055fc <SPI_WaitFifoStateUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e027      	b.n	800585c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2200      	movs	r2, #0
 8005814:	2180      	movs	r1, #128	; 0x80
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f7ff fe68 	bl	80054ec <SPI_WaitFlagStateUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e014      	b.n	800585c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2200      	movs	r2, #0
 800583a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fedc 	bl	80055fc <SPI_WaitFifoStateUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584e:	f043 0220 	orr.w	r2, r3, #32
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e000      	b.n	800585c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e049      	b.n	800590a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fd f9f8 	bl	8002c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3304      	adds	r3, #4
 80058a0:	4619      	mov	r1, r3
 80058a2:	4610      	mov	r0, r2
 80058a4:	f000 ffe4 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b01      	cmp	r3, #1
 8005926:	d001      	beq.n	800592c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e042      	b.n	80059b2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a21      	ldr	r2, [pc, #132]	; (80059c0 <HAL_TIM_Base_Start+0xac>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <HAL_TIM_Base_Start+0x5c>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005946:	d013      	beq.n	8005970 <HAL_TIM_Base_Start+0x5c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <HAL_TIM_Base_Start+0xb0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_TIM_Base_Start+0x5c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1c      	ldr	r2, [pc, #112]	; (80059c8 <HAL_TIM_Base_Start+0xb4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_TIM_Base_Start+0x5c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1a      	ldr	r2, [pc, #104]	; (80059cc <HAL_TIM_Base_Start+0xb8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIM_Base_Start+0x5c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a19      	ldr	r2, [pc, #100]	; (80059d0 <HAL_TIM_Base_Start+0xbc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d115      	bne.n	800599c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	4b17      	ldr	r3, [pc, #92]	; (80059d4 <HAL_TIM_Base_Start+0xc0>)
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b06      	cmp	r3, #6
 8005980:	d015      	beq.n	80059ae <HAL_TIM_Base_Start+0x9a>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d011      	beq.n	80059ae <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599a:	e008      	b.n	80059ae <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e000      	b.n	80059b0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40013400 	.word	0x40013400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	00010007 	.word	0x00010007

080059d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d001      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e04a      	b.n	8005a86 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a21      	ldr	r2, [pc, #132]	; (8005a94 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d018      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x6c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1a:	d013      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x6c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00e      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x6c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1c      	ldr	r2, [pc, #112]	; (8005a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d009      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x6c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x6c>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d115      	bne.n	8005a70 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d015      	beq.n	8005a82 <HAL_TIM_Base_Start_IT+0xaa>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5c:	d011      	beq.n	8005a82 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	e008      	b.n	8005a82 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e000      	b.n	8005a84 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	00010007 	.word	0x00010007

08005aac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e049      	b.n	8005b52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f841 	bl	8005b5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4610      	mov	r0, r2
 8005aec:	f000 fec0 	bl	8006870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <HAL_TIM_PWM_Start+0x24>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	bf14      	ite	ne
 8005b8c:	2301      	movne	r3, #1
 8005b8e:	2300      	moveq	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e03c      	b.n	8005c0e <HAL_TIM_PWM_Start+0x9e>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d109      	bne.n	8005bae <HAL_TIM_PWM_Start+0x3e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	bf14      	ite	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	2300      	moveq	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	e02f      	b.n	8005c0e <HAL_TIM_PWM_Start+0x9e>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d109      	bne.n	8005bc8 <HAL_TIM_PWM_Start+0x58>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e022      	b.n	8005c0e <HAL_TIM_PWM_Start+0x9e>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	d109      	bne.n	8005be2 <HAL_TIM_PWM_Start+0x72>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	bf14      	ite	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	2300      	moveq	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	e015      	b.n	8005c0e <HAL_TIM_PWM_Start+0x9e>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b10      	cmp	r3, #16
 8005be6:	d109      	bne.n	8005bfc <HAL_TIM_PWM_Start+0x8c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e008      	b.n	8005c0e <HAL_TIM_PWM_Start+0x9e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e097      	b.n	8005d46 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_PWM_Start+0xb6>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c24:	e023      	b.n	8005c6e <HAL_TIM_PWM_Start+0xfe>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_PWM_Start+0xc6>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c34:	e01b      	b.n	8005c6e <HAL_TIM_PWM_Start+0xfe>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d104      	bne.n	8005c46 <HAL_TIM_PWM_Start+0xd6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c44:	e013      	b.n	8005c6e <HAL_TIM_PWM_Start+0xfe>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b0c      	cmp	r3, #12
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_PWM_Start+0xe6>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c54:	e00b      	b.n	8005c6e <HAL_TIM_PWM_Start+0xfe>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_PWM_Start+0xf6>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c64:	e003      	b.n	8005c6e <HAL_TIM_PWM_Start+0xfe>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2201      	movs	r2, #1
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 fa1c 	bl	80070b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a33      	ldr	r2, [pc, #204]	; (8005d50 <HAL_TIM_PWM_Start+0x1e0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d013      	beq.n	8005cae <HAL_TIM_PWM_Start+0x13e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a32      	ldr	r2, [pc, #200]	; (8005d54 <HAL_TIM_PWM_Start+0x1e4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00e      	beq.n	8005cae <HAL_TIM_PWM_Start+0x13e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a30      	ldr	r2, [pc, #192]	; (8005d58 <HAL_TIM_PWM_Start+0x1e8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d009      	beq.n	8005cae <HAL_TIM_PWM_Start+0x13e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2f      	ldr	r2, [pc, #188]	; (8005d5c <HAL_TIM_PWM_Start+0x1ec>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d004      	beq.n	8005cae <HAL_TIM_PWM_Start+0x13e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a2d      	ldr	r2, [pc, #180]	; (8005d60 <HAL_TIM_PWM_Start+0x1f0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d101      	bne.n	8005cb2 <HAL_TIM_PWM_Start+0x142>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <HAL_TIM_PWM_Start+0x144>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a20      	ldr	r2, [pc, #128]	; (8005d50 <HAL_TIM_PWM_Start+0x1e0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d018      	beq.n	8005d04 <HAL_TIM_PWM_Start+0x194>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cda:	d013      	beq.n	8005d04 <HAL_TIM_PWM_Start+0x194>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a20      	ldr	r2, [pc, #128]	; (8005d64 <HAL_TIM_PWM_Start+0x1f4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <HAL_TIM_PWM_Start+0x194>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <HAL_TIM_PWM_Start+0x1f8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_TIM_PWM_Start+0x194>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a17      	ldr	r2, [pc, #92]	; (8005d54 <HAL_TIM_PWM_Start+0x1e4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_TIM_PWM_Start+0x194>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a16      	ldr	r2, [pc, #88]	; (8005d58 <HAL_TIM_PWM_Start+0x1e8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d115      	bne.n	8005d30 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <HAL_TIM_PWM_Start+0x1fc>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b06      	cmp	r3, #6
 8005d14:	d015      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x1d2>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1c:	d011      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0201 	orr.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d2e:	e008      	b.n	8005d42 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	e000      	b.n	8005d44 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40012c00 	.word	0x40012c00
 8005d54:	40013400 	.word	0x40013400
 8005d58:	40014000 	.word	0x40014000
 8005d5c:	40014400 	.word	0x40014400
 8005d60:	40014800 	.word	0x40014800
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	00010007 	.word	0x00010007

08005d70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 f996 	bl	80070b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a3e      	ldr	r2, [pc, #248]	; (8005e88 <HAL_TIM_PWM_Stop+0x118>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_TIM_PWM_Stop+0x4a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a3d      	ldr	r2, [pc, #244]	; (8005e8c <HAL_TIM_PWM_Stop+0x11c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIM_PWM_Stop+0x4a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a3b      	ldr	r2, [pc, #236]	; (8005e90 <HAL_TIM_PWM_Stop+0x120>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_TIM_PWM_Stop+0x4a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a3a      	ldr	r2, [pc, #232]	; (8005e94 <HAL_TIM_PWM_Stop+0x124>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_TIM_PWM_Stop+0x4a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a38      	ldr	r2, [pc, #224]	; (8005e98 <HAL_TIM_PWM_Stop+0x128>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d101      	bne.n	8005dbe <HAL_TIM_PWM_Stop+0x4e>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <HAL_TIM_PWM_Stop+0x50>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d017      	beq.n	8005df4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10f      	bne.n	8005df4 <HAL_TIM_PWM_Stop+0x84>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6a1a      	ldr	r2, [r3, #32]
 8005dda:	f244 4344 	movw	r3, #17476	; 0x4444
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d107      	bne.n	8005df4 <HAL_TIM_PWM_Stop+0x84>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005df2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10f      	bne.n	8005e24 <HAL_TIM_PWM_Stop+0xb4>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	f244 4344 	movw	r3, #17476	; 0x4444
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d107      	bne.n	8005e24 <HAL_TIM_PWM_Stop+0xb4>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0201 	bic.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <HAL_TIM_PWM_Stop+0xc4>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e32:	e023      	b.n	8005e7c <HAL_TIM_PWM_Stop+0x10c>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d104      	bne.n	8005e44 <HAL_TIM_PWM_Stop+0xd4>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e42:	e01b      	b.n	8005e7c <HAL_TIM_PWM_Stop+0x10c>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d104      	bne.n	8005e54 <HAL_TIM_PWM_Stop+0xe4>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e52:	e013      	b.n	8005e7c <HAL_TIM_PWM_Stop+0x10c>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b0c      	cmp	r3, #12
 8005e58:	d104      	bne.n	8005e64 <HAL_TIM_PWM_Stop+0xf4>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e62:	e00b      	b.n	8005e7c <HAL_TIM_PWM_Stop+0x10c>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d104      	bne.n	8005e74 <HAL_TIM_PWM_Stop+0x104>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e72:	e003      	b.n	8005e7c <HAL_TIM_PWM_Stop+0x10c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40013400 	.word	0x40013400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40014400 	.word	0x40014400
 8005e98:	40014800 	.word	0x40014800

08005e9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e097      	b.n	8005fe0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d106      	bne.n	8005eca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fc ff15 	bl	8002cf4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005ee0:	f023 0307 	bic.w	r3, r3, #7
 8005ee4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f000 fcbd 	bl	8006870 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f3c:	f023 030c 	bic.w	r3, r3, #12
 8005f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	011a      	lsls	r2, r3, #4
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	031b      	lsls	r3, r3, #12
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006000:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006008:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006010:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d110      	bne.n	800603a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d102      	bne.n	8006024 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800601e:	7b7b      	ldrb	r3, [r7, #13]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d001      	beq.n	8006028 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e069      	b.n	80060fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006038:	e031      	b.n	800609e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b04      	cmp	r3, #4
 800603e:	d110      	bne.n	8006062 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d102      	bne.n	800604c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006046:	7b3b      	ldrb	r3, [r7, #12]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d001      	beq.n	8006050 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e055      	b.n	80060fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006060:	e01d      	b.n	800609e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d108      	bne.n	800607a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d105      	bne.n	800607a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800606e:	7b7b      	ldrb	r3, [r7, #13]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d102      	bne.n	800607a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006074:	7b3b      	ldrb	r3, [r7, #12]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d001      	beq.n	800607e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e03e      	b.n	80060fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2202      	movs	r2, #2
 8006082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_TIM_Encoder_Start+0xc4>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d008      	beq.n	80060bc <HAL_TIM_Encoder_Start+0xd4>
 80060aa:	e00f      	b.n	80060cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2201      	movs	r2, #1
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fffd 	bl	80070b4 <TIM_CCxChannelCmd>
      break;
 80060ba:	e016      	b.n	80060ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	2104      	movs	r1, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fff5 	bl	80070b4 <TIM_CCxChannelCmd>
      break;
 80060ca:	e00e      	b.n	80060ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2201      	movs	r2, #1
 80060d2:	2100      	movs	r1, #0
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 ffed 	bl	80070b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2201      	movs	r2, #1
 80060e0:	2104      	movs	r1, #4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 ffe6 	bl	80070b4 <TIM_CCxChannelCmd>
      break;
 80060e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	d122      	bne.n	8006160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b02      	cmp	r3, #2
 8006126:	d11b      	bne.n	8006160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0202 	mvn.w	r2, #2
 8006130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fb74 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fb66 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fb77 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b04      	cmp	r3, #4
 800616c:	d122      	bne.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b04      	cmp	r3, #4
 800617a:	d11b      	bne.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0204 	mvn.w	r2, #4
 8006184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb4a 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 80061a0:	e005      	b.n	80061ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fb3c 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fb4d 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d122      	bne.n	8006208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d11b      	bne.n	8006208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0208 	mvn.w	r2, #8
 80061d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2204      	movs	r2, #4
 80061de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fb20 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 80061f4:	e005      	b.n	8006202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fb12 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fb23 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	2b10      	cmp	r3, #16
 8006214:	d122      	bne.n	800625c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b10      	cmp	r3, #16
 8006222:	d11b      	bne.n	800625c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0210 	mvn.w	r2, #16
 800622c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2208      	movs	r2, #8
 8006232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 faf6 	bl	8006834 <HAL_TIM_IC_CaptureCallback>
 8006248:	e005      	b.n	8006256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fae8 	bl	8006820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 faf9 	bl	8006848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b01      	cmp	r3, #1
 8006268:	d10e      	bne.n	8006288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0201 	mvn.w	r2, #1
 8006280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fb fabe 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006292:	2b80      	cmp	r3, #128	; 0x80
 8006294:	d10e      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a0:	2b80      	cmp	r3, #128	; 0x80
 80062a2:	d107      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 f964 	bl	800757c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d10e      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b80      	cmp	r3, #128	; 0x80
 80062d0:	d107      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 f957 	bl	8007590 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d10e      	bne.n	800630e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b40      	cmp	r3, #64	; 0x40
 80062fc:	d107      	bne.n	800630e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 faa7 	bl	800685c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b20      	cmp	r3, #32
 800631a:	d10e      	bne.n	800633a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b20      	cmp	r3, #32
 8006328:	d107      	bne.n	800633a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f06f 0220 	mvn.w	r2, #32
 8006332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 f917 	bl	8007568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006348:	d10f      	bne.n	800636a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006358:	d107      	bne.n	800636a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 f91d 	bl	80075a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006378:	d10f      	bne.n	800639a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006388:	d107      	bne.n	800639a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 f90f 	bl	80075b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063a8:	d10f      	bne.n	80063ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063b8:	d107      	bne.n	80063ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 f901 	bl	80075cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063d8:	d10f      	bne.n	80063fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063e8:	d107      	bne.n	80063fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80063f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 f8f3 	bl	80075e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800641e:	2302      	movs	r3, #2
 8006420:	e0ff      	b.n	8006622 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b14      	cmp	r3, #20
 800642e:	f200 80f0 	bhi.w	8006612 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	0800648d 	.word	0x0800648d
 800643c:	08006613 	.word	0x08006613
 8006440:	08006613 	.word	0x08006613
 8006444:	08006613 	.word	0x08006613
 8006448:	080064cd 	.word	0x080064cd
 800644c:	08006613 	.word	0x08006613
 8006450:	08006613 	.word	0x08006613
 8006454:	08006613 	.word	0x08006613
 8006458:	0800650f 	.word	0x0800650f
 800645c:	08006613 	.word	0x08006613
 8006460:	08006613 	.word	0x08006613
 8006464:	08006613 	.word	0x08006613
 8006468:	0800654f 	.word	0x0800654f
 800646c:	08006613 	.word	0x08006613
 8006470:	08006613 	.word	0x08006613
 8006474:	08006613 	.word	0x08006613
 8006478:	08006591 	.word	0x08006591
 800647c:	08006613 	.word	0x08006613
 8006480:	08006613 	.word	0x08006613
 8006484:	08006613 	.word	0x08006613
 8006488:	080065d1 	.word	0x080065d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fa7c 	bl	8006990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0208 	orr.w	r2, r2, #8
 80064a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699a      	ldr	r2, [r3, #24]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0204 	bic.w	r2, r2, #4
 80064b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6999      	ldr	r1, [r3, #24]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	619a      	str	r2, [r3, #24]
      break;
 80064ca:	e0a5      	b.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 faec 	bl	8006ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6999      	ldr	r1, [r3, #24]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	021a      	lsls	r2, r3, #8
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	619a      	str	r2, [r3, #24]
      break;
 800650c:	e084      	b.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68b9      	ldr	r1, [r7, #8]
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fb55 	bl	8006bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0208 	orr.w	r2, r2, #8
 8006528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69da      	ldr	r2, [r3, #28]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0204 	bic.w	r2, r2, #4
 8006538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69d9      	ldr	r1, [r3, #28]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	61da      	str	r2, [r3, #28]
      break;
 800654c:	e064      	b.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fbbd 	bl	8006cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69d9      	ldr	r1, [r3, #28]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	021a      	lsls	r2, r3, #8
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	61da      	str	r2, [r3, #28]
      break;
 800658e:	e043      	b.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	4618      	mov	r0, r3
 8006598:	f000 fc26 	bl	8006de8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0208 	orr.w	r2, r2, #8
 80065aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0204 	bic.w	r2, r2, #4
 80065ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	691a      	ldr	r2, [r3, #16]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80065ce:	e023      	b.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fc6a 	bl	8006eb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	021a      	lsls	r2, r3, #8
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006610:	e002      	b.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	75fb      	strb	r3, [r7, #23]
      break;
 8006616:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006620:	7dfb      	ldrb	r3, [r7, #23]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop

0800662c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_TIM_ConfigClockSource+0x1c>
 8006644:	2302      	movs	r3, #2
 8006646:	e0de      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x1da>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800666a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a63      	ldr	r2, [pc, #396]	; (8006810 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	f000 80a9 	beq.w	80067da <HAL_TIM_ConfigClockSource+0x1ae>
 8006688:	4a61      	ldr	r2, [pc, #388]	; (8006810 <HAL_TIM_ConfigClockSource+0x1e4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	f200 80ae 	bhi.w	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 8006690:	4a60      	ldr	r2, [pc, #384]	; (8006814 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	f000 80a1 	beq.w	80067da <HAL_TIM_ConfigClockSource+0x1ae>
 8006698:	4a5e      	ldr	r2, [pc, #376]	; (8006814 <HAL_TIM_ConfigClockSource+0x1e8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	f200 80a6 	bhi.w	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 80066a0:	4a5d      	ldr	r2, [pc, #372]	; (8006818 <HAL_TIM_ConfigClockSource+0x1ec>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	f000 8099 	beq.w	80067da <HAL_TIM_ConfigClockSource+0x1ae>
 80066a8:	4a5b      	ldr	r2, [pc, #364]	; (8006818 <HAL_TIM_ConfigClockSource+0x1ec>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	f200 809e 	bhi.w	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 80066b0:	4a5a      	ldr	r2, [pc, #360]	; (800681c <HAL_TIM_ConfigClockSource+0x1f0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	f000 8091 	beq.w	80067da <HAL_TIM_ConfigClockSource+0x1ae>
 80066b8:	4a58      	ldr	r2, [pc, #352]	; (800681c <HAL_TIM_ConfigClockSource+0x1f0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	f200 8096 	bhi.w	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 80066c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066c4:	f000 8089 	beq.w	80067da <HAL_TIM_ConfigClockSource+0x1ae>
 80066c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066cc:	f200 808e 	bhi.w	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d4:	d03e      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0x128>
 80066d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066da:	f200 8087 	bhi.w	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e2:	f000 8086 	beq.w	80067f2 <HAL_TIM_ConfigClockSource+0x1c6>
 80066e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ea:	d87f      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 80066ec:	2b70      	cmp	r3, #112	; 0x70
 80066ee:	d01a      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0xfa>
 80066f0:	2b70      	cmp	r3, #112	; 0x70
 80066f2:	d87b      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 80066f4:	2b60      	cmp	r3, #96	; 0x60
 80066f6:	d050      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x16e>
 80066f8:	2b60      	cmp	r3, #96	; 0x60
 80066fa:	d877      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 80066fc:	2b50      	cmp	r3, #80	; 0x50
 80066fe:	d03c      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x14e>
 8006700:	2b50      	cmp	r3, #80	; 0x50
 8006702:	d873      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d058      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x18e>
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d86f      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 800670c:	2b30      	cmp	r3, #48	; 0x30
 800670e:	d064      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x1ae>
 8006710:	2b30      	cmp	r3, #48	; 0x30
 8006712:	d86b      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 8006714:	2b20      	cmp	r3, #32
 8006716:	d060      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x1ae>
 8006718:	2b20      	cmp	r3, #32
 800671a:	d867      	bhi.n	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d05c      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x1ae>
 8006720:	2b10      	cmp	r3, #16
 8006722:	d05a      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x1ae>
 8006724:	e062      	b.n	80067ec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6899      	ldr	r1, [r3, #8]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f000 fc9d 	bl	8007074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	609a      	str	r2, [r3, #8]
      break;
 8006752:	e04f      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	6899      	ldr	r1, [r3, #8]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f000 fc86 	bl	8007074 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006776:	609a      	str	r2, [r3, #8]
      break;
 8006778:	e03c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6859      	ldr	r1, [r3, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	461a      	mov	r2, r3
 8006788:	f000 fbf8 	bl	8006f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2150      	movs	r1, #80	; 0x50
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fc51 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 8006798:	e02c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6859      	ldr	r1, [r3, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f000 fc17 	bl	8006fda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2160      	movs	r1, #96	; 0x60
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fc41 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 80067b8:	e01c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6859      	ldr	r1, [r3, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f000 fbd8 	bl	8006f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2140      	movs	r1, #64	; 0x40
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fc31 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 80067d8:	e00c      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f000 fc28 	bl	800703a <TIM_ITRx_SetConfig>
      break;
 80067ea:	e003      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
      break;
 80067f0:	e000      	b.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80067f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	00100070 	.word	0x00100070
 8006814:	00100040 	.word	0x00100040
 8006818:	00100030 	.word	0x00100030
 800681c:	00100020 	.word	0x00100020

08006820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a3c      	ldr	r2, [pc, #240]	; (8006974 <TIM_Base_SetConfig+0x104>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00f      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688e:	d00b      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a39      	ldr	r2, [pc, #228]	; (8006978 <TIM_Base_SetConfig+0x108>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a38      	ldr	r2, [pc, #224]	; (800697c <TIM_Base_SetConfig+0x10c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_Base_SetConfig+0x38>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a37      	ldr	r2, [pc, #220]	; (8006980 <TIM_Base_SetConfig+0x110>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d108      	bne.n	80068ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2d      	ldr	r2, [pc, #180]	; (8006974 <TIM_Base_SetConfig+0x104>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01b      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d017      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a2a      	ldr	r2, [pc, #168]	; (8006978 <TIM_Base_SetConfig+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a29      	ldr	r2, [pc, #164]	; (800697c <TIM_Base_SetConfig+0x10c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00f      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a28      	ldr	r2, [pc, #160]	; (8006980 <TIM_Base_SetConfig+0x110>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00b      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a27      	ldr	r2, [pc, #156]	; (8006984 <TIM_Base_SetConfig+0x114>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d007      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a26      	ldr	r2, [pc, #152]	; (8006988 <TIM_Base_SetConfig+0x118>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d003      	beq.n	80068fa <TIM_Base_SetConfig+0x8a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a25      	ldr	r2, [pc, #148]	; (800698c <TIM_Base_SetConfig+0x11c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d108      	bne.n	800690c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <TIM_Base_SetConfig+0x104>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00f      	beq.n	8006958 <TIM_Base_SetConfig+0xe8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a11      	ldr	r2, [pc, #68]	; (8006980 <TIM_Base_SetConfig+0x110>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00b      	beq.n	8006958 <TIM_Base_SetConfig+0xe8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a10      	ldr	r2, [pc, #64]	; (8006984 <TIM_Base_SetConfig+0x114>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d007      	beq.n	8006958 <TIM_Base_SetConfig+0xe8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a0f      	ldr	r2, [pc, #60]	; (8006988 <TIM_Base_SetConfig+0x118>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_Base_SetConfig+0xe8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a0e      	ldr	r2, [pc, #56]	; (800698c <TIM_Base_SetConfig+0x11c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d103      	bne.n	8006960 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	615a      	str	r2, [r3, #20]
}
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40012c00 	.word	0x40012c00
 8006978:	40000400 	.word	0x40000400
 800697c:	40000800 	.word	0x40000800
 8006980:	40013400 	.word	0x40013400
 8006984:	40014000 	.word	0x40014000
 8006988:	40014400 	.word	0x40014400
 800698c:	40014800 	.word	0x40014800

08006990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f023 0201 	bic.w	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 0302 	bic.w	r3, r3, #2
 80069dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a2c      	ldr	r2, [pc, #176]	; (8006a9c <TIM_OC1_SetConfig+0x10c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00f      	beq.n	8006a10 <TIM_OC1_SetConfig+0x80>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a2b      	ldr	r2, [pc, #172]	; (8006aa0 <TIM_OC1_SetConfig+0x110>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00b      	beq.n	8006a10 <TIM_OC1_SetConfig+0x80>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a2a      	ldr	r2, [pc, #168]	; (8006aa4 <TIM_OC1_SetConfig+0x114>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d007      	beq.n	8006a10 <TIM_OC1_SetConfig+0x80>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a29      	ldr	r2, [pc, #164]	; (8006aa8 <TIM_OC1_SetConfig+0x118>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC1_SetConfig+0x80>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a28      	ldr	r2, [pc, #160]	; (8006aac <TIM_OC1_SetConfig+0x11c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10c      	bne.n	8006a2a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f023 0308 	bic.w	r3, r3, #8
 8006a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f023 0304 	bic.w	r3, r3, #4
 8006a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <TIM_OC1_SetConfig+0x10c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00f      	beq.n	8006a52 <TIM_OC1_SetConfig+0xc2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1a      	ldr	r2, [pc, #104]	; (8006aa0 <TIM_OC1_SetConfig+0x110>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00b      	beq.n	8006a52 <TIM_OC1_SetConfig+0xc2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a19      	ldr	r2, [pc, #100]	; (8006aa4 <TIM_OC1_SetConfig+0x114>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d007      	beq.n	8006a52 <TIM_OC1_SetConfig+0xc2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <TIM_OC1_SetConfig+0x118>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d003      	beq.n	8006a52 <TIM_OC1_SetConfig+0xc2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a17      	ldr	r2, [pc, #92]	; (8006aac <TIM_OC1_SetConfig+0x11c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d111      	bne.n	8006a76 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	621a      	str	r2, [r3, #32]
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40013400 	.word	0x40013400
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	40014400 	.word	0x40014400
 8006aac:	40014800 	.word	0x40014800

08006ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f023 0210 	bic.w	r2, r3, #16
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 0320 	bic.w	r3, r3, #32
 8006afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	011b      	lsls	r3, r3, #4
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a28      	ldr	r2, [pc, #160]	; (8006bb0 <TIM_OC2_SetConfig+0x100>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <TIM_OC2_SetConfig+0x6c>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a27      	ldr	r2, [pc, #156]	; (8006bb4 <TIM_OC2_SetConfig+0x104>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d10d      	bne.n	8006b38 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a1d      	ldr	r2, [pc, #116]	; (8006bb0 <TIM_OC2_SetConfig+0x100>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00f      	beq.n	8006b60 <TIM_OC2_SetConfig+0xb0>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a1c      	ldr	r2, [pc, #112]	; (8006bb4 <TIM_OC2_SetConfig+0x104>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00b      	beq.n	8006b60 <TIM_OC2_SetConfig+0xb0>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a1b      	ldr	r2, [pc, #108]	; (8006bb8 <TIM_OC2_SetConfig+0x108>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d007      	beq.n	8006b60 <TIM_OC2_SetConfig+0xb0>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1a      	ldr	r2, [pc, #104]	; (8006bbc <TIM_OC2_SetConfig+0x10c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_OC2_SetConfig+0xb0>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a19      	ldr	r2, [pc, #100]	; (8006bc0 <TIM_OC2_SetConfig+0x110>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d113      	bne.n	8006b88 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	40012c00 	.word	0x40012c00
 8006bb4:	40013400 	.word	0x40013400
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40014400 	.word	0x40014400
 8006bc0:	40014800 	.word	0x40014800

08006bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0303 	bic.w	r3, r3, #3
 8006bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a27      	ldr	r2, [pc, #156]	; (8006cc0 <TIM_OC3_SetConfig+0xfc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_OC3_SetConfig+0x6a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a26      	ldr	r2, [pc, #152]	; (8006cc4 <TIM_OC3_SetConfig+0x100>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d10d      	bne.n	8006c4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	021b      	lsls	r3, r3, #8
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1c      	ldr	r2, [pc, #112]	; (8006cc0 <TIM_OC3_SetConfig+0xfc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00f      	beq.n	8006c72 <TIM_OC3_SetConfig+0xae>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <TIM_OC3_SetConfig+0x100>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00b      	beq.n	8006c72 <TIM_OC3_SetConfig+0xae>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <TIM_OC3_SetConfig+0x104>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d007      	beq.n	8006c72 <TIM_OC3_SetConfig+0xae>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a19      	ldr	r2, [pc, #100]	; (8006ccc <TIM_OC3_SetConfig+0x108>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d003      	beq.n	8006c72 <TIM_OC3_SetConfig+0xae>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	; (8006cd0 <TIM_OC3_SetConfig+0x10c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d113      	bne.n	8006c9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	621a      	str	r2, [r3, #32]
}
 8006cb4:	bf00      	nop
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	40013400 	.word	0x40013400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800

08006cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	031b      	lsls	r3, r3, #12
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a28      	ldr	r2, [pc, #160]	; (8006dd4 <TIM_OC4_SetConfig+0x100>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_OC4_SetConfig+0x6c>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a27      	ldr	r2, [pc, #156]	; (8006dd8 <TIM_OC4_SetConfig+0x104>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10d      	bne.n	8006d5c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	031b      	lsls	r3, r3, #12
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <TIM_OC4_SetConfig+0x100>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00f      	beq.n	8006d84 <TIM_OC4_SetConfig+0xb0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a1c      	ldr	r2, [pc, #112]	; (8006dd8 <TIM_OC4_SetConfig+0x104>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00b      	beq.n	8006d84 <TIM_OC4_SetConfig+0xb0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <TIM_OC4_SetConfig+0x108>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d007      	beq.n	8006d84 <TIM_OC4_SetConfig+0xb0>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a1a      	ldr	r2, [pc, #104]	; (8006de0 <TIM_OC4_SetConfig+0x10c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC4_SetConfig+0xb0>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <TIM_OC4_SetConfig+0x110>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d113      	bne.n	8006dac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	019b      	lsls	r3, r3, #6
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	019b      	lsls	r3, r3, #6
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40013400 	.word	0x40013400
 8006ddc:	40014000 	.word	0x40014000
 8006de0:	40014400 	.word	0x40014400
 8006de4:	40014800 	.word	0x40014800

08006de8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <TIM_OC5_SetConfig+0xb4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00f      	beq.n	8006e62 <TIM_OC5_SetConfig+0x7a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a16      	ldr	r2, [pc, #88]	; (8006ea0 <TIM_OC5_SetConfig+0xb8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00b      	beq.n	8006e62 <TIM_OC5_SetConfig+0x7a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <TIM_OC5_SetConfig+0xbc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d007      	beq.n	8006e62 <TIM_OC5_SetConfig+0x7a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a14      	ldr	r2, [pc, #80]	; (8006ea8 <TIM_OC5_SetConfig+0xc0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d003      	beq.n	8006e62 <TIM_OC5_SetConfig+0x7a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a13      	ldr	r2, [pc, #76]	; (8006eac <TIM_OC5_SetConfig+0xc4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d109      	bne.n	8006e76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	021b      	lsls	r3, r3, #8
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	621a      	str	r2, [r3, #32]
}
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40013400 	.word	0x40013400
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800

08006eb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	051b      	lsls	r3, r3, #20
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <TIM_OC6_SetConfig+0xb8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00f      	beq.n	8006f2c <TIM_OC6_SetConfig+0x7c>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <TIM_OC6_SetConfig+0xbc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00b      	beq.n	8006f2c <TIM_OC6_SetConfig+0x7c>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a16      	ldr	r2, [pc, #88]	; (8006f70 <TIM_OC6_SetConfig+0xc0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d007      	beq.n	8006f2c <TIM_OC6_SetConfig+0x7c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a15      	ldr	r2, [pc, #84]	; (8006f74 <TIM_OC6_SetConfig+0xc4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_OC6_SetConfig+0x7c>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a14      	ldr	r2, [pc, #80]	; (8006f78 <TIM_OC6_SetConfig+0xc8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d109      	bne.n	8006f40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	029b      	lsls	r3, r3, #10
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	621a      	str	r2, [r3, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40013400 	.word	0x40013400
 8006f70:	40014000 	.word	0x40014000
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800

08006f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0201 	bic.w	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f023 030a 	bic.w	r3, r3, #10
 8006fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	621a      	str	r2, [r3, #32]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b087      	sub	sp, #28
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f023 0210 	bic.w	r2, r3, #16
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	031b      	lsls	r3, r3, #12
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	621a      	str	r2, [r3, #32]
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	f043 0307 	orr.w	r3, r3, #7
 8007060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	609a      	str	r2, [r3, #8]
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800708e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	021a      	lsls	r2, r3, #8
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	431a      	orrs	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4313      	orrs	r3, r2
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	609a      	str	r2, [r3, #8]
}
 80070a8:	bf00      	nop
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	2201      	movs	r2, #1
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	43db      	mvns	r3, r3
 80070d6:	401a      	ands	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1a      	ldr	r2, [r3, #32]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
	...

08007100 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d109      	bne.n	8007124 <HAL_TIMEx_PWMN_Start+0x24>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b01      	cmp	r3, #1
 800711a:	bf14      	ite	ne
 800711c:	2301      	movne	r3, #1
 800711e:	2300      	moveq	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	e022      	b.n	800716a <HAL_TIMEx_PWMN_Start+0x6a>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b04      	cmp	r3, #4
 8007128:	d109      	bne.n	800713e <HAL_TIMEx_PWMN_Start+0x3e>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b01      	cmp	r3, #1
 8007134:	bf14      	ite	ne
 8007136:	2301      	movne	r3, #1
 8007138:	2300      	moveq	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	e015      	b.n	800716a <HAL_TIMEx_PWMN_Start+0x6a>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b08      	cmp	r3, #8
 8007142:	d109      	bne.n	8007158 <HAL_TIMEx_PWMN_Start+0x58>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b01      	cmp	r3, #1
 800714e:	bf14      	ite	ne
 8007150:	2301      	movne	r3, #1
 8007152:	2300      	moveq	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	e008      	b.n	800716a <HAL_TIMEx_PWMN_Start+0x6a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b01      	cmp	r3, #1
 8007162:	bf14      	ite	ne
 8007164:	2301      	movne	r3, #1
 8007166:	2300      	moveq	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e069      	b.n	8007246 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d104      	bne.n	8007182 <HAL_TIMEx_PWMN_Start+0x82>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007180:	e013      	b.n	80071aa <HAL_TIMEx_PWMN_Start+0xaa>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d104      	bne.n	8007192 <HAL_TIMEx_PWMN_Start+0x92>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007190:	e00b      	b.n	80071aa <HAL_TIMEx_PWMN_Start+0xaa>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d104      	bne.n	80071a2 <HAL_TIMEx_PWMN_Start+0xa2>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071a0:	e003      	b.n	80071aa <HAL_TIMEx_PWMN_Start+0xaa>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2204      	movs	r2, #4
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fa1e 	bl	80075f4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a20      	ldr	r2, [pc, #128]	; (8007250 <HAL_TIMEx_PWMN_Start+0x150>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d018      	beq.n	8007204 <HAL_TIMEx_PWMN_Start+0x104>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071da:	d013      	beq.n	8007204 <HAL_TIMEx_PWMN_Start+0x104>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1c      	ldr	r2, [pc, #112]	; (8007254 <HAL_TIMEx_PWMN_Start+0x154>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00e      	beq.n	8007204 <HAL_TIMEx_PWMN_Start+0x104>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1b      	ldr	r2, [pc, #108]	; (8007258 <HAL_TIMEx_PWMN_Start+0x158>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d009      	beq.n	8007204 <HAL_TIMEx_PWMN_Start+0x104>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a19      	ldr	r2, [pc, #100]	; (800725c <HAL_TIMEx_PWMN_Start+0x15c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <HAL_TIMEx_PWMN_Start+0x104>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a18      	ldr	r2, [pc, #96]	; (8007260 <HAL_TIMEx_PWMN_Start+0x160>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d115      	bne.n	8007230 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	4b16      	ldr	r3, [pc, #88]	; (8007264 <HAL_TIMEx_PWMN_Start+0x164>)
 800720c:	4013      	ands	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b06      	cmp	r3, #6
 8007214:	d015      	beq.n	8007242 <HAL_TIMEx_PWMN_Start+0x142>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721c:	d011      	beq.n	8007242 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f042 0201 	orr.w	r2, r2, #1
 800722c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722e:	e008      	b.n	8007242 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e000      	b.n	8007244 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40000400 	.word	0x40000400
 8007258:	40000800 	.word	0x40000800
 800725c:	40013400 	.word	0x40013400
 8007260:	40014000 	.word	0x40014000
 8007264:	00010007 	.word	0x00010007

08007268 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f9ba 	bl	80075f4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6a1a      	ldr	r2, [r3, #32]
 8007286:	f241 1311 	movw	r3, #4369	; 0x1111
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10f      	bne.n	80072b0 <HAL_TIMEx_PWMN_Stop+0x48>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6a1a      	ldr	r2, [r3, #32]
 8007296:	f244 4344 	movw	r3, #17476	; 0x4444
 800729a:	4013      	ands	r3, r2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d107      	bne.n	80072b0 <HAL_TIMEx_PWMN_Stop+0x48>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6a1a      	ldr	r2, [r3, #32]
 80072b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10f      	bne.n	80072e0 <HAL_TIMEx_PWMN_Stop+0x78>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6a1a      	ldr	r2, [r3, #32]
 80072c6:	f244 4344 	movw	r3, #17476	; 0x4444
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d107      	bne.n	80072e0 <HAL_TIMEx_PWMN_Stop+0x78>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <HAL_TIMEx_PWMN_Stop+0x88>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ee:	e013      	b.n	8007318 <HAL_TIMEx_PWMN_Stop+0xb0>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d104      	bne.n	8007300 <HAL_TIMEx_PWMN_Stop+0x98>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072fe:	e00b      	b.n	8007318 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b08      	cmp	r3, #8
 8007304:	d104      	bne.n	8007310 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800730e:	e003      	b.n	8007318 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007338:	2302      	movs	r3, #2
 800733a:	e065      	b.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a2c      	ldr	r2, [pc, #176]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a2b      	ldr	r2, [pc, #172]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d108      	bne.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007376:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1b      	ldr	r2, [pc, #108]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d018      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b2:	d013      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a18      	ldr	r2, [pc, #96]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00e      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a17      	ldr	r2, [pc, #92]	; (8007420 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d009      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a12      	ldr	r2, [pc, #72]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a13      	ldr	r2, [pc, #76]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d10c      	bne.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40013400 	.word	0x40013400
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800
 8007424:	40014000 	.word	0x40014000

08007428 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007440:	2302      	movs	r3, #2
 8007442:	e087      	b.n	8007554 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4313      	orrs	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	041b      	lsls	r3, r3, #16
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a27      	ldr	r2, [pc, #156]	; (8007560 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a25      	ldr	r2, [pc, #148]	; (8007564 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d106      	bne.n	80074e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1e      	ldr	r2, [pc, #120]	; (8007560 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d004      	beq.n	80074f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1d      	ldr	r2, [pc, #116]	; (8007564 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d126      	bne.n	8007542 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fe:	051b      	lsls	r3, r3, #20
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a0e      	ldr	r2, [pc, #56]	; (8007560 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d004      	beq.n	8007534 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a0d      	ldr	r2, [pc, #52]	; (8007564 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d106      	bne.n	8007542 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	40012c00 	.word	0x40012c00
 8007564:	40013400 	.word	0x40013400

08007568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f003 031f 	and.w	r3, r3, #31
 8007606:	2204      	movs	r2, #4
 8007608:	fa02 f303 	lsl.w	r3, r2, r3
 800760c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a1a      	ldr	r2, [r3, #32]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	43db      	mvns	r3, r3
 8007616:	401a      	ands	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a1a      	ldr	r2, [r3, #32]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f003 031f 	and.w	r3, r3, #31
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	fa01 f303 	lsl.w	r3, r1, r3
 800762c:	431a      	orrs	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b082      	sub	sp, #8
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e042      	b.n	80076d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7fb fcaa 	bl	8002fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2224      	movs	r2, #36	; 0x24
 800766c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0201 	bic.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fc51 	bl	8007f28 <UART_SetConfig>
 8007686:	4603      	mov	r3, r0
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e022      	b.n	80076d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 ff11 	bl	80084c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0201 	orr.w	r2, r2, #1
 80076cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 ff98 	bl	8008604 <UART_CheckIdleState>
 80076d4:	4603      	mov	r3, r0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b08a      	sub	sp, #40	; 0x28
 80076e2:	af02      	add	r7, sp, #8
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	4613      	mov	r3, r2
 80076ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	f040 8083 	bne.w	8007800 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <HAL_UART_Transmit+0x28>
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e07b      	b.n	8007802 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_UART_Transmit+0x3a>
 8007714:	2302      	movs	r3, #2
 8007716:	e074      	b.n	8007802 <HAL_UART_Transmit+0x124>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2221      	movs	r2, #33	; 0x21
 800772c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007730:	f7fb fcf8 	bl	8003124 <HAL_GetTick>
 8007734:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	88fa      	ldrh	r2, [r7, #6]
 800773a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	88fa      	ldrh	r2, [r7, #6]
 8007742:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774e:	d108      	bne.n	8007762 <HAL_UART_Transmit+0x84>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	61bb      	str	r3, [r7, #24]
 8007760:	e003      	b.n	800776a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007772:	e02c      	b.n	80077ce <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2200      	movs	r2, #0
 800777c:	2180      	movs	r1, #128	; 0x80
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 ff8b 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e039      	b.n	8007802 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	3302      	adds	r3, #2
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	e007      	b.n	80077bc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	781a      	ldrb	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	3301      	adds	r3, #1
 80077ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1cc      	bne.n	8007774 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2200      	movs	r2, #0
 80077e2:	2140      	movs	r1, #64	; 0x40
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 ff58 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e006      	b.n	8007802 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	e000      	b.n	8007802 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007800:	2302      	movs	r3, #2
  }
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	; 0x28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007820:	2b20      	cmp	r3, #32
 8007822:	d142      	bne.n	80078aa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <HAL_UART_Receive_IT+0x24>
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e03b      	b.n	80078ac <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_UART_Receive_IT+0x36>
 800783e:	2302      	movs	r3, #2
 8007840:	e034      	b.n	80078ac <HAL_UART_Receive_IT+0xa0>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a17      	ldr	r2, [pc, #92]	; (80078b4 <HAL_UART_Receive_IT+0xa8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01f      	beq.n	800789a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d018      	beq.n	800789a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	613b      	str	r3, [r7, #16]
   return(result);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	623b      	str	r3, [r7, #32]
 8007888:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	69f9      	ldr	r1, [r7, #28]
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	61bb      	str	r3, [r7, #24]
   return(result);
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e6      	bne.n	8007868 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800789a:	88fb      	ldrh	r3, [r7, #6]
 800789c:	461a      	mov	r2, r3
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 ffc3 	bl	800882c <UART_Start_Receive_IT>
 80078a6:	4603      	mov	r3, r0
 80078a8:	e000      	b.n	80078ac <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80078aa:	2302      	movs	r3, #2
  }
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3728      	adds	r7, #40	; 0x28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	40008000 	.word	0x40008000

080078b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b0ba      	sub	sp, #232	; 0xe8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80078e6:	4013      	ands	r3, r2
 80078e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11b      	bne.n	800792c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d015      	beq.n	800792c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b00      	cmp	r3, #0
 800790a:	d105      	bne.n	8007918 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800790c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d009      	beq.n	800792c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 82d6 	beq.w	8007ece <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	4798      	blx	r3
      }
      return;
 800792a:	e2d0      	b.n	8007ece <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800792c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 811f 	beq.w	8007b74 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007936:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800793a:	4b8b      	ldr	r3, [pc, #556]	; (8007b68 <HAL_UART_IRQHandler+0x2b0>)
 800793c:	4013      	ands	r3, r2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007942:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007946:	4b89      	ldr	r3, [pc, #548]	; (8007b6c <HAL_UART_IRQHandler+0x2b4>)
 8007948:	4013      	ands	r3, r2
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 8112 	beq.w	8007b74 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d011      	beq.n	8007980 <HAL_UART_IRQHandler+0xc8>
 800795c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2201      	movs	r2, #1
 800796e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007976:	f043 0201 	orr.w	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d011      	beq.n	80079b0 <HAL_UART_IRQHandler+0xf8>
 800798c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00b      	beq.n	80079b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2202      	movs	r2, #2
 800799e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a6:	f043 0204 	orr.w	r2, r3, #4
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d011      	beq.n	80079e0 <HAL_UART_IRQHandler+0x128>
 80079bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2204      	movs	r2, #4
 80079ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d6:	f043 0202 	orr.w	r2, r3, #2
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e4:	f003 0308 	and.w	r3, r3, #8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d017      	beq.n	8007a1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d105      	bne.n	8007a04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80079f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80079fc:	4b5a      	ldr	r3, [pc, #360]	; (8007b68 <HAL_UART_IRQHandler+0x2b0>)
 80079fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00b      	beq.n	8007a1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2208      	movs	r2, #8
 8007a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a12:	f043 0208 	orr.w	r2, r3, #8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d012      	beq.n	8007a4e <HAL_UART_IRQHandler+0x196>
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00c      	beq.n	8007a4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a44:	f043 0220 	orr.w	r2, r3, #32
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 823c 	beq.w	8007ed2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d013      	beq.n	8007a8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d105      	bne.n	8007a7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d007      	beq.n	8007a8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d005      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d04f      	beq.n	8007b52 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 ffe4 	bl	8008a80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d141      	bne.n	8007b4a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007af2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1d9      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d013      	beq.n	8007b42 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b1e:	4a14      	ldr	r2, [pc, #80]	; (8007b70 <HAL_UART_IRQHandler+0x2b8>)
 8007b20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fb fc63 	bl	80033f2 <HAL_DMA_Abort_IT>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d017      	beq.n	8007b62 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b40:	e00f      	b.n	8007b62 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f9da 	bl	8007efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b48:	e00b      	b.n	8007b62 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f9d6 	bl	8007efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	e007      	b.n	8007b62 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f9d2 	bl	8007efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007b60:	e1b7      	b.n	8007ed2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b62:	bf00      	nop
    return;
 8007b64:	e1b5      	b.n	8007ed2 <HAL_UART_IRQHandler+0x61a>
 8007b66:	bf00      	nop
 8007b68:	10000001 	.word	0x10000001
 8007b6c:	04000120 	.word	0x04000120
 8007b70:	08008b4d 	.word	0x08008b4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	f040 814a 	bne.w	8007e12 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b82:	f003 0310 	and.w	r3, r3, #16
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 8143 	beq.w	8007e12 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 813c 	beq.w	8007e12 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2210      	movs	r2, #16
 8007ba0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	f040 80b5 	bne.w	8007d1c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 8187 	beq.w	8007ed6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	f080 817f 	bcs.w	8007ed6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f040 8086 	bne.w	8007d00 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1da      	bne.n	8007bf4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3308      	adds	r3, #8
 8007c44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c50:	f023 0301 	bic.w	r3, r3, #1
 8007c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e1      	bne.n	8007c3e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3308      	adds	r3, #8
 8007c80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3308      	adds	r3, #8
 8007c9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ca0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ca4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ca6:	e841 2300 	strex	r3, r2, [r1]
 8007caa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1e3      	bne.n	8007c7a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cd0:	f023 0310 	bic.w	r3, r3, #16
 8007cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ce2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ce4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e4      	bne.n	8007cc0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fb fb20 	bl	8003340 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f8fb 	bl	8007f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d1a:	e0dc      	b.n	8007ed6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 80ce 	beq.w	8007eda <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007d3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 80c9 	beq.w	8007eda <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e4      	bne.n	8007d48 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3308      	adds	r3, #8
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d94:	f023 0301 	bic.w	r3, r3, #1
 8007d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3308      	adds	r3, #8
 8007da2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007da6:	633a      	str	r2, [r7, #48]	; 0x30
 8007da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e1      	bne.n	8007d7e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0310 	bic.w	r3, r3, #16
 8007de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	69b9      	ldr	r1, [r7, #24]
 8007df6:	69fa      	ldr	r2, [r7, #28]
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e4      	bne.n	8007dce <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f880 	bl	8007f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e10:	e063      	b.n	8007eda <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <HAL_UART_IRQHandler+0x584>
 8007e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d008      	beq.n	8007e3c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 fb27 	bl	8009488 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e3a:	e051      	b.n	8007ee0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d014      	beq.n	8007e72 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d008      	beq.n	8007e72 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d03a      	beq.n	8007ede <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3
    }
    return;
 8007e70:	e035      	b.n	8007ede <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <HAL_UART_IRQHandler+0x5da>
 8007e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fe74 	bl	8008b78 <UART_EndTransmit_IT>
    return;
 8007e90:	e026      	b.n	8007ee0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x5fa>
 8007e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 fb00 	bl	80094b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eb0:	e016      	b.n	8007ee0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d010      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x628>
 8007ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	da0c      	bge.n	8007ee0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f001 fae8 	bl	800949c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ecc:	e008      	b.n	8007ee0 <HAL_UART_IRQHandler+0x628>
      return;
 8007ece:	bf00      	nop
 8007ed0:	e006      	b.n	8007ee0 <HAL_UART_IRQHandler+0x628>
    return;
 8007ed2:	bf00      	nop
 8007ed4:	e004      	b.n	8007ee0 <HAL_UART_IRQHandler+0x628>
      return;
 8007ed6:	bf00      	nop
 8007ed8:	e002      	b.n	8007ee0 <HAL_UART_IRQHandler+0x628>
      return;
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <HAL_UART_IRQHandler+0x628>
    return;
 8007ede:	bf00      	nop
  }
}
 8007ee0:	37e8      	adds	r7, #232	; 0xe8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop

08007ee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f2c:	b08c      	sub	sp, #48	; 0x30
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	431a      	orrs	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	431a      	orrs	r2, r3
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4bab      	ldr	r3, [pc, #684]	; (8008204 <UART_SetConfig+0x2dc>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	6812      	ldr	r2, [r2, #0]
 8007f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f60:	430b      	orrs	r3, r1
 8007f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4aa0      	ldr	r2, [pc, #640]	; (8008208 <UART_SetConfig+0x2e0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f90:	4313      	orrs	r3, r2
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007f9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	f023 010f 	bic.w	r1, r3, #15
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a91      	ldr	r2, [pc, #580]	; (800820c <UART_SetConfig+0x2e4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d125      	bne.n	8008018 <UART_SetConfig+0xf0>
 8007fcc:	4b90      	ldr	r3, [pc, #576]	; (8008210 <UART_SetConfig+0x2e8>)
 8007fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d81a      	bhi.n	8008010 <UART_SetConfig+0xe8>
 8007fda:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <UART_SetConfig+0xb8>)
 8007fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe0:	08007ff1 	.word	0x08007ff1
 8007fe4:	08008001 	.word	0x08008001
 8007fe8:	08007ff9 	.word	0x08007ff9
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ff6:	e0d6      	b.n	80081a6 <UART_SetConfig+0x27e>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ffe:	e0d2      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008000:	2304      	movs	r3, #4
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008006:	e0ce      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008008:	2308      	movs	r3, #8
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800800e:	e0ca      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008010:	2310      	movs	r3, #16
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008016:	e0c6      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a7d      	ldr	r2, [pc, #500]	; (8008214 <UART_SetConfig+0x2ec>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d138      	bne.n	8008094 <UART_SetConfig+0x16c>
 8008022:	4b7b      	ldr	r3, [pc, #492]	; (8008210 <UART_SetConfig+0x2e8>)
 8008024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008028:	f003 030c 	and.w	r3, r3, #12
 800802c:	2b0c      	cmp	r3, #12
 800802e:	d82d      	bhi.n	800808c <UART_SetConfig+0x164>
 8008030:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <UART_SetConfig+0x110>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	0800806d 	.word	0x0800806d
 800803c:	0800808d 	.word	0x0800808d
 8008040:	0800808d 	.word	0x0800808d
 8008044:	0800808d 	.word	0x0800808d
 8008048:	0800807d 	.word	0x0800807d
 800804c:	0800808d 	.word	0x0800808d
 8008050:	0800808d 	.word	0x0800808d
 8008054:	0800808d 	.word	0x0800808d
 8008058:	08008075 	.word	0x08008075
 800805c:	0800808d 	.word	0x0800808d
 8008060:	0800808d 	.word	0x0800808d
 8008064:	0800808d 	.word	0x0800808d
 8008068:	08008085 	.word	0x08008085
 800806c:	2300      	movs	r3, #0
 800806e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008072:	e098      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008074:	2302      	movs	r3, #2
 8008076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807a:	e094      	b.n	80081a6 <UART_SetConfig+0x27e>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008082:	e090      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800808a:	e08c      	b.n	80081a6 <UART_SetConfig+0x27e>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008092:	e088      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a5f      	ldr	r2, [pc, #380]	; (8008218 <UART_SetConfig+0x2f0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d125      	bne.n	80080ea <UART_SetConfig+0x1c2>
 800809e:	4b5c      	ldr	r3, [pc, #368]	; (8008210 <UART_SetConfig+0x2e8>)
 80080a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080a8:	2b30      	cmp	r3, #48	; 0x30
 80080aa:	d016      	beq.n	80080da <UART_SetConfig+0x1b2>
 80080ac:	2b30      	cmp	r3, #48	; 0x30
 80080ae:	d818      	bhi.n	80080e2 <UART_SetConfig+0x1ba>
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d00a      	beq.n	80080ca <UART_SetConfig+0x1a2>
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d814      	bhi.n	80080e2 <UART_SetConfig+0x1ba>
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <UART_SetConfig+0x19a>
 80080bc:	2b10      	cmp	r3, #16
 80080be:	d008      	beq.n	80080d2 <UART_SetConfig+0x1aa>
 80080c0:	e00f      	b.n	80080e2 <UART_SetConfig+0x1ba>
 80080c2:	2300      	movs	r3, #0
 80080c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c8:	e06d      	b.n	80081a6 <UART_SetConfig+0x27e>
 80080ca:	2302      	movs	r3, #2
 80080cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d0:	e069      	b.n	80081a6 <UART_SetConfig+0x27e>
 80080d2:	2304      	movs	r3, #4
 80080d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d8:	e065      	b.n	80081a6 <UART_SetConfig+0x27e>
 80080da:	2308      	movs	r3, #8
 80080dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080e0:	e061      	b.n	80081a6 <UART_SetConfig+0x27e>
 80080e2:	2310      	movs	r3, #16
 80080e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080e8:	e05d      	b.n	80081a6 <UART_SetConfig+0x27e>
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a4b      	ldr	r2, [pc, #300]	; (800821c <UART_SetConfig+0x2f4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d125      	bne.n	8008140 <UART_SetConfig+0x218>
 80080f4:	4b46      	ldr	r3, [pc, #280]	; (8008210 <UART_SetConfig+0x2e8>)
 80080f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080fe:	2bc0      	cmp	r3, #192	; 0xc0
 8008100:	d016      	beq.n	8008130 <UART_SetConfig+0x208>
 8008102:	2bc0      	cmp	r3, #192	; 0xc0
 8008104:	d818      	bhi.n	8008138 <UART_SetConfig+0x210>
 8008106:	2b80      	cmp	r3, #128	; 0x80
 8008108:	d00a      	beq.n	8008120 <UART_SetConfig+0x1f8>
 800810a:	2b80      	cmp	r3, #128	; 0x80
 800810c:	d814      	bhi.n	8008138 <UART_SetConfig+0x210>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <UART_SetConfig+0x1f0>
 8008112:	2b40      	cmp	r3, #64	; 0x40
 8008114:	d008      	beq.n	8008128 <UART_SetConfig+0x200>
 8008116:	e00f      	b.n	8008138 <UART_SetConfig+0x210>
 8008118:	2300      	movs	r3, #0
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811e:	e042      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008120:	2302      	movs	r3, #2
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008126:	e03e      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008128:	2304      	movs	r3, #4
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812e:	e03a      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008130:	2308      	movs	r3, #8
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008136:	e036      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008138:	2310      	movs	r3, #16
 800813a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813e:	e032      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a30      	ldr	r2, [pc, #192]	; (8008208 <UART_SetConfig+0x2e0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d12a      	bne.n	80081a0 <UART_SetConfig+0x278>
 800814a:	4b31      	ldr	r3, [pc, #196]	; (8008210 <UART_SetConfig+0x2e8>)
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008150:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008158:	d01a      	beq.n	8008190 <UART_SetConfig+0x268>
 800815a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800815e:	d81b      	bhi.n	8008198 <UART_SetConfig+0x270>
 8008160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008164:	d00c      	beq.n	8008180 <UART_SetConfig+0x258>
 8008166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816a:	d815      	bhi.n	8008198 <UART_SetConfig+0x270>
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <UART_SetConfig+0x250>
 8008170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008174:	d008      	beq.n	8008188 <UART_SetConfig+0x260>
 8008176:	e00f      	b.n	8008198 <UART_SetConfig+0x270>
 8008178:	2300      	movs	r3, #0
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817e:	e012      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008180:	2302      	movs	r3, #2
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008186:	e00e      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008188:	2304      	movs	r3, #4
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818e:	e00a      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008190:	2308      	movs	r3, #8
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008196:	e006      	b.n	80081a6 <UART_SetConfig+0x27e>
 8008198:	2310      	movs	r3, #16
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819e:	e002      	b.n	80081a6 <UART_SetConfig+0x27e>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a17      	ldr	r2, [pc, #92]	; (8008208 <UART_SetConfig+0x2e0>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	f040 80a8 	bne.w	8008302 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081b6:	2b08      	cmp	r3, #8
 80081b8:	d834      	bhi.n	8008224 <UART_SetConfig+0x2fc>
 80081ba:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <UART_SetConfig+0x298>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081e5 	.word	0x080081e5
 80081c4:	08008225 	.word	0x08008225
 80081c8:	080081ed 	.word	0x080081ed
 80081cc:	08008225 	.word	0x08008225
 80081d0:	080081f3 	.word	0x080081f3
 80081d4:	08008225 	.word	0x08008225
 80081d8:	08008225 	.word	0x08008225
 80081dc:	08008225 	.word	0x08008225
 80081e0:	080081fb 	.word	0x080081fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e4:	f7fc f992 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 80081e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081ea:	e021      	b.n	8008230 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081ec:	4b0c      	ldr	r3, [pc, #48]	; (8008220 <UART_SetConfig+0x2f8>)
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081f0:	e01e      	b.n	8008230 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f2:	f7fc f91d 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80081f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081f8:	e01a      	b.n	8008230 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008200:	e016      	b.n	8008230 <UART_SetConfig+0x308>
 8008202:	bf00      	nop
 8008204:	cfff69f3 	.word	0xcfff69f3
 8008208:	40008000 	.word	0x40008000
 800820c:	40013800 	.word	0x40013800
 8008210:	40021000 	.word	0x40021000
 8008214:	40004400 	.word	0x40004400
 8008218:	40004800 	.word	0x40004800
 800821c:	40004c00 	.word	0x40004c00
 8008220:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800822e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 812a 	beq.w	800848c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	4a9e      	ldr	r2, [pc, #632]	; (80084b8 <UART_SetConfig+0x590>)
 800823e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008242:	461a      	mov	r2, r3
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	fbb3 f3f2 	udiv	r3, r3, r2
 800824a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	4613      	mov	r3, r2
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	4413      	add	r3, r2
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	429a      	cmp	r2, r3
 800825a:	d305      	bcc.n	8008268 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	429a      	cmp	r2, r3
 8008266:	d903      	bls.n	8008270 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800826e:	e10d      	b.n	800848c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	2200      	movs	r2, #0
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	60fa      	str	r2, [r7, #12]
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	4a8e      	ldr	r2, [pc, #568]	; (80084b8 <UART_SetConfig+0x590>)
 800827e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008282:	b29b      	uxth	r3, r3
 8008284:	2200      	movs	r2, #0
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008292:	f7f8 fcb1 	bl	8000bf8 <__aeabi_uldivmod>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4610      	mov	r0, r2
 800829c:	4619      	mov	r1, r3
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	020b      	lsls	r3, r1, #8
 80082a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082ac:	0202      	lsls	r2, r0, #8
 80082ae:	6979      	ldr	r1, [r7, #20]
 80082b0:	6849      	ldr	r1, [r1, #4]
 80082b2:	0849      	lsrs	r1, r1, #1
 80082b4:	2000      	movs	r0, #0
 80082b6:	460c      	mov	r4, r1
 80082b8:	4605      	mov	r5, r0
 80082ba:	eb12 0804 	adds.w	r8, r2, r4
 80082be:	eb43 0905 	adc.w	r9, r3, r5
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	469a      	mov	sl, r3
 80082ca:	4693      	mov	fp, r2
 80082cc:	4652      	mov	r2, sl
 80082ce:	465b      	mov	r3, fp
 80082d0:	4640      	mov	r0, r8
 80082d2:	4649      	mov	r1, r9
 80082d4:	f7f8 fc90 	bl	8000bf8 <__aeabi_uldivmod>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4613      	mov	r3, r2
 80082de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e6:	d308      	bcc.n	80082fa <UART_SetConfig+0x3d2>
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ee:	d204      	bcs.n	80082fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6a3a      	ldr	r2, [r7, #32]
 80082f6:	60da      	str	r2, [r3, #12]
 80082f8:	e0c8      	b.n	800848c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008300:	e0c4      	b.n	800848c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800830a:	d167      	bne.n	80083dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800830c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008310:	2b08      	cmp	r3, #8
 8008312:	d828      	bhi.n	8008366 <UART_SetConfig+0x43e>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <UART_SetConfig+0x3f4>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	08008341 	.word	0x08008341
 8008320:	08008349 	.word	0x08008349
 8008324:	08008351 	.word	0x08008351
 8008328:	08008367 	.word	0x08008367
 800832c:	08008357 	.word	0x08008357
 8008330:	08008367 	.word	0x08008367
 8008334:	08008367 	.word	0x08008367
 8008338:	08008367 	.word	0x08008367
 800833c:	0800835f 	.word	0x0800835f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008340:	f7fc f8e4 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8008344:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008346:	e014      	b.n	8008372 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008348:	f7fc f8f6 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 800834c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800834e:	e010      	b.n	8008372 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008350:	4b5a      	ldr	r3, [pc, #360]	; (80084bc <UART_SetConfig+0x594>)
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008354:	e00d      	b.n	8008372 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008356:	f7fc f86b 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 800835a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800835c:	e009      	b.n	8008372 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008364:	e005      	b.n	8008372 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 8089 	beq.w	800848c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	4a4e      	ldr	r2, [pc, #312]	; (80084b8 <UART_SetConfig+0x590>)
 8008380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008384:	461a      	mov	r2, r3
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	fbb3 f3f2 	udiv	r3, r3, r2
 800838c:	005a      	lsls	r2, r3, #1
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	441a      	add	r2, r3
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	fbb2 f3f3 	udiv	r3, r2, r3
 800839e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	2b0f      	cmp	r3, #15
 80083a4:	d916      	bls.n	80083d4 <UART_SetConfig+0x4ac>
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ac:	d212      	bcs.n	80083d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f023 030f 	bic.w	r3, r3, #15
 80083b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	085b      	lsrs	r3, r3, #1
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	8bfb      	ldrh	r3, [r7, #30]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	8bfa      	ldrh	r2, [r7, #30]
 80083d0:	60da      	str	r2, [r3, #12]
 80083d2:	e05b      	b.n	800848c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083da:	e057      	b.n	800848c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d828      	bhi.n	8008436 <UART_SetConfig+0x50e>
 80083e4:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <UART_SetConfig+0x4c4>)
 80083e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ea:	bf00      	nop
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008419 	.word	0x08008419
 80083f4:	08008421 	.word	0x08008421
 80083f8:	08008437 	.word	0x08008437
 80083fc:	08008427 	.word	0x08008427
 8008400:	08008437 	.word	0x08008437
 8008404:	08008437 	.word	0x08008437
 8008408:	08008437 	.word	0x08008437
 800840c:	0800842f 	.word	0x0800842f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008410:	f7fc f87c 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8008414:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008416:	e014      	b.n	8008442 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008418:	f7fc f88e 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 800841c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800841e:	e010      	b.n	8008442 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008420:	4b26      	ldr	r3, [pc, #152]	; (80084bc <UART_SetConfig+0x594>)
 8008422:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008424:	e00d      	b.n	8008442 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008426:	f7fc f803 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 800842a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800842c:	e009      	b.n	8008442 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008434:	e005      	b.n	8008442 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008440:	bf00      	nop
    }

    if (pclk != 0U)
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d021      	beq.n	800848c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	4a1a      	ldr	r2, [pc, #104]	; (80084b8 <UART_SetConfig+0x590>)
 800844e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008452:	461a      	mov	r2, r3
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	fbb3 f2f2 	udiv	r2, r3, r2
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	441a      	add	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	fbb2 f3f3 	udiv	r3, r2, r3
 800846a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	2b0f      	cmp	r3, #15
 8008470:	d909      	bls.n	8008486 <UART_SetConfig+0x55e>
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008478:	d205      	bcs.n	8008486 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	b29a      	uxth	r2, r3
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	60da      	str	r2, [r3, #12]
 8008484:	e002      	b.n	800848c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2201      	movs	r2, #1
 8008490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2201      	movs	r2, #1
 8008498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2200      	movs	r2, #0
 80084a0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2200      	movs	r2, #0
 80084a6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80084a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3730      	adds	r7, #48	; 0x30
 80084b0:	46bd      	mov	sp, r7
 80084b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084b6:	bf00      	nop
 80084b8:	0800c66c 	.word	0x0800c66c
 80084bc:	00f42400 	.word	0x00f42400

080084c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00a      	beq.n	80084ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00a      	beq.n	800852e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	f003 0310 	and.w	r3, r3, #16
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	f003 0320 	and.w	r3, r3, #32
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01a      	beq.n	80085d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085be:	d10a      	bne.n	80085d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	605a      	str	r2, [r3, #4]
  }
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af02      	add	r7, sp, #8
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008614:	f7fa fd86 	bl	8003124 <HAL_GetTick>
 8008618:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b08      	cmp	r3, #8
 8008626:	d10e      	bne.n	8008646 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f82f 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e025      	b.n	8008692 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b04      	cmp	r3, #4
 8008652:	d10e      	bne.n	8008672 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f819 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e00f      	b.n	8008692 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2220      	movs	r2, #32
 8008676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b09c      	sub	sp, #112	; 0x70
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	603b      	str	r3, [r7, #0]
 80086a6:	4613      	mov	r3, r2
 80086a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086aa:	e0a9      	b.n	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086b2:	f000 80a5 	beq.w	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b6:	f7fa fd35 	bl	8003124 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d302      	bcc.n	80086cc <UART_WaitOnFlagUntilTimeout+0x32>
 80086c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d140      	bne.n	800874e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086e0:	667b      	str	r3, [r7, #100]	; 0x64
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e6      	bne.n	80086cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3308      	adds	r3, #8
 8008704:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008708:	e853 3f00 	ldrex	r3, [r3]
 800870c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	663b      	str	r3, [r7, #96]	; 0x60
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800871e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008720:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800872c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e5      	bne.n	80086fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2220      	movs	r2, #32
 8008736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e069      	b.n	8008822 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d051      	beq.n	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800876a:	d149      	bne.n	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008774:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800878a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
 8008796:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800879a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	613b      	str	r3, [r7, #16]
   return(result);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	66bb      	str	r3, [r7, #104]	; 0x68
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087c8:	623a      	str	r2, [r7, #32]
 80087ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	69f9      	ldr	r1, [r7, #28]
 80087ce:	6a3a      	ldr	r2, [r7, #32]
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2220      	movs	r2, #32
 80087e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e010      	b.n	8008822 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69da      	ldr	r2, [r3, #28]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	4013      	ands	r3, r2
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	429a      	cmp	r2, r3
 800881c:	f43f af46 	beq.w	80086ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3770      	adds	r7, #112	; 0x70
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800882c:	b480      	push	{r7}
 800882e:	b0a3      	sub	sp, #140	; 0x8c
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	4613      	mov	r3, r2
 8008838:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	88fa      	ldrh	r2, [r7, #6]
 8008844:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	88fa      	ldrh	r2, [r7, #6]
 800884c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800885e:	d10e      	bne.n	800887e <UART_Start_Receive_IT+0x52>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d105      	bne.n	8008874 <UART_Start_Receive_IT+0x48>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800886e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008872:	e02d      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	22ff      	movs	r2, #255	; 0xff
 8008878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800887c:	e028      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10d      	bne.n	80088a2 <UART_Start_Receive_IT+0x76>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d104      	bne.n	8008898 <UART_Start_Receive_IT+0x6c>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	22ff      	movs	r2, #255	; 0xff
 8008892:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008896:	e01b      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	227f      	movs	r2, #127	; 0x7f
 800889c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088a0:	e016      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088aa:	d10d      	bne.n	80088c8 <UART_Start_Receive_IT+0x9c>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d104      	bne.n	80088be <UART_Start_Receive_IT+0x92>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	227f      	movs	r2, #127	; 0x7f
 80088b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088bc:	e008      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	223f      	movs	r2, #63	; 0x3f
 80088c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088c6:	e003      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2222      	movs	r2, #34	; 0x22
 80088dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3308      	adds	r3, #8
 80088e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80088f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3308      	adds	r3, #8
 8008900:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008904:	673a      	str	r2, [r7, #112]	; 0x70
 8008906:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800890a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e3      	bne.n	80088e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800891c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008920:	d153      	bne.n	80089ca <UART_Start_Receive_IT+0x19e>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008928:	88fa      	ldrh	r2, [r7, #6]
 800892a:	429a      	cmp	r2, r3
 800892c:	d34d      	bcc.n	80089ca <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008936:	d107      	bne.n	8008948 <UART_Start_Receive_IT+0x11c>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4a4b      	ldr	r2, [pc, #300]	; (8008a70 <UART_Start_Receive_IT+0x244>)
 8008944:	671a      	str	r2, [r3, #112]	; 0x70
 8008946:	e002      	b.n	800894e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4a4a      	ldr	r2, [pc, #296]	; (8008a74 <UART_Start_Receive_IT+0x248>)
 800894c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d01a      	beq.n	8008994 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800896c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800896e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008982:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008986:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800898e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e4      	bne.n	800895e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3308      	adds	r3, #8
 800899a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3308      	adds	r3, #8
 80089b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80089b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80089b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e5      	bne.n	8008994 <UART_Start_Receive_IT+0x168>
 80089c8:	e04a      	b.n	8008a60 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d2:	d107      	bne.n	80089e4 <UART_Start_Receive_IT+0x1b8>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d103      	bne.n	80089e4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4a26      	ldr	r2, [pc, #152]	; (8008a78 <UART_Start_Receive_IT+0x24c>)
 80089e0:	671a      	str	r2, [r3, #112]	; 0x70
 80089e2:	e002      	b.n	80089ea <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4a25      	ldr	r2, [pc, #148]	; (8008a7c <UART_Start_Receive_IT+0x250>)
 80089e8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d019      	beq.n	8008a2e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008a0e:	677b      	str	r3, [r7, #116]	; 0x74
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a18:	637b      	str	r3, [r7, #52]	; 0x34
 8008a1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e6      	bne.n	80089fa <UART_Start_Receive_IT+0x1ce>
 8008a2c:	e018      	b.n	8008a60 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	e853 3f00 	ldrex	r3, [r3]
 8008a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f043 0320 	orr.w	r3, r3, #32
 8008a42:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a4c:	623b      	str	r3, [r7, #32]
 8008a4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	69f9      	ldr	r1, [r7, #28]
 8008a52:	6a3a      	ldr	r2, [r7, #32]
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e6      	bne.n	8008a2e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	378c      	adds	r7, #140	; 0x8c
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	08009189 	.word	0x08009189
 8008a74:	08008e91 	.word	0x08008e91
 8008a78:	08008d2f 	.word	0x08008d2f
 8008a7c:	08008bcf 	.word	0x08008bcf

08008a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b095      	sub	sp, #84	; 0x54
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8008aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e6      	bne.n	8008a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ad0:	f023 0301 	bic.w	r3, r3, #1
 8008ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3308      	adds	r3, #8
 8008adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e3      	bne.n	8008aba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d118      	bne.n	8008b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f023 0310 	bic.w	r3, r3, #16
 8008b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	461a      	mov	r2, r3
 8008b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b18:	61bb      	str	r3, [r7, #24]
 8008b1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6979      	ldr	r1, [r7, #20]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	613b      	str	r3, [r7, #16]
   return(result);
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e6      	bne.n	8008afa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008b40:	bf00      	nop
 8008b42:	3754      	adds	r7, #84	; 0x54
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff f9c6 	bl	8007efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b70:	bf00      	nop
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b94:	61fb      	str	r3, [r7, #28]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	61bb      	str	r3, [r7, #24]
 8008ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	6979      	ldr	r1, [r7, #20]
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	613b      	str	r3, [r7, #16]
   return(result);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e6      	bne.n	8008b80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff f991 	bl	8007ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bc6:	bf00      	nop
 8008bc8:	3720      	adds	r7, #32
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b096      	sub	sp, #88	; 0x58
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bdc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be6:	2b22      	cmp	r3, #34	; 0x22
 8008be8:	f040 8095 	bne.w	8008d16 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bf6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008bfa:	b2d9      	uxtb	r1, r3
 8008bfc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c06:	400a      	ands	r2, r1
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d178      	bne.n	8008d26 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c48:	653b      	str	r3, [r7, #80]	; 0x50
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c52:	647b      	str	r3, [r7, #68]	; 0x44
 8008c54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e6      	bne.n	8008c34 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	623b      	str	r3, [r7, #32]
   return(result);
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	f023 0301 	bic.w	r3, r3, #1
 8008c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3308      	adds	r3, #8
 8008c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c86:	633a      	str	r2, [r7, #48]	; 0x30
 8008c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e5      	bne.n	8008c66 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d12e      	bne.n	8008d0e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 0310 	bic.w	r3, r3, #16
 8008cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	69b9      	ldr	r1, [r7, #24]
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e6      	bne.n	8008cb6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	f003 0310 	and.w	r3, r3, #16
 8008cf2:	2b10      	cmp	r3, #16
 8008cf4:	d103      	bne.n	8008cfe <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2210      	movs	r2, #16
 8008cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff f902 	bl	8007f10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d0c:	e00b      	b.n	8008d26 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7f8 fa0c 	bl	800112c <HAL_UART_RxCpltCallback>
}
 8008d14:	e007      	b.n	8008d26 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	699a      	ldr	r2, [r3, #24]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f042 0208 	orr.w	r2, r2, #8
 8008d24:	619a      	str	r2, [r3, #24]
}
 8008d26:	bf00      	nop
 8008d28:	3758      	adds	r7, #88	; 0x58
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b096      	sub	sp, #88	; 0x58
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d46:	2b22      	cmp	r3, #34	; 0x22
 8008d48:	f040 8095 	bne.w	8008e76 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d5a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d5c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008d60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008d64:	4013      	ands	r3, r2
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d6a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d70:	1c9a      	adds	r2, r3, #2
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d178      	bne.n	8008e86 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db2:	643b      	str	r3, [r7, #64]	; 0x40
 8008db4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008db8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e6      	bne.n	8008d94 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	f023 0301 	bic.w	r3, r3, #1
 8008ddc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3308      	adds	r3, #8
 8008de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008de8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e5      	bne.n	8008dc6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d12e      	bne.n	8008e6e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	e853 3f00 	ldrex	r3, [r3]
 8008e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f023 0310 	bic.w	r3, r3, #16
 8008e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	461a      	mov	r2, r3
 8008e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e34:	61bb      	str	r3, [r7, #24]
 8008e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6979      	ldr	r1, [r7, #20]
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	e841 2300 	strex	r3, r2, [r1]
 8008e40:	613b      	str	r3, [r7, #16]
   return(result);
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e6      	bne.n	8008e16 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f003 0310 	and.w	r3, r3, #16
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d103      	bne.n	8008e5e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2210      	movs	r2, #16
 8008e5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7ff f852 	bl	8007f10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e6c:	e00b      	b.n	8008e86 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7f8 f95c 	bl	800112c <HAL_UART_RxCpltCallback>
}
 8008e74:	e007      	b.n	8008e86 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	699a      	ldr	r2, [r3, #24]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f042 0208 	orr.w	r2, r2, #8
 8008e84:	619a      	str	r2, [r3, #24]
}
 8008e86:	bf00      	nop
 8008e88:	3758      	adds	r7, #88	; 0x58
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b0a6      	sub	sp, #152	; 0x98
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e9e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec6:	2b22      	cmp	r3, #34	; 0x22
 8008ec8:	f040 814f 	bne.w	800916a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ed2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ed6:	e0f6      	b.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ee2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008ee6:	b2d9      	uxtb	r1, r3
 8008ee8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef2:	400a      	ands	r2, r1
 8008ef4:	b2d2      	uxtb	r2, r2
 8008ef6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f22:	f003 0307 	and.w	r3, r3, #7
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d053      	beq.n	8008fd2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d011      	beq.n	8008f5a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00b      	beq.n	8008f5a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2201      	movs	r2, #1
 8008f48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f50:	f043 0201 	orr.w	r2, r3, #1
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d011      	beq.n	8008f8a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00b      	beq.n	8008f8a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2202      	movs	r2, #2
 8008f78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f80:	f043 0204 	orr.w	r2, r3, #4
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d011      	beq.n	8008fba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f9a:	f003 0301 	and.w	r3, r3, #1
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2204      	movs	r2, #4
 8008fa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fb0:	f043 0202 	orr.w	r2, r3, #2
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d006      	beq.n	8008fd2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7fe ff99 	bl	8007efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d173      	bne.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009000:	66bb      	str	r3, [r7, #104]	; 0x68
 8009002:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009004:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009006:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009008:	e841 2300 	strex	r3, r2, [r1]
 800900c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800900e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e4      	bne.n	8008fde <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800902a:	f023 0301 	bic.w	r3, r3, #1
 800902e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3308      	adds	r3, #8
 8009036:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009038:	657a      	str	r2, [r7, #84]	; 0x54
 800903a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800903e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e3      	bne.n	8009014 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2220      	movs	r2, #32
 8009050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800905e:	2b01      	cmp	r3, #1
 8009060:	d12e      	bne.n	80090c0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	f023 0310 	bic.w	r3, r3, #16
 800907c:	67bb      	str	r3, [r7, #120]	; 0x78
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009086:	643b      	str	r3, [r7, #64]	; 0x40
 8009088:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800908c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e6      	bne.n	8009068 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	f003 0310 	and.w	r3, r3, #16
 80090a4:	2b10      	cmp	r3, #16
 80090a6:	d103      	bne.n	80090b0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2210      	movs	r2, #16
 80090ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7fe ff29 	bl	8007f10 <HAL_UARTEx_RxEventCallback>
 80090be:	e002      	b.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7f8 f833 	bl	800112c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d006      	beq.n	80090dc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80090ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090d2:	f003 0320 	and.w	r3, r3, #32
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f47f aefe 	bne.w	8008ed8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090e6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d045      	beq.n	800917a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d23e      	bcs.n	800917a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3308      	adds	r3, #8
 8009102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	61fb      	str	r3, [r7, #28]
   return(result);
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009112:	673b      	str	r3, [r7, #112]	; 0x70
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3308      	adds	r3, #8
 800911a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800911c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e5      	bne.n	80090fc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a14      	ldr	r2, [pc, #80]	; (8009184 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009134:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	60bb      	str	r3, [r7, #8]
   return(result);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f043 0320 	orr.w	r3, r3, #32
 800914a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009154:	61bb      	str	r3, [r7, #24]
 8009156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6979      	ldr	r1, [r7, #20]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	613b      	str	r3, [r7, #16]
   return(result);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e6      	bne.n	8009136 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009168:	e007      	b.n	800917a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	699a      	ldr	r2, [r3, #24]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f042 0208 	orr.w	r2, r2, #8
 8009178:	619a      	str	r2, [r3, #24]
}
 800917a:	bf00      	nop
 800917c:	3798      	adds	r7, #152	; 0x98
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	08008bcf 	.word	0x08008bcf

08009188 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b0a8      	sub	sp, #160	; 0xa0
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009196:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091be:	2b22      	cmp	r3, #34	; 0x22
 80091c0:	f040 8153 	bne.w	800946a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091ce:	e0fa      	b.n	80093c6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80091e2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80091e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80091ea:	4013      	ands	r3, r2
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f8:	1c9a      	adds	r2, r3, #2
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009204:	b29b      	uxth	r3, r3
 8009206:	3b01      	subs	r3, #1
 8009208:	b29a      	uxth	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800921a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	2b00      	cmp	r3, #0
 8009224:	d053      	beq.n	80092ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009226:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d011      	beq.n	8009256 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009232:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00b      	beq.n	8009256 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2201      	movs	r2, #1
 8009244:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800924c:	f043 0201 	orr.w	r2, r3, #1
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009256:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800925a:	f003 0302 	and.w	r3, r3, #2
 800925e:	2b00      	cmp	r3, #0
 8009260:	d011      	beq.n	8009286 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009262:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00b      	beq.n	8009286 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2202      	movs	r2, #2
 8009274:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800927c:	f043 0204 	orr.w	r2, r3, #4
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800928a:	f003 0304 	and.w	r3, r3, #4
 800928e:	2b00      	cmp	r3, #0
 8009290:	d011      	beq.n	80092b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009292:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00b      	beq.n	80092b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2204      	movs	r2, #4
 80092a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ac:	f043 0202 	orr.w	r2, r3, #2
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d006      	beq.n	80092ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7fe fe1b 	bl	8007efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d175      	bne.n	80093c6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80092e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092fe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009302:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800930a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e4      	bne.n	80092da <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3308      	adds	r3, #8
 8009316:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009326:	f023 0301 	bic.w	r3, r3, #1
 800932a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3308      	adds	r3, #8
 8009334:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009338:	65ba      	str	r2, [r7, #88]	; 0x58
 800933a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800933e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009340:	e841 2300 	strex	r3, r2, [r1]
 8009344:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e1      	bne.n	8009310 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2220      	movs	r2, #32
 8009350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800935e:	2b01      	cmp	r3, #1
 8009360:	d12e      	bne.n	80093c0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009378:	f023 0310 	bic.w	r3, r3, #16
 800937c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009386:	647b      	str	r3, [r7, #68]	; 0x44
 8009388:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800938c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e6      	bne.n	8009368 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	f003 0310 	and.w	r3, r3, #16
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d103      	bne.n	80093b0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2210      	movs	r2, #16
 80093ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7fe fda9 	bl	8007f10 <HAL_UARTEx_RxEventCallback>
 80093be:	e002      	b.n	80093c6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7f7 feb3 	bl	800112c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d006      	beq.n	80093dc <UART_RxISR_16BIT_FIFOEN+0x254>
 80093ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093d2:	f003 0320 	and.w	r3, r3, #32
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f47f aefa 	bne.w	80091d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093e6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d045      	beq.n	800947a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093f4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d23e      	bcs.n	800947a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3308      	adds	r3, #8
 8009402:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	e853 3f00 	ldrex	r3, [r3]
 800940a:	623b      	str	r3, [r7, #32]
   return(result);
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009412:	677b      	str	r3, [r7, #116]	; 0x74
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3308      	adds	r3, #8
 800941a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800941c:	633a      	str	r2, [r7, #48]	; 0x30
 800941e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e5      	bne.n	80093fc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a14      	ldr	r2, [pc, #80]	; (8009484 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009434:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	60fb      	str	r3, [r7, #12]
   return(result);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f043 0320 	orr.w	r3, r3, #32
 800944a:	673b      	str	r3, [r7, #112]	; 0x70
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009454:	61fb      	str	r3, [r7, #28]
 8009456:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	69b9      	ldr	r1, [r7, #24]
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	617b      	str	r3, [r7, #20]
   return(result);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e6      	bne.n	8009436 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009468:	e007      	b.n	800947a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0208 	orr.w	r2, r2, #8
 8009478:	619a      	str	r2, [r3, #24]
}
 800947a:	bf00      	nop
 800947c:	37a0      	adds	r7, #160	; 0xa0
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	08008d2f 	.word	0x08008d2f

08009488 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <HAL_UARTEx_DisableFifoMode+0x16>
 80094d6:	2302      	movs	r3, #2
 80094d8:	e027      	b.n	800952a <HAL_UARTEx_DisableFifoMode+0x66>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2224      	movs	r2, #36	; 0x24
 80094e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 0201 	bic.w	r2, r2, #1
 8009500:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009508:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2220      	movs	r2, #32
 800951c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009546:	2b01      	cmp	r3, #1
 8009548:	d101      	bne.n	800954e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800954a:	2302      	movs	r3, #2
 800954c:	e02d      	b.n	80095aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2224      	movs	r2, #36	; 0x24
 800955a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0201 	bic.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f850 	bl	8009630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2220      	movs	r2, #32
 800959c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d101      	bne.n	80095ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095c6:	2302      	movs	r3, #2
 80095c8:	e02d      	b.n	8009626 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2224      	movs	r2, #36	; 0x24
 80095d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 0201 	bic.w	r2, r2, #1
 80095f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f812 	bl	8009630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2220      	movs	r2, #32
 8009618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800963c:	2b00      	cmp	r3, #0
 800963e:	d108      	bne.n	8009652 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009650:	e031      	b.n	80096b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009652:	2308      	movs	r3, #8
 8009654:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009656:	2308      	movs	r3, #8
 8009658:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	0e5b      	lsrs	r3, r3, #25
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f003 0307 	and.w	r3, r3, #7
 8009668:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	0f5b      	lsrs	r3, r3, #29
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	7b3a      	ldrb	r2, [r7, #12]
 800967e:	4911      	ldr	r1, [pc, #68]	; (80096c4 <UARTEx_SetNbDataToProcess+0x94>)
 8009680:	5c8a      	ldrb	r2, [r1, r2]
 8009682:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009686:	7b3a      	ldrb	r2, [r7, #12]
 8009688:	490f      	ldr	r1, [pc, #60]	; (80096c8 <UARTEx_SetNbDataToProcess+0x98>)
 800968a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800968c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009690:	b29a      	uxth	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	7b7a      	ldrb	r2, [r7, #13]
 800969c:	4909      	ldr	r1, [pc, #36]	; (80096c4 <UARTEx_SetNbDataToProcess+0x94>)
 800969e:	5c8a      	ldrb	r2, [r1, r2]
 80096a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096a4:	7b7a      	ldrb	r2, [r7, #13]
 80096a6:	4908      	ldr	r1, [pc, #32]	; (80096c8 <UARTEx_SetNbDataToProcess+0x98>)
 80096a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80096b6:	bf00      	nop
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	0800c684 	.word	0x0800c684
 80096c8:	0800c68c 	.word	0x0800c68c

080096cc <__errno>:
 80096cc:	4b01      	ldr	r3, [pc, #4]	; (80096d4 <__errno+0x8>)
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	200000ec 	.word	0x200000ec

080096d8 <__libc_init_array>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	4d0d      	ldr	r5, [pc, #52]	; (8009710 <__libc_init_array+0x38>)
 80096dc:	4c0d      	ldr	r4, [pc, #52]	; (8009714 <__libc_init_array+0x3c>)
 80096de:	1b64      	subs	r4, r4, r5
 80096e0:	10a4      	asrs	r4, r4, #2
 80096e2:	2600      	movs	r6, #0
 80096e4:	42a6      	cmp	r6, r4
 80096e6:	d109      	bne.n	80096fc <__libc_init_array+0x24>
 80096e8:	4d0b      	ldr	r5, [pc, #44]	; (8009718 <__libc_init_array+0x40>)
 80096ea:	4c0c      	ldr	r4, [pc, #48]	; (800971c <__libc_init_array+0x44>)
 80096ec:	f002 ff16 	bl	800c51c <_init>
 80096f0:	1b64      	subs	r4, r4, r5
 80096f2:	10a4      	asrs	r4, r4, #2
 80096f4:	2600      	movs	r6, #0
 80096f6:	42a6      	cmp	r6, r4
 80096f8:	d105      	bne.n	8009706 <__libc_init_array+0x2e>
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009700:	4798      	blx	r3
 8009702:	3601      	adds	r6, #1
 8009704:	e7ee      	b.n	80096e4 <__libc_init_array+0xc>
 8009706:	f855 3b04 	ldr.w	r3, [r5], #4
 800970a:	4798      	blx	r3
 800970c:	3601      	adds	r6, #1
 800970e:	e7f2      	b.n	80096f6 <__libc_init_array+0x1e>
 8009710:	0800ca74 	.word	0x0800ca74
 8009714:	0800ca74 	.word	0x0800ca74
 8009718:	0800ca74 	.word	0x0800ca74
 800971c:	0800ca78 	.word	0x0800ca78

08009720 <memcpy>:
 8009720:	440a      	add	r2, r1
 8009722:	4291      	cmp	r1, r2
 8009724:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009728:	d100      	bne.n	800972c <memcpy+0xc>
 800972a:	4770      	bx	lr
 800972c:	b510      	push	{r4, lr}
 800972e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009736:	4291      	cmp	r1, r2
 8009738:	d1f9      	bne.n	800972e <memcpy+0xe>
 800973a:	bd10      	pop	{r4, pc}

0800973c <memset>:
 800973c:	4402      	add	r2, r0
 800973e:	4603      	mov	r3, r0
 8009740:	4293      	cmp	r3, r2
 8009742:	d100      	bne.n	8009746 <memset+0xa>
 8009744:	4770      	bx	lr
 8009746:	f803 1b01 	strb.w	r1, [r3], #1
 800974a:	e7f9      	b.n	8009740 <memset+0x4>

0800974c <__cvt>:
 800974c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009750:	ec55 4b10 	vmov	r4, r5, d0
 8009754:	2d00      	cmp	r5, #0
 8009756:	460e      	mov	r6, r1
 8009758:	4619      	mov	r1, r3
 800975a:	462b      	mov	r3, r5
 800975c:	bfbb      	ittet	lt
 800975e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009762:	461d      	movlt	r5, r3
 8009764:	2300      	movge	r3, #0
 8009766:	232d      	movlt	r3, #45	; 0x2d
 8009768:	700b      	strb	r3, [r1, #0]
 800976a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800976c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009770:	4691      	mov	r9, r2
 8009772:	f023 0820 	bic.w	r8, r3, #32
 8009776:	bfbc      	itt	lt
 8009778:	4622      	movlt	r2, r4
 800977a:	4614      	movlt	r4, r2
 800977c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009780:	d005      	beq.n	800978e <__cvt+0x42>
 8009782:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009786:	d100      	bne.n	800978a <__cvt+0x3e>
 8009788:	3601      	adds	r6, #1
 800978a:	2102      	movs	r1, #2
 800978c:	e000      	b.n	8009790 <__cvt+0x44>
 800978e:	2103      	movs	r1, #3
 8009790:	ab03      	add	r3, sp, #12
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	ab02      	add	r3, sp, #8
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	ec45 4b10 	vmov	d0, r4, r5
 800979c:	4653      	mov	r3, sl
 800979e:	4632      	mov	r2, r6
 80097a0:	f000 fcfe 	bl	800a1a0 <_dtoa_r>
 80097a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097a8:	4607      	mov	r7, r0
 80097aa:	d102      	bne.n	80097b2 <__cvt+0x66>
 80097ac:	f019 0f01 	tst.w	r9, #1
 80097b0:	d022      	beq.n	80097f8 <__cvt+0xac>
 80097b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097b6:	eb07 0906 	add.w	r9, r7, r6
 80097ba:	d110      	bne.n	80097de <__cvt+0x92>
 80097bc:	783b      	ldrb	r3, [r7, #0]
 80097be:	2b30      	cmp	r3, #48	; 0x30
 80097c0:	d10a      	bne.n	80097d8 <__cvt+0x8c>
 80097c2:	2200      	movs	r2, #0
 80097c4:	2300      	movs	r3, #0
 80097c6:	4620      	mov	r0, r4
 80097c8:	4629      	mov	r1, r5
 80097ca:	f7f7 f9a5 	bl	8000b18 <__aeabi_dcmpeq>
 80097ce:	b918      	cbnz	r0, 80097d8 <__cvt+0x8c>
 80097d0:	f1c6 0601 	rsb	r6, r6, #1
 80097d4:	f8ca 6000 	str.w	r6, [sl]
 80097d8:	f8da 3000 	ldr.w	r3, [sl]
 80097dc:	4499      	add	r9, r3
 80097de:	2200      	movs	r2, #0
 80097e0:	2300      	movs	r3, #0
 80097e2:	4620      	mov	r0, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	f7f7 f997 	bl	8000b18 <__aeabi_dcmpeq>
 80097ea:	b108      	cbz	r0, 80097f0 <__cvt+0xa4>
 80097ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80097f0:	2230      	movs	r2, #48	; 0x30
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	454b      	cmp	r3, r9
 80097f6:	d307      	bcc.n	8009808 <__cvt+0xbc>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097fc:	1bdb      	subs	r3, r3, r7
 80097fe:	4638      	mov	r0, r7
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	b004      	add	sp, #16
 8009804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009808:	1c59      	adds	r1, r3, #1
 800980a:	9103      	str	r1, [sp, #12]
 800980c:	701a      	strb	r2, [r3, #0]
 800980e:	e7f0      	b.n	80097f2 <__cvt+0xa6>

08009810 <__exponent>:
 8009810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009812:	4603      	mov	r3, r0
 8009814:	2900      	cmp	r1, #0
 8009816:	bfb8      	it	lt
 8009818:	4249      	neglt	r1, r1
 800981a:	f803 2b02 	strb.w	r2, [r3], #2
 800981e:	bfb4      	ite	lt
 8009820:	222d      	movlt	r2, #45	; 0x2d
 8009822:	222b      	movge	r2, #43	; 0x2b
 8009824:	2909      	cmp	r1, #9
 8009826:	7042      	strb	r2, [r0, #1]
 8009828:	dd2a      	ble.n	8009880 <__exponent+0x70>
 800982a:	f10d 0407 	add.w	r4, sp, #7
 800982e:	46a4      	mov	ip, r4
 8009830:	270a      	movs	r7, #10
 8009832:	46a6      	mov	lr, r4
 8009834:	460a      	mov	r2, r1
 8009836:	fb91 f6f7 	sdiv	r6, r1, r7
 800983a:	fb07 1516 	mls	r5, r7, r6, r1
 800983e:	3530      	adds	r5, #48	; 0x30
 8009840:	2a63      	cmp	r2, #99	; 0x63
 8009842:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009846:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800984a:	4631      	mov	r1, r6
 800984c:	dcf1      	bgt.n	8009832 <__exponent+0x22>
 800984e:	3130      	adds	r1, #48	; 0x30
 8009850:	f1ae 0502 	sub.w	r5, lr, #2
 8009854:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009858:	1c44      	adds	r4, r0, #1
 800985a:	4629      	mov	r1, r5
 800985c:	4561      	cmp	r1, ip
 800985e:	d30a      	bcc.n	8009876 <__exponent+0x66>
 8009860:	f10d 0209 	add.w	r2, sp, #9
 8009864:	eba2 020e 	sub.w	r2, r2, lr
 8009868:	4565      	cmp	r5, ip
 800986a:	bf88      	it	hi
 800986c:	2200      	movhi	r2, #0
 800986e:	4413      	add	r3, r2
 8009870:	1a18      	subs	r0, r3, r0
 8009872:	b003      	add	sp, #12
 8009874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800987a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800987e:	e7ed      	b.n	800985c <__exponent+0x4c>
 8009880:	2330      	movs	r3, #48	; 0x30
 8009882:	3130      	adds	r1, #48	; 0x30
 8009884:	7083      	strb	r3, [r0, #2]
 8009886:	70c1      	strb	r1, [r0, #3]
 8009888:	1d03      	adds	r3, r0, #4
 800988a:	e7f1      	b.n	8009870 <__exponent+0x60>

0800988c <_printf_float>:
 800988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	ed2d 8b02 	vpush	{d8}
 8009894:	b08d      	sub	sp, #52	; 0x34
 8009896:	460c      	mov	r4, r1
 8009898:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800989c:	4616      	mov	r6, r2
 800989e:	461f      	mov	r7, r3
 80098a0:	4605      	mov	r5, r0
 80098a2:	f001 fa6b 	bl	800ad7c <_localeconv_r>
 80098a6:	f8d0 a000 	ldr.w	sl, [r0]
 80098aa:	4650      	mov	r0, sl
 80098ac:	f7f6 fcb8 	bl	8000220 <strlen>
 80098b0:	2300      	movs	r3, #0
 80098b2:	930a      	str	r3, [sp, #40]	; 0x28
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	9305      	str	r3, [sp, #20]
 80098b8:	f8d8 3000 	ldr.w	r3, [r8]
 80098bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80098c0:	3307      	adds	r3, #7
 80098c2:	f023 0307 	bic.w	r3, r3, #7
 80098c6:	f103 0208 	add.w	r2, r3, #8
 80098ca:	f8c8 2000 	str.w	r2, [r8]
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80098d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80098da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098de:	9307      	str	r3, [sp, #28]
 80098e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80098e4:	ee08 0a10 	vmov	s16, r0
 80098e8:	4b9f      	ldr	r3, [pc, #636]	; (8009b68 <_printf_float+0x2dc>)
 80098ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098f2:	f7f7 f943 	bl	8000b7c <__aeabi_dcmpun>
 80098f6:	bb88      	cbnz	r0, 800995c <_printf_float+0xd0>
 80098f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098fc:	4b9a      	ldr	r3, [pc, #616]	; (8009b68 <_printf_float+0x2dc>)
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009902:	f7f7 f91d 	bl	8000b40 <__aeabi_dcmple>
 8009906:	bb48      	cbnz	r0, 800995c <_printf_float+0xd0>
 8009908:	2200      	movs	r2, #0
 800990a:	2300      	movs	r3, #0
 800990c:	4640      	mov	r0, r8
 800990e:	4649      	mov	r1, r9
 8009910:	f7f7 f90c 	bl	8000b2c <__aeabi_dcmplt>
 8009914:	b110      	cbz	r0, 800991c <_printf_float+0x90>
 8009916:	232d      	movs	r3, #45	; 0x2d
 8009918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800991c:	4b93      	ldr	r3, [pc, #588]	; (8009b6c <_printf_float+0x2e0>)
 800991e:	4894      	ldr	r0, [pc, #592]	; (8009b70 <_printf_float+0x2e4>)
 8009920:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009924:	bf94      	ite	ls
 8009926:	4698      	movls	r8, r3
 8009928:	4680      	movhi	r8, r0
 800992a:	2303      	movs	r3, #3
 800992c:	6123      	str	r3, [r4, #16]
 800992e:	9b05      	ldr	r3, [sp, #20]
 8009930:	f023 0204 	bic.w	r2, r3, #4
 8009934:	6022      	str	r2, [r4, #0]
 8009936:	f04f 0900 	mov.w	r9, #0
 800993a:	9700      	str	r7, [sp, #0]
 800993c:	4633      	mov	r3, r6
 800993e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009940:	4621      	mov	r1, r4
 8009942:	4628      	mov	r0, r5
 8009944:	f000 f9d8 	bl	8009cf8 <_printf_common>
 8009948:	3001      	adds	r0, #1
 800994a:	f040 8090 	bne.w	8009a6e <_printf_float+0x1e2>
 800994e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009952:	b00d      	add	sp, #52	; 0x34
 8009954:	ecbd 8b02 	vpop	{d8}
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	4642      	mov	r2, r8
 800995e:	464b      	mov	r3, r9
 8009960:	4640      	mov	r0, r8
 8009962:	4649      	mov	r1, r9
 8009964:	f7f7 f90a 	bl	8000b7c <__aeabi_dcmpun>
 8009968:	b140      	cbz	r0, 800997c <_printf_float+0xf0>
 800996a:	464b      	mov	r3, r9
 800996c:	2b00      	cmp	r3, #0
 800996e:	bfbc      	itt	lt
 8009970:	232d      	movlt	r3, #45	; 0x2d
 8009972:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009976:	487f      	ldr	r0, [pc, #508]	; (8009b74 <_printf_float+0x2e8>)
 8009978:	4b7f      	ldr	r3, [pc, #508]	; (8009b78 <_printf_float+0x2ec>)
 800997a:	e7d1      	b.n	8009920 <_printf_float+0x94>
 800997c:	6863      	ldr	r3, [r4, #4]
 800997e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009982:	9206      	str	r2, [sp, #24]
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	d13f      	bne.n	8009a08 <_printf_float+0x17c>
 8009988:	2306      	movs	r3, #6
 800998a:	6063      	str	r3, [r4, #4]
 800998c:	9b05      	ldr	r3, [sp, #20]
 800998e:	6861      	ldr	r1, [r4, #4]
 8009990:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009994:	2300      	movs	r3, #0
 8009996:	9303      	str	r3, [sp, #12]
 8009998:	ab0a      	add	r3, sp, #40	; 0x28
 800999a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800999e:	ab09      	add	r3, sp, #36	; 0x24
 80099a0:	ec49 8b10 	vmov	d0, r8, r9
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	6022      	str	r2, [r4, #0]
 80099a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099ac:	4628      	mov	r0, r5
 80099ae:	f7ff fecd 	bl	800974c <__cvt>
 80099b2:	9b06      	ldr	r3, [sp, #24]
 80099b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099b6:	2b47      	cmp	r3, #71	; 0x47
 80099b8:	4680      	mov	r8, r0
 80099ba:	d108      	bne.n	80099ce <_printf_float+0x142>
 80099bc:	1cc8      	adds	r0, r1, #3
 80099be:	db02      	blt.n	80099c6 <_printf_float+0x13a>
 80099c0:	6863      	ldr	r3, [r4, #4]
 80099c2:	4299      	cmp	r1, r3
 80099c4:	dd41      	ble.n	8009a4a <_printf_float+0x1be>
 80099c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80099ca:	fa5f fb8b 	uxtb.w	fp, fp
 80099ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099d2:	d820      	bhi.n	8009a16 <_printf_float+0x18a>
 80099d4:	3901      	subs	r1, #1
 80099d6:	465a      	mov	r2, fp
 80099d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099dc:	9109      	str	r1, [sp, #36]	; 0x24
 80099de:	f7ff ff17 	bl	8009810 <__exponent>
 80099e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099e4:	1813      	adds	r3, r2, r0
 80099e6:	2a01      	cmp	r2, #1
 80099e8:	4681      	mov	r9, r0
 80099ea:	6123      	str	r3, [r4, #16]
 80099ec:	dc02      	bgt.n	80099f4 <_printf_float+0x168>
 80099ee:	6822      	ldr	r2, [r4, #0]
 80099f0:	07d2      	lsls	r2, r2, #31
 80099f2:	d501      	bpl.n	80099f8 <_printf_float+0x16c>
 80099f4:	3301      	adds	r3, #1
 80099f6:	6123      	str	r3, [r4, #16]
 80099f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d09c      	beq.n	800993a <_printf_float+0xae>
 8009a00:	232d      	movs	r3, #45	; 0x2d
 8009a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a06:	e798      	b.n	800993a <_printf_float+0xae>
 8009a08:	9a06      	ldr	r2, [sp, #24]
 8009a0a:	2a47      	cmp	r2, #71	; 0x47
 8009a0c:	d1be      	bne.n	800998c <_printf_float+0x100>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1bc      	bne.n	800998c <_printf_float+0x100>
 8009a12:	2301      	movs	r3, #1
 8009a14:	e7b9      	b.n	800998a <_printf_float+0xfe>
 8009a16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a1a:	d118      	bne.n	8009a4e <_printf_float+0x1c2>
 8009a1c:	2900      	cmp	r1, #0
 8009a1e:	6863      	ldr	r3, [r4, #4]
 8009a20:	dd0b      	ble.n	8009a3a <_printf_float+0x1ae>
 8009a22:	6121      	str	r1, [r4, #16]
 8009a24:	b913      	cbnz	r3, 8009a2c <_printf_float+0x1a0>
 8009a26:	6822      	ldr	r2, [r4, #0]
 8009a28:	07d0      	lsls	r0, r2, #31
 8009a2a:	d502      	bpl.n	8009a32 <_printf_float+0x1a6>
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	440b      	add	r3, r1
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a34:	f04f 0900 	mov.w	r9, #0
 8009a38:	e7de      	b.n	80099f8 <_printf_float+0x16c>
 8009a3a:	b913      	cbnz	r3, 8009a42 <_printf_float+0x1b6>
 8009a3c:	6822      	ldr	r2, [r4, #0]
 8009a3e:	07d2      	lsls	r2, r2, #31
 8009a40:	d501      	bpl.n	8009a46 <_printf_float+0x1ba>
 8009a42:	3302      	adds	r3, #2
 8009a44:	e7f4      	b.n	8009a30 <_printf_float+0x1a4>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e7f2      	b.n	8009a30 <_printf_float+0x1a4>
 8009a4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a50:	4299      	cmp	r1, r3
 8009a52:	db05      	blt.n	8009a60 <_printf_float+0x1d4>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	6121      	str	r1, [r4, #16]
 8009a58:	07d8      	lsls	r0, r3, #31
 8009a5a:	d5ea      	bpl.n	8009a32 <_printf_float+0x1a6>
 8009a5c:	1c4b      	adds	r3, r1, #1
 8009a5e:	e7e7      	b.n	8009a30 <_printf_float+0x1a4>
 8009a60:	2900      	cmp	r1, #0
 8009a62:	bfd4      	ite	le
 8009a64:	f1c1 0202 	rsble	r2, r1, #2
 8009a68:	2201      	movgt	r2, #1
 8009a6a:	4413      	add	r3, r2
 8009a6c:	e7e0      	b.n	8009a30 <_printf_float+0x1a4>
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	055a      	lsls	r2, r3, #21
 8009a72:	d407      	bmi.n	8009a84 <_printf_float+0x1f8>
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	4642      	mov	r2, r8
 8009a78:	4631      	mov	r1, r6
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	47b8      	blx	r7
 8009a7e:	3001      	adds	r0, #1
 8009a80:	d12c      	bne.n	8009adc <_printf_float+0x250>
 8009a82:	e764      	b.n	800994e <_printf_float+0xc2>
 8009a84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a88:	f240 80e0 	bls.w	8009c4c <_printf_float+0x3c0>
 8009a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a90:	2200      	movs	r2, #0
 8009a92:	2300      	movs	r3, #0
 8009a94:	f7f7 f840 	bl	8000b18 <__aeabi_dcmpeq>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d034      	beq.n	8009b06 <_printf_float+0x27a>
 8009a9c:	4a37      	ldr	r2, [pc, #220]	; (8009b7c <_printf_float+0x2f0>)
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	4631      	mov	r1, r6
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	47b8      	blx	r7
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	f43f af51 	beq.w	800994e <_printf_float+0xc2>
 8009aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	db02      	blt.n	8009aba <_printf_float+0x22e>
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	07d8      	lsls	r0, r3, #31
 8009ab8:	d510      	bpl.n	8009adc <_printf_float+0x250>
 8009aba:	ee18 3a10 	vmov	r3, s16
 8009abe:	4652      	mov	r2, sl
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f af41 	beq.w	800994e <_printf_float+0xc2>
 8009acc:	f04f 0800 	mov.w	r8, #0
 8009ad0:	f104 091a 	add.w	r9, r4, #26
 8009ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	4543      	cmp	r3, r8
 8009ada:	dc09      	bgt.n	8009af0 <_printf_float+0x264>
 8009adc:	6823      	ldr	r3, [r4, #0]
 8009ade:	079b      	lsls	r3, r3, #30
 8009ae0:	f100 8105 	bmi.w	8009cee <_printf_float+0x462>
 8009ae4:	68e0      	ldr	r0, [r4, #12]
 8009ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae8:	4298      	cmp	r0, r3
 8009aea:	bfb8      	it	lt
 8009aec:	4618      	movlt	r0, r3
 8009aee:	e730      	b.n	8009952 <_printf_float+0xc6>
 8009af0:	2301      	movs	r3, #1
 8009af2:	464a      	mov	r2, r9
 8009af4:	4631      	mov	r1, r6
 8009af6:	4628      	mov	r0, r5
 8009af8:	47b8      	blx	r7
 8009afa:	3001      	adds	r0, #1
 8009afc:	f43f af27 	beq.w	800994e <_printf_float+0xc2>
 8009b00:	f108 0801 	add.w	r8, r8, #1
 8009b04:	e7e6      	b.n	8009ad4 <_printf_float+0x248>
 8009b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	dc39      	bgt.n	8009b80 <_printf_float+0x2f4>
 8009b0c:	4a1b      	ldr	r2, [pc, #108]	; (8009b7c <_printf_float+0x2f0>)
 8009b0e:	2301      	movs	r3, #1
 8009b10:	4631      	mov	r1, r6
 8009b12:	4628      	mov	r0, r5
 8009b14:	47b8      	blx	r7
 8009b16:	3001      	adds	r0, #1
 8009b18:	f43f af19 	beq.w	800994e <_printf_float+0xc2>
 8009b1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b20:	4313      	orrs	r3, r2
 8009b22:	d102      	bne.n	8009b2a <_printf_float+0x29e>
 8009b24:	6823      	ldr	r3, [r4, #0]
 8009b26:	07d9      	lsls	r1, r3, #31
 8009b28:	d5d8      	bpl.n	8009adc <_printf_float+0x250>
 8009b2a:	ee18 3a10 	vmov	r3, s16
 8009b2e:	4652      	mov	r2, sl
 8009b30:	4631      	mov	r1, r6
 8009b32:	4628      	mov	r0, r5
 8009b34:	47b8      	blx	r7
 8009b36:	3001      	adds	r0, #1
 8009b38:	f43f af09 	beq.w	800994e <_printf_float+0xc2>
 8009b3c:	f04f 0900 	mov.w	r9, #0
 8009b40:	f104 0a1a 	add.w	sl, r4, #26
 8009b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b46:	425b      	negs	r3, r3
 8009b48:	454b      	cmp	r3, r9
 8009b4a:	dc01      	bgt.n	8009b50 <_printf_float+0x2c4>
 8009b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4e:	e792      	b.n	8009a76 <_printf_float+0x1ea>
 8009b50:	2301      	movs	r3, #1
 8009b52:	4652      	mov	r2, sl
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	f43f aef7 	beq.w	800994e <_printf_float+0xc2>
 8009b60:	f109 0901 	add.w	r9, r9, #1
 8009b64:	e7ee      	b.n	8009b44 <_printf_float+0x2b8>
 8009b66:	bf00      	nop
 8009b68:	7fefffff 	.word	0x7fefffff
 8009b6c:	0800c698 	.word	0x0800c698
 8009b70:	0800c69c 	.word	0x0800c69c
 8009b74:	0800c6a4 	.word	0x0800c6a4
 8009b78:	0800c6a0 	.word	0x0800c6a0
 8009b7c:	0800c6a8 	.word	0x0800c6a8
 8009b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b84:	429a      	cmp	r2, r3
 8009b86:	bfa8      	it	ge
 8009b88:	461a      	movge	r2, r3
 8009b8a:	2a00      	cmp	r2, #0
 8009b8c:	4691      	mov	r9, r2
 8009b8e:	dc37      	bgt.n	8009c00 <_printf_float+0x374>
 8009b90:	f04f 0b00 	mov.w	fp, #0
 8009b94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b98:	f104 021a 	add.w	r2, r4, #26
 8009b9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b9e:	9305      	str	r3, [sp, #20]
 8009ba0:	eba3 0309 	sub.w	r3, r3, r9
 8009ba4:	455b      	cmp	r3, fp
 8009ba6:	dc33      	bgt.n	8009c10 <_printf_float+0x384>
 8009ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bac:	429a      	cmp	r2, r3
 8009bae:	db3b      	blt.n	8009c28 <_printf_float+0x39c>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	07da      	lsls	r2, r3, #31
 8009bb4:	d438      	bmi.n	8009c28 <_printf_float+0x39c>
 8009bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb8:	9a05      	ldr	r2, [sp, #20]
 8009bba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bbc:	1a9a      	subs	r2, r3, r2
 8009bbe:	eba3 0901 	sub.w	r9, r3, r1
 8009bc2:	4591      	cmp	r9, r2
 8009bc4:	bfa8      	it	ge
 8009bc6:	4691      	movge	r9, r2
 8009bc8:	f1b9 0f00 	cmp.w	r9, #0
 8009bcc:	dc35      	bgt.n	8009c3a <_printf_float+0x3ae>
 8009bce:	f04f 0800 	mov.w	r8, #0
 8009bd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bd6:	f104 0a1a 	add.w	sl, r4, #26
 8009bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bde:	1a9b      	subs	r3, r3, r2
 8009be0:	eba3 0309 	sub.w	r3, r3, r9
 8009be4:	4543      	cmp	r3, r8
 8009be6:	f77f af79 	ble.w	8009adc <_printf_float+0x250>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4652      	mov	r2, sl
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	47b8      	blx	r7
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	f43f aeaa 	beq.w	800994e <_printf_float+0xc2>
 8009bfa:	f108 0801 	add.w	r8, r8, #1
 8009bfe:	e7ec      	b.n	8009bda <_printf_float+0x34e>
 8009c00:	4613      	mov	r3, r2
 8009c02:	4631      	mov	r1, r6
 8009c04:	4642      	mov	r2, r8
 8009c06:	4628      	mov	r0, r5
 8009c08:	47b8      	blx	r7
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	d1c0      	bne.n	8009b90 <_printf_float+0x304>
 8009c0e:	e69e      	b.n	800994e <_printf_float+0xc2>
 8009c10:	2301      	movs	r3, #1
 8009c12:	4631      	mov	r1, r6
 8009c14:	4628      	mov	r0, r5
 8009c16:	9205      	str	r2, [sp, #20]
 8009c18:	47b8      	blx	r7
 8009c1a:	3001      	adds	r0, #1
 8009c1c:	f43f ae97 	beq.w	800994e <_printf_float+0xc2>
 8009c20:	9a05      	ldr	r2, [sp, #20]
 8009c22:	f10b 0b01 	add.w	fp, fp, #1
 8009c26:	e7b9      	b.n	8009b9c <_printf_float+0x310>
 8009c28:	ee18 3a10 	vmov	r3, s16
 8009c2c:	4652      	mov	r2, sl
 8009c2e:	4631      	mov	r1, r6
 8009c30:	4628      	mov	r0, r5
 8009c32:	47b8      	blx	r7
 8009c34:	3001      	adds	r0, #1
 8009c36:	d1be      	bne.n	8009bb6 <_printf_float+0x32a>
 8009c38:	e689      	b.n	800994e <_printf_float+0xc2>
 8009c3a:	9a05      	ldr	r2, [sp, #20]
 8009c3c:	464b      	mov	r3, r9
 8009c3e:	4442      	add	r2, r8
 8009c40:	4631      	mov	r1, r6
 8009c42:	4628      	mov	r0, r5
 8009c44:	47b8      	blx	r7
 8009c46:	3001      	adds	r0, #1
 8009c48:	d1c1      	bne.n	8009bce <_printf_float+0x342>
 8009c4a:	e680      	b.n	800994e <_printf_float+0xc2>
 8009c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c4e:	2a01      	cmp	r2, #1
 8009c50:	dc01      	bgt.n	8009c56 <_printf_float+0x3ca>
 8009c52:	07db      	lsls	r3, r3, #31
 8009c54:	d538      	bpl.n	8009cc8 <_printf_float+0x43c>
 8009c56:	2301      	movs	r3, #1
 8009c58:	4642      	mov	r2, r8
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	f43f ae74 	beq.w	800994e <_printf_float+0xc2>
 8009c66:	ee18 3a10 	vmov	r3, s16
 8009c6a:	4652      	mov	r2, sl
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	4628      	mov	r0, r5
 8009c70:	47b8      	blx	r7
 8009c72:	3001      	adds	r0, #1
 8009c74:	f43f ae6b 	beq.w	800994e <_printf_float+0xc2>
 8009c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f7f6 ff4a 	bl	8000b18 <__aeabi_dcmpeq>
 8009c84:	b9d8      	cbnz	r0, 8009cbe <_printf_float+0x432>
 8009c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c88:	f108 0201 	add.w	r2, r8, #1
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	d10e      	bne.n	8009cb6 <_printf_float+0x42a>
 8009c98:	e659      	b.n	800994e <_printf_float+0xc2>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	4652      	mov	r2, sl
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b8      	blx	r7
 8009ca4:	3001      	adds	r0, #1
 8009ca6:	f43f ae52 	beq.w	800994e <_printf_float+0xc2>
 8009caa:	f108 0801 	add.w	r8, r8, #1
 8009cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	4543      	cmp	r3, r8
 8009cb4:	dcf1      	bgt.n	8009c9a <_printf_float+0x40e>
 8009cb6:	464b      	mov	r3, r9
 8009cb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cbc:	e6dc      	b.n	8009a78 <_printf_float+0x1ec>
 8009cbe:	f04f 0800 	mov.w	r8, #0
 8009cc2:	f104 0a1a 	add.w	sl, r4, #26
 8009cc6:	e7f2      	b.n	8009cae <_printf_float+0x422>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4642      	mov	r2, r8
 8009ccc:	e7df      	b.n	8009c8e <_printf_float+0x402>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	464a      	mov	r2, r9
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	47b8      	blx	r7
 8009cd8:	3001      	adds	r0, #1
 8009cda:	f43f ae38 	beq.w	800994e <_printf_float+0xc2>
 8009cde:	f108 0801 	add.w	r8, r8, #1
 8009ce2:	68e3      	ldr	r3, [r4, #12]
 8009ce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ce6:	1a5b      	subs	r3, r3, r1
 8009ce8:	4543      	cmp	r3, r8
 8009cea:	dcf0      	bgt.n	8009cce <_printf_float+0x442>
 8009cec:	e6fa      	b.n	8009ae4 <_printf_float+0x258>
 8009cee:	f04f 0800 	mov.w	r8, #0
 8009cf2:	f104 0919 	add.w	r9, r4, #25
 8009cf6:	e7f4      	b.n	8009ce2 <_printf_float+0x456>

08009cf8 <_printf_common>:
 8009cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cfc:	4616      	mov	r6, r2
 8009cfe:	4699      	mov	r9, r3
 8009d00:	688a      	ldr	r2, [r1, #8]
 8009d02:	690b      	ldr	r3, [r1, #16]
 8009d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	bfb8      	it	lt
 8009d0c:	4613      	movlt	r3, r2
 8009d0e:	6033      	str	r3, [r6, #0]
 8009d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d14:	4607      	mov	r7, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	b10a      	cbz	r2, 8009d1e <_printf_common+0x26>
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	6033      	str	r3, [r6, #0]
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	0699      	lsls	r1, r3, #26
 8009d22:	bf42      	ittt	mi
 8009d24:	6833      	ldrmi	r3, [r6, #0]
 8009d26:	3302      	addmi	r3, #2
 8009d28:	6033      	strmi	r3, [r6, #0]
 8009d2a:	6825      	ldr	r5, [r4, #0]
 8009d2c:	f015 0506 	ands.w	r5, r5, #6
 8009d30:	d106      	bne.n	8009d40 <_printf_common+0x48>
 8009d32:	f104 0a19 	add.w	sl, r4, #25
 8009d36:	68e3      	ldr	r3, [r4, #12]
 8009d38:	6832      	ldr	r2, [r6, #0]
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	42ab      	cmp	r3, r5
 8009d3e:	dc26      	bgt.n	8009d8e <_printf_common+0x96>
 8009d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d44:	1e13      	subs	r3, r2, #0
 8009d46:	6822      	ldr	r2, [r4, #0]
 8009d48:	bf18      	it	ne
 8009d4a:	2301      	movne	r3, #1
 8009d4c:	0692      	lsls	r2, r2, #26
 8009d4e:	d42b      	bmi.n	8009da8 <_printf_common+0xb0>
 8009d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d54:	4649      	mov	r1, r9
 8009d56:	4638      	mov	r0, r7
 8009d58:	47c0      	blx	r8
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	d01e      	beq.n	8009d9c <_printf_common+0xa4>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	68e5      	ldr	r5, [r4, #12]
 8009d62:	6832      	ldr	r2, [r6, #0]
 8009d64:	f003 0306 	and.w	r3, r3, #6
 8009d68:	2b04      	cmp	r3, #4
 8009d6a:	bf08      	it	eq
 8009d6c:	1aad      	subeq	r5, r5, r2
 8009d6e:	68a3      	ldr	r3, [r4, #8]
 8009d70:	6922      	ldr	r2, [r4, #16]
 8009d72:	bf0c      	ite	eq
 8009d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d78:	2500      	movne	r5, #0
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	bfc4      	itt	gt
 8009d7e:	1a9b      	subgt	r3, r3, r2
 8009d80:	18ed      	addgt	r5, r5, r3
 8009d82:	2600      	movs	r6, #0
 8009d84:	341a      	adds	r4, #26
 8009d86:	42b5      	cmp	r5, r6
 8009d88:	d11a      	bne.n	8009dc0 <_printf_common+0xc8>
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	e008      	b.n	8009da0 <_printf_common+0xa8>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4652      	mov	r2, sl
 8009d92:	4649      	mov	r1, r9
 8009d94:	4638      	mov	r0, r7
 8009d96:	47c0      	blx	r8
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d103      	bne.n	8009da4 <_printf_common+0xac>
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da4:	3501      	adds	r5, #1
 8009da6:	e7c6      	b.n	8009d36 <_printf_common+0x3e>
 8009da8:	18e1      	adds	r1, r4, r3
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	2030      	movs	r0, #48	; 0x30
 8009dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009db2:	4422      	add	r2, r4
 8009db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dbc:	3302      	adds	r3, #2
 8009dbe:	e7c7      	b.n	8009d50 <_printf_common+0x58>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	47c0      	blx	r8
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d0e6      	beq.n	8009d9c <_printf_common+0xa4>
 8009dce:	3601      	adds	r6, #1
 8009dd0:	e7d9      	b.n	8009d86 <_printf_common+0x8e>
	...

08009dd4 <_printf_i>:
 8009dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd8:	7e0f      	ldrb	r7, [r1, #24]
 8009dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ddc:	2f78      	cmp	r7, #120	; 0x78
 8009dde:	4691      	mov	r9, r2
 8009de0:	4680      	mov	r8, r0
 8009de2:	460c      	mov	r4, r1
 8009de4:	469a      	mov	sl, r3
 8009de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009dea:	d807      	bhi.n	8009dfc <_printf_i+0x28>
 8009dec:	2f62      	cmp	r7, #98	; 0x62
 8009dee:	d80a      	bhi.n	8009e06 <_printf_i+0x32>
 8009df0:	2f00      	cmp	r7, #0
 8009df2:	f000 80d8 	beq.w	8009fa6 <_printf_i+0x1d2>
 8009df6:	2f58      	cmp	r7, #88	; 0x58
 8009df8:	f000 80a3 	beq.w	8009f42 <_printf_i+0x16e>
 8009dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e04:	e03a      	b.n	8009e7c <_printf_i+0xa8>
 8009e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e0a:	2b15      	cmp	r3, #21
 8009e0c:	d8f6      	bhi.n	8009dfc <_printf_i+0x28>
 8009e0e:	a101      	add	r1, pc, #4	; (adr r1, 8009e14 <_printf_i+0x40>)
 8009e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e14:	08009e6d 	.word	0x08009e6d
 8009e18:	08009e81 	.word	0x08009e81
 8009e1c:	08009dfd 	.word	0x08009dfd
 8009e20:	08009dfd 	.word	0x08009dfd
 8009e24:	08009dfd 	.word	0x08009dfd
 8009e28:	08009dfd 	.word	0x08009dfd
 8009e2c:	08009e81 	.word	0x08009e81
 8009e30:	08009dfd 	.word	0x08009dfd
 8009e34:	08009dfd 	.word	0x08009dfd
 8009e38:	08009dfd 	.word	0x08009dfd
 8009e3c:	08009dfd 	.word	0x08009dfd
 8009e40:	08009f8d 	.word	0x08009f8d
 8009e44:	08009eb1 	.word	0x08009eb1
 8009e48:	08009f6f 	.word	0x08009f6f
 8009e4c:	08009dfd 	.word	0x08009dfd
 8009e50:	08009dfd 	.word	0x08009dfd
 8009e54:	08009faf 	.word	0x08009faf
 8009e58:	08009dfd 	.word	0x08009dfd
 8009e5c:	08009eb1 	.word	0x08009eb1
 8009e60:	08009dfd 	.word	0x08009dfd
 8009e64:	08009dfd 	.word	0x08009dfd
 8009e68:	08009f77 	.word	0x08009f77
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	1d1a      	adds	r2, r3, #4
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	602a      	str	r2, [r5, #0]
 8009e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e0a3      	b.n	8009fc8 <_printf_i+0x1f4>
 8009e80:	6820      	ldr	r0, [r4, #0]
 8009e82:	6829      	ldr	r1, [r5, #0]
 8009e84:	0606      	lsls	r6, r0, #24
 8009e86:	f101 0304 	add.w	r3, r1, #4
 8009e8a:	d50a      	bpl.n	8009ea2 <_printf_i+0xce>
 8009e8c:	680e      	ldr	r6, [r1, #0]
 8009e8e:	602b      	str	r3, [r5, #0]
 8009e90:	2e00      	cmp	r6, #0
 8009e92:	da03      	bge.n	8009e9c <_printf_i+0xc8>
 8009e94:	232d      	movs	r3, #45	; 0x2d
 8009e96:	4276      	negs	r6, r6
 8009e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e9c:	485e      	ldr	r0, [pc, #376]	; (800a018 <_printf_i+0x244>)
 8009e9e:	230a      	movs	r3, #10
 8009ea0:	e019      	b.n	8009ed6 <_printf_i+0x102>
 8009ea2:	680e      	ldr	r6, [r1, #0]
 8009ea4:	602b      	str	r3, [r5, #0]
 8009ea6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009eaa:	bf18      	it	ne
 8009eac:	b236      	sxthne	r6, r6
 8009eae:	e7ef      	b.n	8009e90 <_printf_i+0xbc>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	6820      	ldr	r0, [r4, #0]
 8009eb4:	1d19      	adds	r1, r3, #4
 8009eb6:	6029      	str	r1, [r5, #0]
 8009eb8:	0601      	lsls	r1, r0, #24
 8009eba:	d501      	bpl.n	8009ec0 <_printf_i+0xec>
 8009ebc:	681e      	ldr	r6, [r3, #0]
 8009ebe:	e002      	b.n	8009ec6 <_printf_i+0xf2>
 8009ec0:	0646      	lsls	r6, r0, #25
 8009ec2:	d5fb      	bpl.n	8009ebc <_printf_i+0xe8>
 8009ec4:	881e      	ldrh	r6, [r3, #0]
 8009ec6:	4854      	ldr	r0, [pc, #336]	; (800a018 <_printf_i+0x244>)
 8009ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8009eca:	bf0c      	ite	eq
 8009ecc:	2308      	moveq	r3, #8
 8009ece:	230a      	movne	r3, #10
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ed6:	6865      	ldr	r5, [r4, #4]
 8009ed8:	60a5      	str	r5, [r4, #8]
 8009eda:	2d00      	cmp	r5, #0
 8009edc:	bfa2      	ittt	ge
 8009ede:	6821      	ldrge	r1, [r4, #0]
 8009ee0:	f021 0104 	bicge.w	r1, r1, #4
 8009ee4:	6021      	strge	r1, [r4, #0]
 8009ee6:	b90e      	cbnz	r6, 8009eec <_printf_i+0x118>
 8009ee8:	2d00      	cmp	r5, #0
 8009eea:	d04d      	beq.n	8009f88 <_printf_i+0x1b4>
 8009eec:	4615      	mov	r5, r2
 8009eee:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ef2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ef6:	5dc7      	ldrb	r7, [r0, r7]
 8009ef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009efc:	4637      	mov	r7, r6
 8009efe:	42bb      	cmp	r3, r7
 8009f00:	460e      	mov	r6, r1
 8009f02:	d9f4      	bls.n	8009eee <_printf_i+0x11a>
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	d10b      	bne.n	8009f20 <_printf_i+0x14c>
 8009f08:	6823      	ldr	r3, [r4, #0]
 8009f0a:	07de      	lsls	r6, r3, #31
 8009f0c:	d508      	bpl.n	8009f20 <_printf_i+0x14c>
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	6861      	ldr	r1, [r4, #4]
 8009f12:	4299      	cmp	r1, r3
 8009f14:	bfde      	ittt	le
 8009f16:	2330      	movle	r3, #48	; 0x30
 8009f18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009f20:	1b52      	subs	r2, r2, r5
 8009f22:	6122      	str	r2, [r4, #16]
 8009f24:	f8cd a000 	str.w	sl, [sp]
 8009f28:	464b      	mov	r3, r9
 8009f2a:	aa03      	add	r2, sp, #12
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	4640      	mov	r0, r8
 8009f30:	f7ff fee2 	bl	8009cf8 <_printf_common>
 8009f34:	3001      	adds	r0, #1
 8009f36:	d14c      	bne.n	8009fd2 <_printf_i+0x1fe>
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f3c:	b004      	add	sp, #16
 8009f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f42:	4835      	ldr	r0, [pc, #212]	; (800a018 <_printf_i+0x244>)
 8009f44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f48:	6829      	ldr	r1, [r5, #0]
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f50:	6029      	str	r1, [r5, #0]
 8009f52:	061d      	lsls	r5, r3, #24
 8009f54:	d514      	bpl.n	8009f80 <_printf_i+0x1ac>
 8009f56:	07df      	lsls	r7, r3, #31
 8009f58:	bf44      	itt	mi
 8009f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f5e:	6023      	strmi	r3, [r4, #0]
 8009f60:	b91e      	cbnz	r6, 8009f6a <_printf_i+0x196>
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	f023 0320 	bic.w	r3, r3, #32
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	2310      	movs	r3, #16
 8009f6c:	e7b0      	b.n	8009ed0 <_printf_i+0xfc>
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	f043 0320 	orr.w	r3, r3, #32
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	2378      	movs	r3, #120	; 0x78
 8009f78:	4828      	ldr	r0, [pc, #160]	; (800a01c <_printf_i+0x248>)
 8009f7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f7e:	e7e3      	b.n	8009f48 <_printf_i+0x174>
 8009f80:	0659      	lsls	r1, r3, #25
 8009f82:	bf48      	it	mi
 8009f84:	b2b6      	uxthmi	r6, r6
 8009f86:	e7e6      	b.n	8009f56 <_printf_i+0x182>
 8009f88:	4615      	mov	r5, r2
 8009f8a:	e7bb      	b.n	8009f04 <_printf_i+0x130>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	6826      	ldr	r6, [r4, #0]
 8009f90:	6961      	ldr	r1, [r4, #20]
 8009f92:	1d18      	adds	r0, r3, #4
 8009f94:	6028      	str	r0, [r5, #0]
 8009f96:	0635      	lsls	r5, r6, #24
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	d501      	bpl.n	8009fa0 <_printf_i+0x1cc>
 8009f9c:	6019      	str	r1, [r3, #0]
 8009f9e:	e002      	b.n	8009fa6 <_printf_i+0x1d2>
 8009fa0:	0670      	lsls	r0, r6, #25
 8009fa2:	d5fb      	bpl.n	8009f9c <_printf_i+0x1c8>
 8009fa4:	8019      	strh	r1, [r3, #0]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6123      	str	r3, [r4, #16]
 8009faa:	4615      	mov	r5, r2
 8009fac:	e7ba      	b.n	8009f24 <_printf_i+0x150>
 8009fae:	682b      	ldr	r3, [r5, #0]
 8009fb0:	1d1a      	adds	r2, r3, #4
 8009fb2:	602a      	str	r2, [r5, #0]
 8009fb4:	681d      	ldr	r5, [r3, #0]
 8009fb6:	6862      	ldr	r2, [r4, #4]
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f7f6 f938 	bl	8000230 <memchr>
 8009fc0:	b108      	cbz	r0, 8009fc6 <_printf_i+0x1f2>
 8009fc2:	1b40      	subs	r0, r0, r5
 8009fc4:	6060      	str	r0, [r4, #4]
 8009fc6:	6863      	ldr	r3, [r4, #4]
 8009fc8:	6123      	str	r3, [r4, #16]
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd0:	e7a8      	b.n	8009f24 <_printf_i+0x150>
 8009fd2:	6923      	ldr	r3, [r4, #16]
 8009fd4:	462a      	mov	r2, r5
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	4640      	mov	r0, r8
 8009fda:	47d0      	blx	sl
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d0ab      	beq.n	8009f38 <_printf_i+0x164>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	079b      	lsls	r3, r3, #30
 8009fe4:	d413      	bmi.n	800a00e <_printf_i+0x23a>
 8009fe6:	68e0      	ldr	r0, [r4, #12]
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	4298      	cmp	r0, r3
 8009fec:	bfb8      	it	lt
 8009fee:	4618      	movlt	r0, r3
 8009ff0:	e7a4      	b.n	8009f3c <_printf_i+0x168>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4632      	mov	r2, r6
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	47d0      	blx	sl
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d09b      	beq.n	8009f38 <_printf_i+0x164>
 800a000:	3501      	adds	r5, #1
 800a002:	68e3      	ldr	r3, [r4, #12]
 800a004:	9903      	ldr	r1, [sp, #12]
 800a006:	1a5b      	subs	r3, r3, r1
 800a008:	42ab      	cmp	r3, r5
 800a00a:	dcf2      	bgt.n	8009ff2 <_printf_i+0x21e>
 800a00c:	e7eb      	b.n	8009fe6 <_printf_i+0x212>
 800a00e:	2500      	movs	r5, #0
 800a010:	f104 0619 	add.w	r6, r4, #25
 800a014:	e7f5      	b.n	800a002 <_printf_i+0x22e>
 800a016:	bf00      	nop
 800a018:	0800c6aa 	.word	0x0800c6aa
 800a01c:	0800c6bb 	.word	0x0800c6bb

0800a020 <sniprintf>:
 800a020:	b40c      	push	{r2, r3}
 800a022:	b530      	push	{r4, r5, lr}
 800a024:	4b17      	ldr	r3, [pc, #92]	; (800a084 <sniprintf+0x64>)
 800a026:	1e0c      	subs	r4, r1, #0
 800a028:	681d      	ldr	r5, [r3, #0]
 800a02a:	b09d      	sub	sp, #116	; 0x74
 800a02c:	da08      	bge.n	800a040 <sniprintf+0x20>
 800a02e:	238b      	movs	r3, #139	; 0x8b
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a036:	b01d      	add	sp, #116	; 0x74
 800a038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a03c:	b002      	add	sp, #8
 800a03e:	4770      	bx	lr
 800a040:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a044:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a048:	bf14      	ite	ne
 800a04a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a04e:	4623      	moveq	r3, r4
 800a050:	9304      	str	r3, [sp, #16]
 800a052:	9307      	str	r3, [sp, #28]
 800a054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a058:	9002      	str	r0, [sp, #8]
 800a05a:	9006      	str	r0, [sp, #24]
 800a05c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a060:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a062:	ab21      	add	r3, sp, #132	; 0x84
 800a064:	a902      	add	r1, sp, #8
 800a066:	4628      	mov	r0, r5
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	f001 fb69 	bl	800b740 <_svfiprintf_r>
 800a06e:	1c43      	adds	r3, r0, #1
 800a070:	bfbc      	itt	lt
 800a072:	238b      	movlt	r3, #139	; 0x8b
 800a074:	602b      	strlt	r3, [r5, #0]
 800a076:	2c00      	cmp	r4, #0
 800a078:	d0dd      	beq.n	800a036 <sniprintf+0x16>
 800a07a:	9b02      	ldr	r3, [sp, #8]
 800a07c:	2200      	movs	r2, #0
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e7d9      	b.n	800a036 <sniprintf+0x16>
 800a082:	bf00      	nop
 800a084:	200000ec 	.word	0x200000ec

0800a088 <quorem>:
 800a088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	6903      	ldr	r3, [r0, #16]
 800a08e:	690c      	ldr	r4, [r1, #16]
 800a090:	42a3      	cmp	r3, r4
 800a092:	4607      	mov	r7, r0
 800a094:	f2c0 8081 	blt.w	800a19a <quorem+0x112>
 800a098:	3c01      	subs	r4, #1
 800a09a:	f101 0814 	add.w	r8, r1, #20
 800a09e:	f100 0514 	add.w	r5, r0, #20
 800a0a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0c0:	d331      	bcc.n	800a126 <quorem+0x9e>
 800a0c2:	f04f 0e00 	mov.w	lr, #0
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	46ac      	mov	ip, r5
 800a0ca:	46f2      	mov	sl, lr
 800a0cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0d0:	b293      	uxth	r3, r2
 800a0d2:	fb06 e303 	mla	r3, r6, r3, lr
 800a0d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	ebaa 0303 	sub.w	r3, sl, r3
 800a0e0:	f8dc a000 	ldr.w	sl, [ip]
 800a0e4:	0c12      	lsrs	r2, r2, #16
 800a0e6:	fa13 f38a 	uxtah	r3, r3, sl
 800a0ea:	fb06 e202 	mla	r2, r6, r2, lr
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	9b00      	ldr	r3, [sp, #0]
 800a0f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0f6:	b292      	uxth	r2, r2
 800a0f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a100:	f8bd 3000 	ldrh.w	r3, [sp]
 800a104:	4581      	cmp	r9, r0
 800a106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a10a:	f84c 3b04 	str.w	r3, [ip], #4
 800a10e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a112:	d2db      	bcs.n	800a0cc <quorem+0x44>
 800a114:	f855 300b 	ldr.w	r3, [r5, fp]
 800a118:	b92b      	cbnz	r3, 800a126 <quorem+0x9e>
 800a11a:	9b01      	ldr	r3, [sp, #4]
 800a11c:	3b04      	subs	r3, #4
 800a11e:	429d      	cmp	r5, r3
 800a120:	461a      	mov	r2, r3
 800a122:	d32e      	bcc.n	800a182 <quorem+0xfa>
 800a124:	613c      	str	r4, [r7, #16]
 800a126:	4638      	mov	r0, r7
 800a128:	f001 f8b6 	bl	800b298 <__mcmp>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	db24      	blt.n	800a17a <quorem+0xf2>
 800a130:	3601      	adds	r6, #1
 800a132:	4628      	mov	r0, r5
 800a134:	f04f 0c00 	mov.w	ip, #0
 800a138:	f858 2b04 	ldr.w	r2, [r8], #4
 800a13c:	f8d0 e000 	ldr.w	lr, [r0]
 800a140:	b293      	uxth	r3, r2
 800a142:	ebac 0303 	sub.w	r3, ip, r3
 800a146:	0c12      	lsrs	r2, r2, #16
 800a148:	fa13 f38e 	uxtah	r3, r3, lr
 800a14c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a154:	b29b      	uxth	r3, r3
 800a156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a15a:	45c1      	cmp	r9, r8
 800a15c:	f840 3b04 	str.w	r3, [r0], #4
 800a160:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a164:	d2e8      	bcs.n	800a138 <quorem+0xb0>
 800a166:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a16a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a16e:	b922      	cbnz	r2, 800a17a <quorem+0xf2>
 800a170:	3b04      	subs	r3, #4
 800a172:	429d      	cmp	r5, r3
 800a174:	461a      	mov	r2, r3
 800a176:	d30a      	bcc.n	800a18e <quorem+0x106>
 800a178:	613c      	str	r4, [r7, #16]
 800a17a:	4630      	mov	r0, r6
 800a17c:	b003      	add	sp, #12
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	6812      	ldr	r2, [r2, #0]
 800a184:	3b04      	subs	r3, #4
 800a186:	2a00      	cmp	r2, #0
 800a188:	d1cc      	bne.n	800a124 <quorem+0x9c>
 800a18a:	3c01      	subs	r4, #1
 800a18c:	e7c7      	b.n	800a11e <quorem+0x96>
 800a18e:	6812      	ldr	r2, [r2, #0]
 800a190:	3b04      	subs	r3, #4
 800a192:	2a00      	cmp	r2, #0
 800a194:	d1f0      	bne.n	800a178 <quorem+0xf0>
 800a196:	3c01      	subs	r4, #1
 800a198:	e7eb      	b.n	800a172 <quorem+0xea>
 800a19a:	2000      	movs	r0, #0
 800a19c:	e7ee      	b.n	800a17c <quorem+0xf4>
	...

0800a1a0 <_dtoa_r>:
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	ed2d 8b04 	vpush	{d8-d9}
 800a1a8:	ec57 6b10 	vmov	r6, r7, d0
 800a1ac:	b093      	sub	sp, #76	; 0x4c
 800a1ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1b4:	9106      	str	r1, [sp, #24]
 800a1b6:	ee10 aa10 	vmov	sl, s0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1be:	930c      	str	r3, [sp, #48]	; 0x30
 800a1c0:	46bb      	mov	fp, r7
 800a1c2:	b975      	cbnz	r5, 800a1e2 <_dtoa_r+0x42>
 800a1c4:	2010      	movs	r0, #16
 800a1c6:	f000 fddd 	bl	800ad84 <malloc>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	6260      	str	r0, [r4, #36]	; 0x24
 800a1ce:	b920      	cbnz	r0, 800a1da <_dtoa_r+0x3a>
 800a1d0:	4ba7      	ldr	r3, [pc, #668]	; (800a470 <_dtoa_r+0x2d0>)
 800a1d2:	21ea      	movs	r1, #234	; 0xea
 800a1d4:	48a7      	ldr	r0, [pc, #668]	; (800a474 <_dtoa_r+0x2d4>)
 800a1d6:	f001 fbc3 	bl	800b960 <__assert_func>
 800a1da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1de:	6005      	str	r5, [r0, #0]
 800a1e0:	60c5      	str	r5, [r0, #12]
 800a1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e4:	6819      	ldr	r1, [r3, #0]
 800a1e6:	b151      	cbz	r1, 800a1fe <_dtoa_r+0x5e>
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	604a      	str	r2, [r1, #4]
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	4093      	lsls	r3, r2
 800a1f0:	608b      	str	r3, [r1, #8]
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f000 fe0e 	bl	800ae14 <_Bfree>
 800a1f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	1e3b      	subs	r3, r7, #0
 800a200:	bfaa      	itet	ge
 800a202:	2300      	movge	r3, #0
 800a204:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a208:	f8c8 3000 	strge.w	r3, [r8]
 800a20c:	4b9a      	ldr	r3, [pc, #616]	; (800a478 <_dtoa_r+0x2d8>)
 800a20e:	bfbc      	itt	lt
 800a210:	2201      	movlt	r2, #1
 800a212:	f8c8 2000 	strlt.w	r2, [r8]
 800a216:	ea33 030b 	bics.w	r3, r3, fp
 800a21a:	d11b      	bne.n	800a254 <_dtoa_r+0xb4>
 800a21c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a21e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a222:	6013      	str	r3, [r2, #0]
 800a224:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a228:	4333      	orrs	r3, r6
 800a22a:	f000 8592 	beq.w	800ad52 <_dtoa_r+0xbb2>
 800a22e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a230:	b963      	cbnz	r3, 800a24c <_dtoa_r+0xac>
 800a232:	4b92      	ldr	r3, [pc, #584]	; (800a47c <_dtoa_r+0x2dc>)
 800a234:	e022      	b.n	800a27c <_dtoa_r+0xdc>
 800a236:	4b92      	ldr	r3, [pc, #584]	; (800a480 <_dtoa_r+0x2e0>)
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	3308      	adds	r3, #8
 800a23c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	9801      	ldr	r0, [sp, #4]
 800a242:	b013      	add	sp, #76	; 0x4c
 800a244:	ecbd 8b04 	vpop	{d8-d9}
 800a248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24c:	4b8b      	ldr	r3, [pc, #556]	; (800a47c <_dtoa_r+0x2dc>)
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	3303      	adds	r3, #3
 800a252:	e7f3      	b.n	800a23c <_dtoa_r+0x9c>
 800a254:	2200      	movs	r2, #0
 800a256:	2300      	movs	r3, #0
 800a258:	4650      	mov	r0, sl
 800a25a:	4659      	mov	r1, fp
 800a25c:	f7f6 fc5c 	bl	8000b18 <__aeabi_dcmpeq>
 800a260:	ec4b ab19 	vmov	d9, sl, fp
 800a264:	4680      	mov	r8, r0
 800a266:	b158      	cbz	r0, 800a280 <_dtoa_r+0xe0>
 800a268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a26a:	2301      	movs	r3, #1
 800a26c:	6013      	str	r3, [r2, #0]
 800a26e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 856b 	beq.w	800ad4c <_dtoa_r+0xbac>
 800a276:	4883      	ldr	r0, [pc, #524]	; (800a484 <_dtoa_r+0x2e4>)
 800a278:	6018      	str	r0, [r3, #0]
 800a27a:	1e43      	subs	r3, r0, #1
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	e7df      	b.n	800a240 <_dtoa_r+0xa0>
 800a280:	ec4b ab10 	vmov	d0, sl, fp
 800a284:	aa10      	add	r2, sp, #64	; 0x40
 800a286:	a911      	add	r1, sp, #68	; 0x44
 800a288:	4620      	mov	r0, r4
 800a28a:	f001 f8ab 	bl	800b3e4 <__d2b>
 800a28e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a292:	ee08 0a10 	vmov	s16, r0
 800a296:	2d00      	cmp	r5, #0
 800a298:	f000 8084 	beq.w	800a3a4 <_dtoa_r+0x204>
 800a29c:	ee19 3a90 	vmov	r3, s19
 800a2a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a2a8:	4656      	mov	r6, sl
 800a2aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a2ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a2b6:	4b74      	ldr	r3, [pc, #464]	; (800a488 <_dtoa_r+0x2e8>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f6 f80b 	bl	80002d8 <__aeabi_dsub>
 800a2c2:	a365      	add	r3, pc, #404	; (adr r3, 800a458 <_dtoa_r+0x2b8>)
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f7f6 f9be 	bl	8000648 <__aeabi_dmul>
 800a2cc:	a364      	add	r3, pc, #400	; (adr r3, 800a460 <_dtoa_r+0x2c0>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f7f6 f803 	bl	80002dc <__adddf3>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	4628      	mov	r0, r5
 800a2da:	460f      	mov	r7, r1
 800a2dc:	f7f6 f94a 	bl	8000574 <__aeabi_i2d>
 800a2e0:	a361      	add	r3, pc, #388	; (adr r3, 800a468 <_dtoa_r+0x2c8>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f7f6 f9af 	bl	8000648 <__aeabi_dmul>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	4639      	mov	r1, r7
 800a2f2:	f7f5 fff3 	bl	80002dc <__adddf3>
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	460f      	mov	r7, r1
 800a2fa:	f7f6 fc55 	bl	8000ba8 <__aeabi_d2iz>
 800a2fe:	2200      	movs	r2, #0
 800a300:	9000      	str	r0, [sp, #0]
 800a302:	2300      	movs	r3, #0
 800a304:	4630      	mov	r0, r6
 800a306:	4639      	mov	r1, r7
 800a308:	f7f6 fc10 	bl	8000b2c <__aeabi_dcmplt>
 800a30c:	b150      	cbz	r0, 800a324 <_dtoa_r+0x184>
 800a30e:	9800      	ldr	r0, [sp, #0]
 800a310:	f7f6 f930 	bl	8000574 <__aeabi_i2d>
 800a314:	4632      	mov	r2, r6
 800a316:	463b      	mov	r3, r7
 800a318:	f7f6 fbfe 	bl	8000b18 <__aeabi_dcmpeq>
 800a31c:	b910      	cbnz	r0, 800a324 <_dtoa_r+0x184>
 800a31e:	9b00      	ldr	r3, [sp, #0]
 800a320:	3b01      	subs	r3, #1
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	9b00      	ldr	r3, [sp, #0]
 800a326:	2b16      	cmp	r3, #22
 800a328:	d85a      	bhi.n	800a3e0 <_dtoa_r+0x240>
 800a32a:	9a00      	ldr	r2, [sp, #0]
 800a32c:	4b57      	ldr	r3, [pc, #348]	; (800a48c <_dtoa_r+0x2ec>)
 800a32e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	ec51 0b19 	vmov	r0, r1, d9
 800a33a:	f7f6 fbf7 	bl	8000b2c <__aeabi_dcmplt>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d050      	beq.n	800a3e4 <_dtoa_r+0x244>
 800a342:	9b00      	ldr	r3, [sp, #0]
 800a344:	3b01      	subs	r3, #1
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	2300      	movs	r3, #0
 800a34a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a34c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a34e:	1b5d      	subs	r5, r3, r5
 800a350:	1e6b      	subs	r3, r5, #1
 800a352:	9305      	str	r3, [sp, #20]
 800a354:	bf45      	ittet	mi
 800a356:	f1c5 0301 	rsbmi	r3, r5, #1
 800a35a:	9304      	strmi	r3, [sp, #16]
 800a35c:	2300      	movpl	r3, #0
 800a35e:	2300      	movmi	r3, #0
 800a360:	bf4c      	ite	mi
 800a362:	9305      	strmi	r3, [sp, #20]
 800a364:	9304      	strpl	r3, [sp, #16]
 800a366:	9b00      	ldr	r3, [sp, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	db3d      	blt.n	800a3e8 <_dtoa_r+0x248>
 800a36c:	9b05      	ldr	r3, [sp, #20]
 800a36e:	9a00      	ldr	r2, [sp, #0]
 800a370:	920a      	str	r2, [sp, #40]	; 0x28
 800a372:	4413      	add	r3, r2
 800a374:	9305      	str	r3, [sp, #20]
 800a376:	2300      	movs	r3, #0
 800a378:	9307      	str	r3, [sp, #28]
 800a37a:	9b06      	ldr	r3, [sp, #24]
 800a37c:	2b09      	cmp	r3, #9
 800a37e:	f200 8089 	bhi.w	800a494 <_dtoa_r+0x2f4>
 800a382:	2b05      	cmp	r3, #5
 800a384:	bfc4      	itt	gt
 800a386:	3b04      	subgt	r3, #4
 800a388:	9306      	strgt	r3, [sp, #24]
 800a38a:	9b06      	ldr	r3, [sp, #24]
 800a38c:	f1a3 0302 	sub.w	r3, r3, #2
 800a390:	bfcc      	ite	gt
 800a392:	2500      	movgt	r5, #0
 800a394:	2501      	movle	r5, #1
 800a396:	2b03      	cmp	r3, #3
 800a398:	f200 8087 	bhi.w	800a4aa <_dtoa_r+0x30a>
 800a39c:	e8df f003 	tbb	[pc, r3]
 800a3a0:	59383a2d 	.word	0x59383a2d
 800a3a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a3a8:	441d      	add	r5, r3
 800a3aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a3ae:	2b20      	cmp	r3, #32
 800a3b0:	bfc1      	itttt	gt
 800a3b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a3ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800a3be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a3c2:	bfda      	itte	le
 800a3c4:	f1c3 0320 	rsble	r3, r3, #32
 800a3c8:	fa06 f003 	lslle.w	r0, r6, r3
 800a3cc:	4318      	orrgt	r0, r3
 800a3ce:	f7f6 f8c1 	bl	8000554 <__aeabi_ui2d>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a3da:	3d01      	subs	r5, #1
 800a3dc:	930e      	str	r3, [sp, #56]	; 0x38
 800a3de:	e76a      	b.n	800a2b6 <_dtoa_r+0x116>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e7b2      	b.n	800a34a <_dtoa_r+0x1aa>
 800a3e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3e6:	e7b1      	b.n	800a34c <_dtoa_r+0x1ac>
 800a3e8:	9b04      	ldr	r3, [sp, #16]
 800a3ea:	9a00      	ldr	r2, [sp, #0]
 800a3ec:	1a9b      	subs	r3, r3, r2
 800a3ee:	9304      	str	r3, [sp, #16]
 800a3f0:	4253      	negs	r3, r2
 800a3f2:	9307      	str	r3, [sp, #28]
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a3f8:	e7bf      	b.n	800a37a <_dtoa_r+0x1da>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9308      	str	r3, [sp, #32]
 800a3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a400:	2b00      	cmp	r3, #0
 800a402:	dc55      	bgt.n	800a4b0 <_dtoa_r+0x310>
 800a404:	2301      	movs	r3, #1
 800a406:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a40a:	461a      	mov	r2, r3
 800a40c:	9209      	str	r2, [sp, #36]	; 0x24
 800a40e:	e00c      	b.n	800a42a <_dtoa_r+0x28a>
 800a410:	2301      	movs	r3, #1
 800a412:	e7f3      	b.n	800a3fc <_dtoa_r+0x25c>
 800a414:	2300      	movs	r3, #0
 800a416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a418:	9308      	str	r3, [sp, #32]
 800a41a:	9b00      	ldr	r3, [sp, #0]
 800a41c:	4413      	add	r3, r2
 800a41e:	9302      	str	r3, [sp, #8]
 800a420:	3301      	adds	r3, #1
 800a422:	2b01      	cmp	r3, #1
 800a424:	9303      	str	r3, [sp, #12]
 800a426:	bfb8      	it	lt
 800a428:	2301      	movlt	r3, #1
 800a42a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a42c:	2200      	movs	r2, #0
 800a42e:	6042      	str	r2, [r0, #4]
 800a430:	2204      	movs	r2, #4
 800a432:	f102 0614 	add.w	r6, r2, #20
 800a436:	429e      	cmp	r6, r3
 800a438:	6841      	ldr	r1, [r0, #4]
 800a43a:	d93d      	bls.n	800a4b8 <_dtoa_r+0x318>
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 fca9 	bl	800ad94 <_Balloc>
 800a442:	9001      	str	r0, [sp, #4]
 800a444:	2800      	cmp	r0, #0
 800a446:	d13b      	bne.n	800a4c0 <_dtoa_r+0x320>
 800a448:	4b11      	ldr	r3, [pc, #68]	; (800a490 <_dtoa_r+0x2f0>)
 800a44a:	4602      	mov	r2, r0
 800a44c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a450:	e6c0      	b.n	800a1d4 <_dtoa_r+0x34>
 800a452:	2301      	movs	r3, #1
 800a454:	e7df      	b.n	800a416 <_dtoa_r+0x276>
 800a456:	bf00      	nop
 800a458:	636f4361 	.word	0x636f4361
 800a45c:	3fd287a7 	.word	0x3fd287a7
 800a460:	8b60c8b3 	.word	0x8b60c8b3
 800a464:	3fc68a28 	.word	0x3fc68a28
 800a468:	509f79fb 	.word	0x509f79fb
 800a46c:	3fd34413 	.word	0x3fd34413
 800a470:	0800c6d9 	.word	0x0800c6d9
 800a474:	0800c6f0 	.word	0x0800c6f0
 800a478:	7ff00000 	.word	0x7ff00000
 800a47c:	0800c6d5 	.word	0x0800c6d5
 800a480:	0800c6cc 	.word	0x0800c6cc
 800a484:	0800c6a9 	.word	0x0800c6a9
 800a488:	3ff80000 	.word	0x3ff80000
 800a48c:	0800c7e0 	.word	0x0800c7e0
 800a490:	0800c74b 	.word	0x0800c74b
 800a494:	2501      	movs	r5, #1
 800a496:	2300      	movs	r3, #0
 800a498:	9306      	str	r3, [sp, #24]
 800a49a:	9508      	str	r5, [sp, #32]
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2312      	movs	r3, #18
 800a4a8:	e7b0      	b.n	800a40c <_dtoa_r+0x26c>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	9308      	str	r3, [sp, #32]
 800a4ae:	e7f5      	b.n	800a49c <_dtoa_r+0x2fc>
 800a4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4b6:	e7b8      	b.n	800a42a <_dtoa_r+0x28a>
 800a4b8:	3101      	adds	r1, #1
 800a4ba:	6041      	str	r1, [r0, #4]
 800a4bc:	0052      	lsls	r2, r2, #1
 800a4be:	e7b8      	b.n	800a432 <_dtoa_r+0x292>
 800a4c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4c2:	9a01      	ldr	r2, [sp, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	2b0e      	cmp	r3, #14
 800a4ca:	f200 809d 	bhi.w	800a608 <_dtoa_r+0x468>
 800a4ce:	2d00      	cmp	r5, #0
 800a4d0:	f000 809a 	beq.w	800a608 <_dtoa_r+0x468>
 800a4d4:	9b00      	ldr	r3, [sp, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	dd32      	ble.n	800a540 <_dtoa_r+0x3a0>
 800a4da:	4ab7      	ldr	r2, [pc, #732]	; (800a7b8 <_dtoa_r+0x618>)
 800a4dc:	f003 030f 	and.w	r3, r3, #15
 800a4e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4e8:	9b00      	ldr	r3, [sp, #0]
 800a4ea:	05d8      	lsls	r0, r3, #23
 800a4ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a4f0:	d516      	bpl.n	800a520 <_dtoa_r+0x380>
 800a4f2:	4bb2      	ldr	r3, [pc, #712]	; (800a7bc <_dtoa_r+0x61c>)
 800a4f4:	ec51 0b19 	vmov	r0, r1, d9
 800a4f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4fc:	f7f6 f9ce 	bl	800089c <__aeabi_ddiv>
 800a500:	f007 070f 	and.w	r7, r7, #15
 800a504:	4682      	mov	sl, r0
 800a506:	468b      	mov	fp, r1
 800a508:	2503      	movs	r5, #3
 800a50a:	4eac      	ldr	r6, [pc, #688]	; (800a7bc <_dtoa_r+0x61c>)
 800a50c:	b957      	cbnz	r7, 800a524 <_dtoa_r+0x384>
 800a50e:	4642      	mov	r2, r8
 800a510:	464b      	mov	r3, r9
 800a512:	4650      	mov	r0, sl
 800a514:	4659      	mov	r1, fp
 800a516:	f7f6 f9c1 	bl	800089c <__aeabi_ddiv>
 800a51a:	4682      	mov	sl, r0
 800a51c:	468b      	mov	fp, r1
 800a51e:	e028      	b.n	800a572 <_dtoa_r+0x3d2>
 800a520:	2502      	movs	r5, #2
 800a522:	e7f2      	b.n	800a50a <_dtoa_r+0x36a>
 800a524:	07f9      	lsls	r1, r7, #31
 800a526:	d508      	bpl.n	800a53a <_dtoa_r+0x39a>
 800a528:	4640      	mov	r0, r8
 800a52a:	4649      	mov	r1, r9
 800a52c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a530:	f7f6 f88a 	bl	8000648 <__aeabi_dmul>
 800a534:	3501      	adds	r5, #1
 800a536:	4680      	mov	r8, r0
 800a538:	4689      	mov	r9, r1
 800a53a:	107f      	asrs	r7, r7, #1
 800a53c:	3608      	adds	r6, #8
 800a53e:	e7e5      	b.n	800a50c <_dtoa_r+0x36c>
 800a540:	f000 809b 	beq.w	800a67a <_dtoa_r+0x4da>
 800a544:	9b00      	ldr	r3, [sp, #0]
 800a546:	4f9d      	ldr	r7, [pc, #628]	; (800a7bc <_dtoa_r+0x61c>)
 800a548:	425e      	negs	r6, r3
 800a54a:	4b9b      	ldr	r3, [pc, #620]	; (800a7b8 <_dtoa_r+0x618>)
 800a54c:	f006 020f 	and.w	r2, r6, #15
 800a550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	ec51 0b19 	vmov	r0, r1, d9
 800a55c:	f7f6 f874 	bl	8000648 <__aeabi_dmul>
 800a560:	1136      	asrs	r6, r6, #4
 800a562:	4682      	mov	sl, r0
 800a564:	468b      	mov	fp, r1
 800a566:	2300      	movs	r3, #0
 800a568:	2502      	movs	r5, #2
 800a56a:	2e00      	cmp	r6, #0
 800a56c:	d17a      	bne.n	800a664 <_dtoa_r+0x4c4>
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1d3      	bne.n	800a51a <_dtoa_r+0x37a>
 800a572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 8082 	beq.w	800a67e <_dtoa_r+0x4de>
 800a57a:	4b91      	ldr	r3, [pc, #580]	; (800a7c0 <_dtoa_r+0x620>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	4650      	mov	r0, sl
 800a580:	4659      	mov	r1, fp
 800a582:	f7f6 fad3 	bl	8000b2c <__aeabi_dcmplt>
 800a586:	2800      	cmp	r0, #0
 800a588:	d079      	beq.n	800a67e <_dtoa_r+0x4de>
 800a58a:	9b03      	ldr	r3, [sp, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d076      	beq.n	800a67e <_dtoa_r+0x4de>
 800a590:	9b02      	ldr	r3, [sp, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	dd36      	ble.n	800a604 <_dtoa_r+0x464>
 800a596:	9b00      	ldr	r3, [sp, #0]
 800a598:	4650      	mov	r0, sl
 800a59a:	4659      	mov	r1, fp
 800a59c:	1e5f      	subs	r7, r3, #1
 800a59e:	2200      	movs	r2, #0
 800a5a0:	4b88      	ldr	r3, [pc, #544]	; (800a7c4 <_dtoa_r+0x624>)
 800a5a2:	f7f6 f851 	bl	8000648 <__aeabi_dmul>
 800a5a6:	9e02      	ldr	r6, [sp, #8]
 800a5a8:	4682      	mov	sl, r0
 800a5aa:	468b      	mov	fp, r1
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f7f5 ffe0 	bl	8000574 <__aeabi_i2d>
 800a5b4:	4652      	mov	r2, sl
 800a5b6:	465b      	mov	r3, fp
 800a5b8:	f7f6 f846 	bl	8000648 <__aeabi_dmul>
 800a5bc:	4b82      	ldr	r3, [pc, #520]	; (800a7c8 <_dtoa_r+0x628>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f7f5 fe8c 	bl	80002dc <__adddf3>
 800a5c4:	46d0      	mov	r8, sl
 800a5c6:	46d9      	mov	r9, fp
 800a5c8:	4682      	mov	sl, r0
 800a5ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a5ce:	2e00      	cmp	r6, #0
 800a5d0:	d158      	bne.n	800a684 <_dtoa_r+0x4e4>
 800a5d2:	4b7e      	ldr	r3, [pc, #504]	; (800a7cc <_dtoa_r+0x62c>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	4640      	mov	r0, r8
 800a5d8:	4649      	mov	r1, r9
 800a5da:	f7f5 fe7d 	bl	80002d8 <__aeabi_dsub>
 800a5de:	4652      	mov	r2, sl
 800a5e0:	465b      	mov	r3, fp
 800a5e2:	4680      	mov	r8, r0
 800a5e4:	4689      	mov	r9, r1
 800a5e6:	f7f6 fabf 	bl	8000b68 <__aeabi_dcmpgt>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	f040 8295 	bne.w	800ab1a <_dtoa_r+0x97a>
 800a5f0:	4652      	mov	r2, sl
 800a5f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	4649      	mov	r1, r9
 800a5fa:	f7f6 fa97 	bl	8000b2c <__aeabi_dcmplt>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f040 8289 	bne.w	800ab16 <_dtoa_r+0x976>
 800a604:	ec5b ab19 	vmov	sl, fp, d9
 800a608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f2c0 8148 	blt.w	800a8a0 <_dtoa_r+0x700>
 800a610:	9a00      	ldr	r2, [sp, #0]
 800a612:	2a0e      	cmp	r2, #14
 800a614:	f300 8144 	bgt.w	800a8a0 <_dtoa_r+0x700>
 800a618:	4b67      	ldr	r3, [pc, #412]	; (800a7b8 <_dtoa_r+0x618>)
 800a61a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a61e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a624:	2b00      	cmp	r3, #0
 800a626:	f280 80d5 	bge.w	800a7d4 <_dtoa_r+0x634>
 800a62a:	9b03      	ldr	r3, [sp, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f300 80d1 	bgt.w	800a7d4 <_dtoa_r+0x634>
 800a632:	f040 826f 	bne.w	800ab14 <_dtoa_r+0x974>
 800a636:	4b65      	ldr	r3, [pc, #404]	; (800a7cc <_dtoa_r+0x62c>)
 800a638:	2200      	movs	r2, #0
 800a63a:	4640      	mov	r0, r8
 800a63c:	4649      	mov	r1, r9
 800a63e:	f7f6 f803 	bl	8000648 <__aeabi_dmul>
 800a642:	4652      	mov	r2, sl
 800a644:	465b      	mov	r3, fp
 800a646:	f7f6 fa85 	bl	8000b54 <__aeabi_dcmpge>
 800a64a:	9e03      	ldr	r6, [sp, #12]
 800a64c:	4637      	mov	r7, r6
 800a64e:	2800      	cmp	r0, #0
 800a650:	f040 8245 	bne.w	800aade <_dtoa_r+0x93e>
 800a654:	9d01      	ldr	r5, [sp, #4]
 800a656:	2331      	movs	r3, #49	; 0x31
 800a658:	f805 3b01 	strb.w	r3, [r5], #1
 800a65c:	9b00      	ldr	r3, [sp, #0]
 800a65e:	3301      	adds	r3, #1
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	e240      	b.n	800aae6 <_dtoa_r+0x946>
 800a664:	07f2      	lsls	r2, r6, #31
 800a666:	d505      	bpl.n	800a674 <_dtoa_r+0x4d4>
 800a668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a66c:	f7f5 ffec 	bl	8000648 <__aeabi_dmul>
 800a670:	3501      	adds	r5, #1
 800a672:	2301      	movs	r3, #1
 800a674:	1076      	asrs	r6, r6, #1
 800a676:	3708      	adds	r7, #8
 800a678:	e777      	b.n	800a56a <_dtoa_r+0x3ca>
 800a67a:	2502      	movs	r5, #2
 800a67c:	e779      	b.n	800a572 <_dtoa_r+0x3d2>
 800a67e:	9f00      	ldr	r7, [sp, #0]
 800a680:	9e03      	ldr	r6, [sp, #12]
 800a682:	e794      	b.n	800a5ae <_dtoa_r+0x40e>
 800a684:	9901      	ldr	r1, [sp, #4]
 800a686:	4b4c      	ldr	r3, [pc, #304]	; (800a7b8 <_dtoa_r+0x618>)
 800a688:	4431      	add	r1, r6
 800a68a:	910d      	str	r1, [sp, #52]	; 0x34
 800a68c:	9908      	ldr	r1, [sp, #32]
 800a68e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a692:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a696:	2900      	cmp	r1, #0
 800a698:	d043      	beq.n	800a722 <_dtoa_r+0x582>
 800a69a:	494d      	ldr	r1, [pc, #308]	; (800a7d0 <_dtoa_r+0x630>)
 800a69c:	2000      	movs	r0, #0
 800a69e:	f7f6 f8fd 	bl	800089c <__aeabi_ddiv>
 800a6a2:	4652      	mov	r2, sl
 800a6a4:	465b      	mov	r3, fp
 800a6a6:	f7f5 fe17 	bl	80002d8 <__aeabi_dsub>
 800a6aa:	9d01      	ldr	r5, [sp, #4]
 800a6ac:	4682      	mov	sl, r0
 800a6ae:	468b      	mov	fp, r1
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	f7f6 fa78 	bl	8000ba8 <__aeabi_d2iz>
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	f7f5 ff5b 	bl	8000574 <__aeabi_i2d>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	4649      	mov	r1, r9
 800a6c6:	f7f5 fe07 	bl	80002d8 <__aeabi_dsub>
 800a6ca:	3630      	adds	r6, #48	; 0x30
 800a6cc:	f805 6b01 	strb.w	r6, [r5], #1
 800a6d0:	4652      	mov	r2, sl
 800a6d2:	465b      	mov	r3, fp
 800a6d4:	4680      	mov	r8, r0
 800a6d6:	4689      	mov	r9, r1
 800a6d8:	f7f6 fa28 	bl	8000b2c <__aeabi_dcmplt>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d163      	bne.n	800a7a8 <_dtoa_r+0x608>
 800a6e0:	4642      	mov	r2, r8
 800a6e2:	464b      	mov	r3, r9
 800a6e4:	4936      	ldr	r1, [pc, #216]	; (800a7c0 <_dtoa_r+0x620>)
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	f7f5 fdf6 	bl	80002d8 <__aeabi_dsub>
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	465b      	mov	r3, fp
 800a6f0:	f7f6 fa1c 	bl	8000b2c <__aeabi_dcmplt>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	f040 80b5 	bne.w	800a864 <_dtoa_r+0x6c4>
 800a6fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6fc:	429d      	cmp	r5, r3
 800a6fe:	d081      	beq.n	800a604 <_dtoa_r+0x464>
 800a700:	4b30      	ldr	r3, [pc, #192]	; (800a7c4 <_dtoa_r+0x624>)
 800a702:	2200      	movs	r2, #0
 800a704:	4650      	mov	r0, sl
 800a706:	4659      	mov	r1, fp
 800a708:	f7f5 ff9e 	bl	8000648 <__aeabi_dmul>
 800a70c:	4b2d      	ldr	r3, [pc, #180]	; (800a7c4 <_dtoa_r+0x624>)
 800a70e:	4682      	mov	sl, r0
 800a710:	468b      	mov	fp, r1
 800a712:	4640      	mov	r0, r8
 800a714:	4649      	mov	r1, r9
 800a716:	2200      	movs	r2, #0
 800a718:	f7f5 ff96 	bl	8000648 <__aeabi_dmul>
 800a71c:	4680      	mov	r8, r0
 800a71e:	4689      	mov	r9, r1
 800a720:	e7c6      	b.n	800a6b0 <_dtoa_r+0x510>
 800a722:	4650      	mov	r0, sl
 800a724:	4659      	mov	r1, fp
 800a726:	f7f5 ff8f 	bl	8000648 <__aeabi_dmul>
 800a72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a72c:	9d01      	ldr	r5, [sp, #4]
 800a72e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a730:	4682      	mov	sl, r0
 800a732:	468b      	mov	fp, r1
 800a734:	4649      	mov	r1, r9
 800a736:	4640      	mov	r0, r8
 800a738:	f7f6 fa36 	bl	8000ba8 <__aeabi_d2iz>
 800a73c:	4606      	mov	r6, r0
 800a73e:	f7f5 ff19 	bl	8000574 <__aeabi_i2d>
 800a742:	3630      	adds	r6, #48	; 0x30
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4640      	mov	r0, r8
 800a74a:	4649      	mov	r1, r9
 800a74c:	f7f5 fdc4 	bl	80002d8 <__aeabi_dsub>
 800a750:	f805 6b01 	strb.w	r6, [r5], #1
 800a754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a756:	429d      	cmp	r5, r3
 800a758:	4680      	mov	r8, r0
 800a75a:	4689      	mov	r9, r1
 800a75c:	f04f 0200 	mov.w	r2, #0
 800a760:	d124      	bne.n	800a7ac <_dtoa_r+0x60c>
 800a762:	4b1b      	ldr	r3, [pc, #108]	; (800a7d0 <_dtoa_r+0x630>)
 800a764:	4650      	mov	r0, sl
 800a766:	4659      	mov	r1, fp
 800a768:	f7f5 fdb8 	bl	80002dc <__adddf3>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	4640      	mov	r0, r8
 800a772:	4649      	mov	r1, r9
 800a774:	f7f6 f9f8 	bl	8000b68 <__aeabi_dcmpgt>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d173      	bne.n	800a864 <_dtoa_r+0x6c4>
 800a77c:	4652      	mov	r2, sl
 800a77e:	465b      	mov	r3, fp
 800a780:	4913      	ldr	r1, [pc, #76]	; (800a7d0 <_dtoa_r+0x630>)
 800a782:	2000      	movs	r0, #0
 800a784:	f7f5 fda8 	bl	80002d8 <__aeabi_dsub>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4640      	mov	r0, r8
 800a78e:	4649      	mov	r1, r9
 800a790:	f7f6 f9cc 	bl	8000b2c <__aeabi_dcmplt>
 800a794:	2800      	cmp	r0, #0
 800a796:	f43f af35 	beq.w	800a604 <_dtoa_r+0x464>
 800a79a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a79c:	1e6b      	subs	r3, r5, #1
 800a79e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7a4:	2b30      	cmp	r3, #48	; 0x30
 800a7a6:	d0f8      	beq.n	800a79a <_dtoa_r+0x5fa>
 800a7a8:	9700      	str	r7, [sp, #0]
 800a7aa:	e049      	b.n	800a840 <_dtoa_r+0x6a0>
 800a7ac:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <_dtoa_r+0x624>)
 800a7ae:	f7f5 ff4b 	bl	8000648 <__aeabi_dmul>
 800a7b2:	4680      	mov	r8, r0
 800a7b4:	4689      	mov	r9, r1
 800a7b6:	e7bd      	b.n	800a734 <_dtoa_r+0x594>
 800a7b8:	0800c7e0 	.word	0x0800c7e0
 800a7bc:	0800c7b8 	.word	0x0800c7b8
 800a7c0:	3ff00000 	.word	0x3ff00000
 800a7c4:	40240000 	.word	0x40240000
 800a7c8:	401c0000 	.word	0x401c0000
 800a7cc:	40140000 	.word	0x40140000
 800a7d0:	3fe00000 	.word	0x3fe00000
 800a7d4:	9d01      	ldr	r5, [sp, #4]
 800a7d6:	4656      	mov	r6, sl
 800a7d8:	465f      	mov	r7, fp
 800a7da:	4642      	mov	r2, r8
 800a7dc:	464b      	mov	r3, r9
 800a7de:	4630      	mov	r0, r6
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	f7f6 f85b 	bl	800089c <__aeabi_ddiv>
 800a7e6:	f7f6 f9df 	bl	8000ba8 <__aeabi_d2iz>
 800a7ea:	4682      	mov	sl, r0
 800a7ec:	f7f5 fec2 	bl	8000574 <__aeabi_i2d>
 800a7f0:	4642      	mov	r2, r8
 800a7f2:	464b      	mov	r3, r9
 800a7f4:	f7f5 ff28 	bl	8000648 <__aeabi_dmul>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a804:	f7f5 fd68 	bl	80002d8 <__aeabi_dsub>
 800a808:	f805 6b01 	strb.w	r6, [r5], #1
 800a80c:	9e01      	ldr	r6, [sp, #4]
 800a80e:	9f03      	ldr	r7, [sp, #12]
 800a810:	1bae      	subs	r6, r5, r6
 800a812:	42b7      	cmp	r7, r6
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	d135      	bne.n	800a886 <_dtoa_r+0x6e6>
 800a81a:	f7f5 fd5f 	bl	80002dc <__adddf3>
 800a81e:	4642      	mov	r2, r8
 800a820:	464b      	mov	r3, r9
 800a822:	4606      	mov	r6, r0
 800a824:	460f      	mov	r7, r1
 800a826:	f7f6 f99f 	bl	8000b68 <__aeabi_dcmpgt>
 800a82a:	b9d0      	cbnz	r0, 800a862 <_dtoa_r+0x6c2>
 800a82c:	4642      	mov	r2, r8
 800a82e:	464b      	mov	r3, r9
 800a830:	4630      	mov	r0, r6
 800a832:	4639      	mov	r1, r7
 800a834:	f7f6 f970 	bl	8000b18 <__aeabi_dcmpeq>
 800a838:	b110      	cbz	r0, 800a840 <_dtoa_r+0x6a0>
 800a83a:	f01a 0f01 	tst.w	sl, #1
 800a83e:	d110      	bne.n	800a862 <_dtoa_r+0x6c2>
 800a840:	4620      	mov	r0, r4
 800a842:	ee18 1a10 	vmov	r1, s16
 800a846:	f000 fae5 	bl	800ae14 <_Bfree>
 800a84a:	2300      	movs	r3, #0
 800a84c:	9800      	ldr	r0, [sp, #0]
 800a84e:	702b      	strb	r3, [r5, #0]
 800a850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a852:	3001      	adds	r0, #1
 800a854:	6018      	str	r0, [r3, #0]
 800a856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f43f acf1 	beq.w	800a240 <_dtoa_r+0xa0>
 800a85e:	601d      	str	r5, [r3, #0]
 800a860:	e4ee      	b.n	800a240 <_dtoa_r+0xa0>
 800a862:	9f00      	ldr	r7, [sp, #0]
 800a864:	462b      	mov	r3, r5
 800a866:	461d      	mov	r5, r3
 800a868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a86c:	2a39      	cmp	r2, #57	; 0x39
 800a86e:	d106      	bne.n	800a87e <_dtoa_r+0x6de>
 800a870:	9a01      	ldr	r2, [sp, #4]
 800a872:	429a      	cmp	r2, r3
 800a874:	d1f7      	bne.n	800a866 <_dtoa_r+0x6c6>
 800a876:	9901      	ldr	r1, [sp, #4]
 800a878:	2230      	movs	r2, #48	; 0x30
 800a87a:	3701      	adds	r7, #1
 800a87c:	700a      	strb	r2, [r1, #0]
 800a87e:	781a      	ldrb	r2, [r3, #0]
 800a880:	3201      	adds	r2, #1
 800a882:	701a      	strb	r2, [r3, #0]
 800a884:	e790      	b.n	800a7a8 <_dtoa_r+0x608>
 800a886:	4ba6      	ldr	r3, [pc, #664]	; (800ab20 <_dtoa_r+0x980>)
 800a888:	2200      	movs	r2, #0
 800a88a:	f7f5 fedd 	bl	8000648 <__aeabi_dmul>
 800a88e:	2200      	movs	r2, #0
 800a890:	2300      	movs	r3, #0
 800a892:	4606      	mov	r6, r0
 800a894:	460f      	mov	r7, r1
 800a896:	f7f6 f93f 	bl	8000b18 <__aeabi_dcmpeq>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d09d      	beq.n	800a7da <_dtoa_r+0x63a>
 800a89e:	e7cf      	b.n	800a840 <_dtoa_r+0x6a0>
 800a8a0:	9a08      	ldr	r2, [sp, #32]
 800a8a2:	2a00      	cmp	r2, #0
 800a8a4:	f000 80d7 	beq.w	800aa56 <_dtoa_r+0x8b6>
 800a8a8:	9a06      	ldr	r2, [sp, #24]
 800a8aa:	2a01      	cmp	r2, #1
 800a8ac:	f300 80ba 	bgt.w	800aa24 <_dtoa_r+0x884>
 800a8b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8b2:	2a00      	cmp	r2, #0
 800a8b4:	f000 80b2 	beq.w	800aa1c <_dtoa_r+0x87c>
 800a8b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8bc:	9e07      	ldr	r6, [sp, #28]
 800a8be:	9d04      	ldr	r5, [sp, #16]
 800a8c0:	9a04      	ldr	r2, [sp, #16]
 800a8c2:	441a      	add	r2, r3
 800a8c4:	9204      	str	r2, [sp, #16]
 800a8c6:	9a05      	ldr	r2, [sp, #20]
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	441a      	add	r2, r3
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	9205      	str	r2, [sp, #20]
 800a8d0:	f000 fb58 	bl	800af84 <__i2b>
 800a8d4:	4607      	mov	r7, r0
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	dd0c      	ble.n	800a8f4 <_dtoa_r+0x754>
 800a8da:	9b05      	ldr	r3, [sp, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	dd09      	ble.n	800a8f4 <_dtoa_r+0x754>
 800a8e0:	42ab      	cmp	r3, r5
 800a8e2:	9a04      	ldr	r2, [sp, #16]
 800a8e4:	bfa8      	it	ge
 800a8e6:	462b      	movge	r3, r5
 800a8e8:	1ad2      	subs	r2, r2, r3
 800a8ea:	9204      	str	r2, [sp, #16]
 800a8ec:	9a05      	ldr	r2, [sp, #20]
 800a8ee:	1aed      	subs	r5, r5, r3
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	9305      	str	r3, [sp, #20]
 800a8f4:	9b07      	ldr	r3, [sp, #28]
 800a8f6:	b31b      	cbz	r3, 800a940 <_dtoa_r+0x7a0>
 800a8f8:	9b08      	ldr	r3, [sp, #32]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f000 80af 	beq.w	800aa5e <_dtoa_r+0x8be>
 800a900:	2e00      	cmp	r6, #0
 800a902:	dd13      	ble.n	800a92c <_dtoa_r+0x78c>
 800a904:	4639      	mov	r1, r7
 800a906:	4632      	mov	r2, r6
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fbfb 	bl	800b104 <__pow5mult>
 800a90e:	ee18 2a10 	vmov	r2, s16
 800a912:	4601      	mov	r1, r0
 800a914:	4607      	mov	r7, r0
 800a916:	4620      	mov	r0, r4
 800a918:	f000 fb4a 	bl	800afb0 <__multiply>
 800a91c:	ee18 1a10 	vmov	r1, s16
 800a920:	4680      	mov	r8, r0
 800a922:	4620      	mov	r0, r4
 800a924:	f000 fa76 	bl	800ae14 <_Bfree>
 800a928:	ee08 8a10 	vmov	s16, r8
 800a92c:	9b07      	ldr	r3, [sp, #28]
 800a92e:	1b9a      	subs	r2, r3, r6
 800a930:	d006      	beq.n	800a940 <_dtoa_r+0x7a0>
 800a932:	ee18 1a10 	vmov	r1, s16
 800a936:	4620      	mov	r0, r4
 800a938:	f000 fbe4 	bl	800b104 <__pow5mult>
 800a93c:	ee08 0a10 	vmov	s16, r0
 800a940:	2101      	movs	r1, #1
 800a942:	4620      	mov	r0, r4
 800a944:	f000 fb1e 	bl	800af84 <__i2b>
 800a948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	4606      	mov	r6, r0
 800a94e:	f340 8088 	ble.w	800aa62 <_dtoa_r+0x8c2>
 800a952:	461a      	mov	r2, r3
 800a954:	4601      	mov	r1, r0
 800a956:	4620      	mov	r0, r4
 800a958:	f000 fbd4 	bl	800b104 <__pow5mult>
 800a95c:	9b06      	ldr	r3, [sp, #24]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	4606      	mov	r6, r0
 800a962:	f340 8081 	ble.w	800aa68 <_dtoa_r+0x8c8>
 800a966:	f04f 0800 	mov.w	r8, #0
 800a96a:	6933      	ldr	r3, [r6, #16]
 800a96c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a970:	6918      	ldr	r0, [r3, #16]
 800a972:	f000 fab7 	bl	800aee4 <__hi0bits>
 800a976:	f1c0 0020 	rsb	r0, r0, #32
 800a97a:	9b05      	ldr	r3, [sp, #20]
 800a97c:	4418      	add	r0, r3
 800a97e:	f010 001f 	ands.w	r0, r0, #31
 800a982:	f000 8092 	beq.w	800aaaa <_dtoa_r+0x90a>
 800a986:	f1c0 0320 	rsb	r3, r0, #32
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	f340 808a 	ble.w	800aaa4 <_dtoa_r+0x904>
 800a990:	f1c0 001c 	rsb	r0, r0, #28
 800a994:	9b04      	ldr	r3, [sp, #16]
 800a996:	4403      	add	r3, r0
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	9b05      	ldr	r3, [sp, #20]
 800a99c:	4403      	add	r3, r0
 800a99e:	4405      	add	r5, r0
 800a9a0:	9305      	str	r3, [sp, #20]
 800a9a2:	9b04      	ldr	r3, [sp, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dd07      	ble.n	800a9b8 <_dtoa_r+0x818>
 800a9a8:	ee18 1a10 	vmov	r1, s16
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f000 fc02 	bl	800b1b8 <__lshift>
 800a9b4:	ee08 0a10 	vmov	s16, r0
 800a9b8:	9b05      	ldr	r3, [sp, #20]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	dd05      	ble.n	800a9ca <_dtoa_r+0x82a>
 800a9be:	4631      	mov	r1, r6
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 fbf8 	bl	800b1b8 <__lshift>
 800a9c8:	4606      	mov	r6, r0
 800a9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d06e      	beq.n	800aaae <_dtoa_r+0x90e>
 800a9d0:	ee18 0a10 	vmov	r0, s16
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	f000 fc5f 	bl	800b298 <__mcmp>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	da67      	bge.n	800aaae <_dtoa_r+0x90e>
 800a9de:	9b00      	ldr	r3, [sp, #0]
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	ee18 1a10 	vmov	r1, s16
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	220a      	movs	r2, #10
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f000 fa33 	bl	800ae58 <__multadd>
 800a9f2:	9b08      	ldr	r3, [sp, #32]
 800a9f4:	ee08 0a10 	vmov	s16, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f000 81b1 	beq.w	800ad60 <_dtoa_r+0xbc0>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4639      	mov	r1, r7
 800aa02:	220a      	movs	r2, #10
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 fa27 	bl	800ae58 <__multadd>
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	4607      	mov	r7, r0
 800aa10:	f300 808e 	bgt.w	800ab30 <_dtoa_r+0x990>
 800aa14:	9b06      	ldr	r3, [sp, #24]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	dc51      	bgt.n	800aabe <_dtoa_r+0x91e>
 800aa1a:	e089      	b.n	800ab30 <_dtoa_r+0x990>
 800aa1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa22:	e74b      	b.n	800a8bc <_dtoa_r+0x71c>
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	1e5e      	subs	r6, r3, #1
 800aa28:	9b07      	ldr	r3, [sp, #28]
 800aa2a:	42b3      	cmp	r3, r6
 800aa2c:	bfbf      	itttt	lt
 800aa2e:	9b07      	ldrlt	r3, [sp, #28]
 800aa30:	9607      	strlt	r6, [sp, #28]
 800aa32:	1af2      	sublt	r2, r6, r3
 800aa34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aa36:	bfb6      	itet	lt
 800aa38:	189b      	addlt	r3, r3, r2
 800aa3a:	1b9e      	subge	r6, r3, r6
 800aa3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	bfb8      	it	lt
 800aa42:	2600      	movlt	r6, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	bfb7      	itett	lt
 800aa48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aa4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aa50:	1a9d      	sublt	r5, r3, r2
 800aa52:	2300      	movlt	r3, #0
 800aa54:	e734      	b.n	800a8c0 <_dtoa_r+0x720>
 800aa56:	9e07      	ldr	r6, [sp, #28]
 800aa58:	9d04      	ldr	r5, [sp, #16]
 800aa5a:	9f08      	ldr	r7, [sp, #32]
 800aa5c:	e73b      	b.n	800a8d6 <_dtoa_r+0x736>
 800aa5e:	9a07      	ldr	r2, [sp, #28]
 800aa60:	e767      	b.n	800a932 <_dtoa_r+0x792>
 800aa62:	9b06      	ldr	r3, [sp, #24]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	dc18      	bgt.n	800aa9a <_dtoa_r+0x8fa>
 800aa68:	f1ba 0f00 	cmp.w	sl, #0
 800aa6c:	d115      	bne.n	800aa9a <_dtoa_r+0x8fa>
 800aa6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa72:	b993      	cbnz	r3, 800aa9a <_dtoa_r+0x8fa>
 800aa74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa78:	0d1b      	lsrs	r3, r3, #20
 800aa7a:	051b      	lsls	r3, r3, #20
 800aa7c:	b183      	cbz	r3, 800aaa0 <_dtoa_r+0x900>
 800aa7e:	9b04      	ldr	r3, [sp, #16]
 800aa80:	3301      	adds	r3, #1
 800aa82:	9304      	str	r3, [sp, #16]
 800aa84:	9b05      	ldr	r3, [sp, #20]
 800aa86:	3301      	adds	r3, #1
 800aa88:	9305      	str	r3, [sp, #20]
 800aa8a:	f04f 0801 	mov.w	r8, #1
 800aa8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f47f af6a 	bne.w	800a96a <_dtoa_r+0x7ca>
 800aa96:	2001      	movs	r0, #1
 800aa98:	e76f      	b.n	800a97a <_dtoa_r+0x7da>
 800aa9a:	f04f 0800 	mov.w	r8, #0
 800aa9e:	e7f6      	b.n	800aa8e <_dtoa_r+0x8ee>
 800aaa0:	4698      	mov	r8, r3
 800aaa2:	e7f4      	b.n	800aa8e <_dtoa_r+0x8ee>
 800aaa4:	f43f af7d 	beq.w	800a9a2 <_dtoa_r+0x802>
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	301c      	adds	r0, #28
 800aaac:	e772      	b.n	800a994 <_dtoa_r+0x7f4>
 800aaae:	9b03      	ldr	r3, [sp, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dc37      	bgt.n	800ab24 <_dtoa_r+0x984>
 800aab4:	9b06      	ldr	r3, [sp, #24]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	dd34      	ble.n	800ab24 <_dtoa_r+0x984>
 800aaba:	9b03      	ldr	r3, [sp, #12]
 800aabc:	9302      	str	r3, [sp, #8]
 800aabe:	9b02      	ldr	r3, [sp, #8]
 800aac0:	b96b      	cbnz	r3, 800aade <_dtoa_r+0x93e>
 800aac2:	4631      	mov	r1, r6
 800aac4:	2205      	movs	r2, #5
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 f9c6 	bl	800ae58 <__multadd>
 800aacc:	4601      	mov	r1, r0
 800aace:	4606      	mov	r6, r0
 800aad0:	ee18 0a10 	vmov	r0, s16
 800aad4:	f000 fbe0 	bl	800b298 <__mcmp>
 800aad8:	2800      	cmp	r0, #0
 800aada:	f73f adbb 	bgt.w	800a654 <_dtoa_r+0x4b4>
 800aade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae0:	9d01      	ldr	r5, [sp, #4]
 800aae2:	43db      	mvns	r3, r3
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	f04f 0800 	mov.w	r8, #0
 800aaea:	4631      	mov	r1, r6
 800aaec:	4620      	mov	r0, r4
 800aaee:	f000 f991 	bl	800ae14 <_Bfree>
 800aaf2:	2f00      	cmp	r7, #0
 800aaf4:	f43f aea4 	beq.w	800a840 <_dtoa_r+0x6a0>
 800aaf8:	f1b8 0f00 	cmp.w	r8, #0
 800aafc:	d005      	beq.n	800ab0a <_dtoa_r+0x96a>
 800aafe:	45b8      	cmp	r8, r7
 800ab00:	d003      	beq.n	800ab0a <_dtoa_r+0x96a>
 800ab02:	4641      	mov	r1, r8
 800ab04:	4620      	mov	r0, r4
 800ab06:	f000 f985 	bl	800ae14 <_Bfree>
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 f981 	bl	800ae14 <_Bfree>
 800ab12:	e695      	b.n	800a840 <_dtoa_r+0x6a0>
 800ab14:	2600      	movs	r6, #0
 800ab16:	4637      	mov	r7, r6
 800ab18:	e7e1      	b.n	800aade <_dtoa_r+0x93e>
 800ab1a:	9700      	str	r7, [sp, #0]
 800ab1c:	4637      	mov	r7, r6
 800ab1e:	e599      	b.n	800a654 <_dtoa_r+0x4b4>
 800ab20:	40240000 	.word	0x40240000
 800ab24:	9b08      	ldr	r3, [sp, #32]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 80ca 	beq.w	800acc0 <_dtoa_r+0xb20>
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	9302      	str	r3, [sp, #8]
 800ab30:	2d00      	cmp	r5, #0
 800ab32:	dd05      	ble.n	800ab40 <_dtoa_r+0x9a0>
 800ab34:	4639      	mov	r1, r7
 800ab36:	462a      	mov	r2, r5
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f000 fb3d 	bl	800b1b8 <__lshift>
 800ab3e:	4607      	mov	r7, r0
 800ab40:	f1b8 0f00 	cmp.w	r8, #0
 800ab44:	d05b      	beq.n	800abfe <_dtoa_r+0xa5e>
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f000 f923 	bl	800ad94 <_Balloc>
 800ab4e:	4605      	mov	r5, r0
 800ab50:	b928      	cbnz	r0, 800ab5e <_dtoa_r+0x9be>
 800ab52:	4b87      	ldr	r3, [pc, #540]	; (800ad70 <_dtoa_r+0xbd0>)
 800ab54:	4602      	mov	r2, r0
 800ab56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab5a:	f7ff bb3b 	b.w	800a1d4 <_dtoa_r+0x34>
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	3202      	adds	r2, #2
 800ab62:	0092      	lsls	r2, r2, #2
 800ab64:	f107 010c 	add.w	r1, r7, #12
 800ab68:	300c      	adds	r0, #12
 800ab6a:	f7fe fdd9 	bl	8009720 <memcpy>
 800ab6e:	2201      	movs	r2, #1
 800ab70:	4629      	mov	r1, r5
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 fb20 	bl	800b1b8 <__lshift>
 800ab78:	9b01      	ldr	r3, [sp, #4]
 800ab7a:	f103 0901 	add.w	r9, r3, #1
 800ab7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ab82:	4413      	add	r3, r2
 800ab84:	9305      	str	r3, [sp, #20]
 800ab86:	f00a 0301 	and.w	r3, sl, #1
 800ab8a:	46b8      	mov	r8, r7
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	4607      	mov	r7, r0
 800ab90:	4631      	mov	r1, r6
 800ab92:	ee18 0a10 	vmov	r0, s16
 800ab96:	f7ff fa77 	bl	800a088 <quorem>
 800ab9a:	4641      	mov	r1, r8
 800ab9c:	9002      	str	r0, [sp, #8]
 800ab9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aba2:	ee18 0a10 	vmov	r0, s16
 800aba6:	f000 fb77 	bl	800b298 <__mcmp>
 800abaa:	463a      	mov	r2, r7
 800abac:	9003      	str	r0, [sp, #12]
 800abae:	4631      	mov	r1, r6
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 fb8d 	bl	800b2d0 <__mdiff>
 800abb6:	68c2      	ldr	r2, [r0, #12]
 800abb8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800abbc:	4605      	mov	r5, r0
 800abbe:	bb02      	cbnz	r2, 800ac02 <_dtoa_r+0xa62>
 800abc0:	4601      	mov	r1, r0
 800abc2:	ee18 0a10 	vmov	r0, s16
 800abc6:	f000 fb67 	bl	800b298 <__mcmp>
 800abca:	4602      	mov	r2, r0
 800abcc:	4629      	mov	r1, r5
 800abce:	4620      	mov	r0, r4
 800abd0:	9207      	str	r2, [sp, #28]
 800abd2:	f000 f91f 	bl	800ae14 <_Bfree>
 800abd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800abda:	ea43 0102 	orr.w	r1, r3, r2
 800abde:	9b04      	ldr	r3, [sp, #16]
 800abe0:	430b      	orrs	r3, r1
 800abe2:	464d      	mov	r5, r9
 800abe4:	d10f      	bne.n	800ac06 <_dtoa_r+0xa66>
 800abe6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abea:	d02a      	beq.n	800ac42 <_dtoa_r+0xaa2>
 800abec:	9b03      	ldr	r3, [sp, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	dd02      	ble.n	800abf8 <_dtoa_r+0xa58>
 800abf2:	9b02      	ldr	r3, [sp, #8]
 800abf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800abf8:	f88b a000 	strb.w	sl, [fp]
 800abfc:	e775      	b.n	800aaea <_dtoa_r+0x94a>
 800abfe:	4638      	mov	r0, r7
 800ac00:	e7ba      	b.n	800ab78 <_dtoa_r+0x9d8>
 800ac02:	2201      	movs	r2, #1
 800ac04:	e7e2      	b.n	800abcc <_dtoa_r+0xa2c>
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	db04      	blt.n	800ac16 <_dtoa_r+0xa76>
 800ac0c:	9906      	ldr	r1, [sp, #24]
 800ac0e:	430b      	orrs	r3, r1
 800ac10:	9904      	ldr	r1, [sp, #16]
 800ac12:	430b      	orrs	r3, r1
 800ac14:	d122      	bne.n	800ac5c <_dtoa_r+0xabc>
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	ddee      	ble.n	800abf8 <_dtoa_r+0xa58>
 800ac1a:	ee18 1a10 	vmov	r1, s16
 800ac1e:	2201      	movs	r2, #1
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fac9 	bl	800b1b8 <__lshift>
 800ac26:	4631      	mov	r1, r6
 800ac28:	ee08 0a10 	vmov	s16, r0
 800ac2c:	f000 fb34 	bl	800b298 <__mcmp>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	dc03      	bgt.n	800ac3c <_dtoa_r+0xa9c>
 800ac34:	d1e0      	bne.n	800abf8 <_dtoa_r+0xa58>
 800ac36:	f01a 0f01 	tst.w	sl, #1
 800ac3a:	d0dd      	beq.n	800abf8 <_dtoa_r+0xa58>
 800ac3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac40:	d1d7      	bne.n	800abf2 <_dtoa_r+0xa52>
 800ac42:	2339      	movs	r3, #57	; 0x39
 800ac44:	f88b 3000 	strb.w	r3, [fp]
 800ac48:	462b      	mov	r3, r5
 800ac4a:	461d      	mov	r5, r3
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac52:	2a39      	cmp	r2, #57	; 0x39
 800ac54:	d071      	beq.n	800ad3a <_dtoa_r+0xb9a>
 800ac56:	3201      	adds	r2, #1
 800ac58:	701a      	strb	r2, [r3, #0]
 800ac5a:	e746      	b.n	800aaea <_dtoa_r+0x94a>
 800ac5c:	2a00      	cmp	r2, #0
 800ac5e:	dd07      	ble.n	800ac70 <_dtoa_r+0xad0>
 800ac60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac64:	d0ed      	beq.n	800ac42 <_dtoa_r+0xaa2>
 800ac66:	f10a 0301 	add.w	r3, sl, #1
 800ac6a:	f88b 3000 	strb.w	r3, [fp]
 800ac6e:	e73c      	b.n	800aaea <_dtoa_r+0x94a>
 800ac70:	9b05      	ldr	r3, [sp, #20]
 800ac72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ac76:	4599      	cmp	r9, r3
 800ac78:	d047      	beq.n	800ad0a <_dtoa_r+0xb6a>
 800ac7a:	ee18 1a10 	vmov	r1, s16
 800ac7e:	2300      	movs	r3, #0
 800ac80:	220a      	movs	r2, #10
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 f8e8 	bl	800ae58 <__multadd>
 800ac88:	45b8      	cmp	r8, r7
 800ac8a:	ee08 0a10 	vmov	s16, r0
 800ac8e:	f04f 0300 	mov.w	r3, #0
 800ac92:	f04f 020a 	mov.w	r2, #10
 800ac96:	4641      	mov	r1, r8
 800ac98:	4620      	mov	r0, r4
 800ac9a:	d106      	bne.n	800acaa <_dtoa_r+0xb0a>
 800ac9c:	f000 f8dc 	bl	800ae58 <__multadd>
 800aca0:	4680      	mov	r8, r0
 800aca2:	4607      	mov	r7, r0
 800aca4:	f109 0901 	add.w	r9, r9, #1
 800aca8:	e772      	b.n	800ab90 <_dtoa_r+0x9f0>
 800acaa:	f000 f8d5 	bl	800ae58 <__multadd>
 800acae:	4639      	mov	r1, r7
 800acb0:	4680      	mov	r8, r0
 800acb2:	2300      	movs	r3, #0
 800acb4:	220a      	movs	r2, #10
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 f8ce 	bl	800ae58 <__multadd>
 800acbc:	4607      	mov	r7, r0
 800acbe:	e7f1      	b.n	800aca4 <_dtoa_r+0xb04>
 800acc0:	9b03      	ldr	r3, [sp, #12]
 800acc2:	9302      	str	r3, [sp, #8]
 800acc4:	9d01      	ldr	r5, [sp, #4]
 800acc6:	ee18 0a10 	vmov	r0, s16
 800acca:	4631      	mov	r1, r6
 800accc:	f7ff f9dc 	bl	800a088 <quorem>
 800acd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800acd4:	9b01      	ldr	r3, [sp, #4]
 800acd6:	f805 ab01 	strb.w	sl, [r5], #1
 800acda:	1aea      	subs	r2, r5, r3
 800acdc:	9b02      	ldr	r3, [sp, #8]
 800acde:	4293      	cmp	r3, r2
 800ace0:	dd09      	ble.n	800acf6 <_dtoa_r+0xb56>
 800ace2:	ee18 1a10 	vmov	r1, s16
 800ace6:	2300      	movs	r3, #0
 800ace8:	220a      	movs	r2, #10
 800acea:	4620      	mov	r0, r4
 800acec:	f000 f8b4 	bl	800ae58 <__multadd>
 800acf0:	ee08 0a10 	vmov	s16, r0
 800acf4:	e7e7      	b.n	800acc6 <_dtoa_r+0xb26>
 800acf6:	9b02      	ldr	r3, [sp, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	bfc8      	it	gt
 800acfc:	461d      	movgt	r5, r3
 800acfe:	9b01      	ldr	r3, [sp, #4]
 800ad00:	bfd8      	it	le
 800ad02:	2501      	movle	r5, #1
 800ad04:	441d      	add	r5, r3
 800ad06:	f04f 0800 	mov.w	r8, #0
 800ad0a:	ee18 1a10 	vmov	r1, s16
 800ad0e:	2201      	movs	r2, #1
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fa51 	bl	800b1b8 <__lshift>
 800ad16:	4631      	mov	r1, r6
 800ad18:	ee08 0a10 	vmov	s16, r0
 800ad1c:	f000 fabc 	bl	800b298 <__mcmp>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	dc91      	bgt.n	800ac48 <_dtoa_r+0xaa8>
 800ad24:	d102      	bne.n	800ad2c <_dtoa_r+0xb8c>
 800ad26:	f01a 0f01 	tst.w	sl, #1
 800ad2a:	d18d      	bne.n	800ac48 <_dtoa_r+0xaa8>
 800ad2c:	462b      	mov	r3, r5
 800ad2e:	461d      	mov	r5, r3
 800ad30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad34:	2a30      	cmp	r2, #48	; 0x30
 800ad36:	d0fa      	beq.n	800ad2e <_dtoa_r+0xb8e>
 800ad38:	e6d7      	b.n	800aaea <_dtoa_r+0x94a>
 800ad3a:	9a01      	ldr	r2, [sp, #4]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d184      	bne.n	800ac4a <_dtoa_r+0xaaa>
 800ad40:	9b00      	ldr	r3, [sp, #0]
 800ad42:	3301      	adds	r3, #1
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	2331      	movs	r3, #49	; 0x31
 800ad48:	7013      	strb	r3, [r2, #0]
 800ad4a:	e6ce      	b.n	800aaea <_dtoa_r+0x94a>
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <_dtoa_r+0xbd4>)
 800ad4e:	f7ff ba95 	b.w	800a27c <_dtoa_r+0xdc>
 800ad52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f47f aa6e 	bne.w	800a236 <_dtoa_r+0x96>
 800ad5a:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <_dtoa_r+0xbd8>)
 800ad5c:	f7ff ba8e 	b.w	800a27c <_dtoa_r+0xdc>
 800ad60:	9b02      	ldr	r3, [sp, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	dcae      	bgt.n	800acc4 <_dtoa_r+0xb24>
 800ad66:	9b06      	ldr	r3, [sp, #24]
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	f73f aea8 	bgt.w	800aabe <_dtoa_r+0x91e>
 800ad6e:	e7a9      	b.n	800acc4 <_dtoa_r+0xb24>
 800ad70:	0800c74b 	.word	0x0800c74b
 800ad74:	0800c6a8 	.word	0x0800c6a8
 800ad78:	0800c6cc 	.word	0x0800c6cc

0800ad7c <_localeconv_r>:
 800ad7c:	4800      	ldr	r0, [pc, #0]	; (800ad80 <_localeconv_r+0x4>)
 800ad7e:	4770      	bx	lr
 800ad80:	20000240 	.word	0x20000240

0800ad84 <malloc>:
 800ad84:	4b02      	ldr	r3, [pc, #8]	; (800ad90 <malloc+0xc>)
 800ad86:	4601      	mov	r1, r0
 800ad88:	6818      	ldr	r0, [r3, #0]
 800ad8a:	f000 bc09 	b.w	800b5a0 <_malloc_r>
 800ad8e:	bf00      	nop
 800ad90:	200000ec 	.word	0x200000ec

0800ad94 <_Balloc>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad98:	4604      	mov	r4, r0
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	b976      	cbnz	r6, 800adbc <_Balloc+0x28>
 800ad9e:	2010      	movs	r0, #16
 800ada0:	f7ff fff0 	bl	800ad84 <malloc>
 800ada4:	4602      	mov	r2, r0
 800ada6:	6260      	str	r0, [r4, #36]	; 0x24
 800ada8:	b920      	cbnz	r0, 800adb4 <_Balloc+0x20>
 800adaa:	4b18      	ldr	r3, [pc, #96]	; (800ae0c <_Balloc+0x78>)
 800adac:	4818      	ldr	r0, [pc, #96]	; (800ae10 <_Balloc+0x7c>)
 800adae:	2166      	movs	r1, #102	; 0x66
 800adb0:	f000 fdd6 	bl	800b960 <__assert_func>
 800adb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adb8:	6006      	str	r6, [r0, #0]
 800adba:	60c6      	str	r6, [r0, #12]
 800adbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800adbe:	68f3      	ldr	r3, [r6, #12]
 800adc0:	b183      	cbz	r3, 800ade4 <_Balloc+0x50>
 800adc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adca:	b9b8      	cbnz	r0, 800adfc <_Balloc+0x68>
 800adcc:	2101      	movs	r1, #1
 800adce:	fa01 f605 	lsl.w	r6, r1, r5
 800add2:	1d72      	adds	r2, r6, #5
 800add4:	0092      	lsls	r2, r2, #2
 800add6:	4620      	mov	r0, r4
 800add8:	f000 fb60 	bl	800b49c <_calloc_r>
 800addc:	b160      	cbz	r0, 800adf8 <_Balloc+0x64>
 800adde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ade2:	e00e      	b.n	800ae02 <_Balloc+0x6e>
 800ade4:	2221      	movs	r2, #33	; 0x21
 800ade6:	2104      	movs	r1, #4
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 fb57 	bl	800b49c <_calloc_r>
 800adee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adf0:	60f0      	str	r0, [r6, #12]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1e4      	bne.n	800adc2 <_Balloc+0x2e>
 800adf8:	2000      	movs	r0, #0
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	6802      	ldr	r2, [r0, #0]
 800adfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae02:	2300      	movs	r3, #0
 800ae04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae08:	e7f7      	b.n	800adfa <_Balloc+0x66>
 800ae0a:	bf00      	nop
 800ae0c:	0800c6d9 	.word	0x0800c6d9
 800ae10:	0800c75c 	.word	0x0800c75c

0800ae14 <_Bfree>:
 800ae14:	b570      	push	{r4, r5, r6, lr}
 800ae16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae18:	4605      	mov	r5, r0
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	b976      	cbnz	r6, 800ae3c <_Bfree+0x28>
 800ae1e:	2010      	movs	r0, #16
 800ae20:	f7ff ffb0 	bl	800ad84 <malloc>
 800ae24:	4602      	mov	r2, r0
 800ae26:	6268      	str	r0, [r5, #36]	; 0x24
 800ae28:	b920      	cbnz	r0, 800ae34 <_Bfree+0x20>
 800ae2a:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <_Bfree+0x3c>)
 800ae2c:	4809      	ldr	r0, [pc, #36]	; (800ae54 <_Bfree+0x40>)
 800ae2e:	218a      	movs	r1, #138	; 0x8a
 800ae30:	f000 fd96 	bl	800b960 <__assert_func>
 800ae34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae38:	6006      	str	r6, [r0, #0]
 800ae3a:	60c6      	str	r6, [r0, #12]
 800ae3c:	b13c      	cbz	r4, 800ae4e <_Bfree+0x3a>
 800ae3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae40:	6862      	ldr	r2, [r4, #4]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae48:	6021      	str	r1, [r4, #0]
 800ae4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae4e:	bd70      	pop	{r4, r5, r6, pc}
 800ae50:	0800c6d9 	.word	0x0800c6d9
 800ae54:	0800c75c 	.word	0x0800c75c

0800ae58 <__multadd>:
 800ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5c:	690d      	ldr	r5, [r1, #16]
 800ae5e:	4607      	mov	r7, r0
 800ae60:	460c      	mov	r4, r1
 800ae62:	461e      	mov	r6, r3
 800ae64:	f101 0c14 	add.w	ip, r1, #20
 800ae68:	2000      	movs	r0, #0
 800ae6a:	f8dc 3000 	ldr.w	r3, [ip]
 800ae6e:	b299      	uxth	r1, r3
 800ae70:	fb02 6101 	mla	r1, r2, r1, r6
 800ae74:	0c1e      	lsrs	r6, r3, #16
 800ae76:	0c0b      	lsrs	r3, r1, #16
 800ae78:	fb02 3306 	mla	r3, r2, r6, r3
 800ae7c:	b289      	uxth	r1, r1
 800ae7e:	3001      	adds	r0, #1
 800ae80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae84:	4285      	cmp	r5, r0
 800ae86:	f84c 1b04 	str.w	r1, [ip], #4
 800ae8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae8e:	dcec      	bgt.n	800ae6a <__multadd+0x12>
 800ae90:	b30e      	cbz	r6, 800aed6 <__multadd+0x7e>
 800ae92:	68a3      	ldr	r3, [r4, #8]
 800ae94:	42ab      	cmp	r3, r5
 800ae96:	dc19      	bgt.n	800aecc <__multadd+0x74>
 800ae98:	6861      	ldr	r1, [r4, #4]
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	3101      	adds	r1, #1
 800ae9e:	f7ff ff79 	bl	800ad94 <_Balloc>
 800aea2:	4680      	mov	r8, r0
 800aea4:	b928      	cbnz	r0, 800aeb2 <__multadd+0x5a>
 800aea6:	4602      	mov	r2, r0
 800aea8:	4b0c      	ldr	r3, [pc, #48]	; (800aedc <__multadd+0x84>)
 800aeaa:	480d      	ldr	r0, [pc, #52]	; (800aee0 <__multadd+0x88>)
 800aeac:	21b5      	movs	r1, #181	; 0xb5
 800aeae:	f000 fd57 	bl	800b960 <__assert_func>
 800aeb2:	6922      	ldr	r2, [r4, #16]
 800aeb4:	3202      	adds	r2, #2
 800aeb6:	f104 010c 	add.w	r1, r4, #12
 800aeba:	0092      	lsls	r2, r2, #2
 800aebc:	300c      	adds	r0, #12
 800aebe:	f7fe fc2f 	bl	8009720 <memcpy>
 800aec2:	4621      	mov	r1, r4
 800aec4:	4638      	mov	r0, r7
 800aec6:	f7ff ffa5 	bl	800ae14 <_Bfree>
 800aeca:	4644      	mov	r4, r8
 800aecc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aed0:	3501      	adds	r5, #1
 800aed2:	615e      	str	r6, [r3, #20]
 800aed4:	6125      	str	r5, [r4, #16]
 800aed6:	4620      	mov	r0, r4
 800aed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aedc:	0800c74b 	.word	0x0800c74b
 800aee0:	0800c75c 	.word	0x0800c75c

0800aee4 <__hi0bits>:
 800aee4:	0c03      	lsrs	r3, r0, #16
 800aee6:	041b      	lsls	r3, r3, #16
 800aee8:	b9d3      	cbnz	r3, 800af20 <__hi0bits+0x3c>
 800aeea:	0400      	lsls	r0, r0, #16
 800aeec:	2310      	movs	r3, #16
 800aeee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aef2:	bf04      	itt	eq
 800aef4:	0200      	lsleq	r0, r0, #8
 800aef6:	3308      	addeq	r3, #8
 800aef8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aefc:	bf04      	itt	eq
 800aefe:	0100      	lsleq	r0, r0, #4
 800af00:	3304      	addeq	r3, #4
 800af02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af06:	bf04      	itt	eq
 800af08:	0080      	lsleq	r0, r0, #2
 800af0a:	3302      	addeq	r3, #2
 800af0c:	2800      	cmp	r0, #0
 800af0e:	db05      	blt.n	800af1c <__hi0bits+0x38>
 800af10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af14:	f103 0301 	add.w	r3, r3, #1
 800af18:	bf08      	it	eq
 800af1a:	2320      	moveq	r3, #32
 800af1c:	4618      	mov	r0, r3
 800af1e:	4770      	bx	lr
 800af20:	2300      	movs	r3, #0
 800af22:	e7e4      	b.n	800aeee <__hi0bits+0xa>

0800af24 <__lo0bits>:
 800af24:	6803      	ldr	r3, [r0, #0]
 800af26:	f013 0207 	ands.w	r2, r3, #7
 800af2a:	4601      	mov	r1, r0
 800af2c:	d00b      	beq.n	800af46 <__lo0bits+0x22>
 800af2e:	07da      	lsls	r2, r3, #31
 800af30:	d423      	bmi.n	800af7a <__lo0bits+0x56>
 800af32:	0798      	lsls	r0, r3, #30
 800af34:	bf49      	itett	mi
 800af36:	085b      	lsrmi	r3, r3, #1
 800af38:	089b      	lsrpl	r3, r3, #2
 800af3a:	2001      	movmi	r0, #1
 800af3c:	600b      	strmi	r3, [r1, #0]
 800af3e:	bf5c      	itt	pl
 800af40:	600b      	strpl	r3, [r1, #0]
 800af42:	2002      	movpl	r0, #2
 800af44:	4770      	bx	lr
 800af46:	b298      	uxth	r0, r3
 800af48:	b9a8      	cbnz	r0, 800af76 <__lo0bits+0x52>
 800af4a:	0c1b      	lsrs	r3, r3, #16
 800af4c:	2010      	movs	r0, #16
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	b90a      	cbnz	r2, 800af56 <__lo0bits+0x32>
 800af52:	3008      	adds	r0, #8
 800af54:	0a1b      	lsrs	r3, r3, #8
 800af56:	071a      	lsls	r2, r3, #28
 800af58:	bf04      	itt	eq
 800af5a:	091b      	lsreq	r3, r3, #4
 800af5c:	3004      	addeq	r0, #4
 800af5e:	079a      	lsls	r2, r3, #30
 800af60:	bf04      	itt	eq
 800af62:	089b      	lsreq	r3, r3, #2
 800af64:	3002      	addeq	r0, #2
 800af66:	07da      	lsls	r2, r3, #31
 800af68:	d403      	bmi.n	800af72 <__lo0bits+0x4e>
 800af6a:	085b      	lsrs	r3, r3, #1
 800af6c:	f100 0001 	add.w	r0, r0, #1
 800af70:	d005      	beq.n	800af7e <__lo0bits+0x5a>
 800af72:	600b      	str	r3, [r1, #0]
 800af74:	4770      	bx	lr
 800af76:	4610      	mov	r0, r2
 800af78:	e7e9      	b.n	800af4e <__lo0bits+0x2a>
 800af7a:	2000      	movs	r0, #0
 800af7c:	4770      	bx	lr
 800af7e:	2020      	movs	r0, #32
 800af80:	4770      	bx	lr
	...

0800af84 <__i2b>:
 800af84:	b510      	push	{r4, lr}
 800af86:	460c      	mov	r4, r1
 800af88:	2101      	movs	r1, #1
 800af8a:	f7ff ff03 	bl	800ad94 <_Balloc>
 800af8e:	4602      	mov	r2, r0
 800af90:	b928      	cbnz	r0, 800af9e <__i2b+0x1a>
 800af92:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <__i2b+0x24>)
 800af94:	4805      	ldr	r0, [pc, #20]	; (800afac <__i2b+0x28>)
 800af96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af9a:	f000 fce1 	bl	800b960 <__assert_func>
 800af9e:	2301      	movs	r3, #1
 800afa0:	6144      	str	r4, [r0, #20]
 800afa2:	6103      	str	r3, [r0, #16]
 800afa4:	bd10      	pop	{r4, pc}
 800afa6:	bf00      	nop
 800afa8:	0800c74b 	.word	0x0800c74b
 800afac:	0800c75c 	.word	0x0800c75c

0800afb0 <__multiply>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	4691      	mov	r9, r2
 800afb6:	690a      	ldr	r2, [r1, #16]
 800afb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	bfb8      	it	lt
 800afc0:	460b      	movlt	r3, r1
 800afc2:	460c      	mov	r4, r1
 800afc4:	bfbc      	itt	lt
 800afc6:	464c      	movlt	r4, r9
 800afc8:	4699      	movlt	r9, r3
 800afca:	6927      	ldr	r7, [r4, #16]
 800afcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800afd0:	68a3      	ldr	r3, [r4, #8]
 800afd2:	6861      	ldr	r1, [r4, #4]
 800afd4:	eb07 060a 	add.w	r6, r7, sl
 800afd8:	42b3      	cmp	r3, r6
 800afda:	b085      	sub	sp, #20
 800afdc:	bfb8      	it	lt
 800afde:	3101      	addlt	r1, #1
 800afe0:	f7ff fed8 	bl	800ad94 <_Balloc>
 800afe4:	b930      	cbnz	r0, 800aff4 <__multiply+0x44>
 800afe6:	4602      	mov	r2, r0
 800afe8:	4b44      	ldr	r3, [pc, #272]	; (800b0fc <__multiply+0x14c>)
 800afea:	4845      	ldr	r0, [pc, #276]	; (800b100 <__multiply+0x150>)
 800afec:	f240 115d 	movw	r1, #349	; 0x15d
 800aff0:	f000 fcb6 	bl	800b960 <__assert_func>
 800aff4:	f100 0514 	add.w	r5, r0, #20
 800aff8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800affc:	462b      	mov	r3, r5
 800affe:	2200      	movs	r2, #0
 800b000:	4543      	cmp	r3, r8
 800b002:	d321      	bcc.n	800b048 <__multiply+0x98>
 800b004:	f104 0314 	add.w	r3, r4, #20
 800b008:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b00c:	f109 0314 	add.w	r3, r9, #20
 800b010:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b014:	9202      	str	r2, [sp, #8]
 800b016:	1b3a      	subs	r2, r7, r4
 800b018:	3a15      	subs	r2, #21
 800b01a:	f022 0203 	bic.w	r2, r2, #3
 800b01e:	3204      	adds	r2, #4
 800b020:	f104 0115 	add.w	r1, r4, #21
 800b024:	428f      	cmp	r7, r1
 800b026:	bf38      	it	cc
 800b028:	2204      	movcc	r2, #4
 800b02a:	9201      	str	r2, [sp, #4]
 800b02c:	9a02      	ldr	r2, [sp, #8]
 800b02e:	9303      	str	r3, [sp, #12]
 800b030:	429a      	cmp	r2, r3
 800b032:	d80c      	bhi.n	800b04e <__multiply+0x9e>
 800b034:	2e00      	cmp	r6, #0
 800b036:	dd03      	ble.n	800b040 <__multiply+0x90>
 800b038:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d05a      	beq.n	800b0f6 <__multiply+0x146>
 800b040:	6106      	str	r6, [r0, #16]
 800b042:	b005      	add	sp, #20
 800b044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b048:	f843 2b04 	str.w	r2, [r3], #4
 800b04c:	e7d8      	b.n	800b000 <__multiply+0x50>
 800b04e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b052:	f1ba 0f00 	cmp.w	sl, #0
 800b056:	d024      	beq.n	800b0a2 <__multiply+0xf2>
 800b058:	f104 0e14 	add.w	lr, r4, #20
 800b05c:	46a9      	mov	r9, r5
 800b05e:	f04f 0c00 	mov.w	ip, #0
 800b062:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b066:	f8d9 1000 	ldr.w	r1, [r9]
 800b06a:	fa1f fb82 	uxth.w	fp, r2
 800b06e:	b289      	uxth	r1, r1
 800b070:	fb0a 110b 	mla	r1, sl, fp, r1
 800b074:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b078:	f8d9 2000 	ldr.w	r2, [r9]
 800b07c:	4461      	add	r1, ip
 800b07e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b082:	fb0a c20b 	mla	r2, sl, fp, ip
 800b086:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b08a:	b289      	uxth	r1, r1
 800b08c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b090:	4577      	cmp	r7, lr
 800b092:	f849 1b04 	str.w	r1, [r9], #4
 800b096:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b09a:	d8e2      	bhi.n	800b062 <__multiply+0xb2>
 800b09c:	9a01      	ldr	r2, [sp, #4]
 800b09e:	f845 c002 	str.w	ip, [r5, r2]
 800b0a2:	9a03      	ldr	r2, [sp, #12]
 800b0a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	f1b9 0f00 	cmp.w	r9, #0
 800b0ae:	d020      	beq.n	800b0f2 <__multiply+0x142>
 800b0b0:	6829      	ldr	r1, [r5, #0]
 800b0b2:	f104 0c14 	add.w	ip, r4, #20
 800b0b6:	46ae      	mov	lr, r5
 800b0b8:	f04f 0a00 	mov.w	sl, #0
 800b0bc:	f8bc b000 	ldrh.w	fp, [ip]
 800b0c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b0c4:	fb09 220b 	mla	r2, r9, fp, r2
 800b0c8:	4492      	add	sl, r2
 800b0ca:	b289      	uxth	r1, r1
 800b0cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b0d0:	f84e 1b04 	str.w	r1, [lr], #4
 800b0d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b0d8:	f8be 1000 	ldrh.w	r1, [lr]
 800b0dc:	0c12      	lsrs	r2, r2, #16
 800b0de:	fb09 1102 	mla	r1, r9, r2, r1
 800b0e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b0e6:	4567      	cmp	r7, ip
 800b0e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b0ec:	d8e6      	bhi.n	800b0bc <__multiply+0x10c>
 800b0ee:	9a01      	ldr	r2, [sp, #4]
 800b0f0:	50a9      	str	r1, [r5, r2]
 800b0f2:	3504      	adds	r5, #4
 800b0f4:	e79a      	b.n	800b02c <__multiply+0x7c>
 800b0f6:	3e01      	subs	r6, #1
 800b0f8:	e79c      	b.n	800b034 <__multiply+0x84>
 800b0fa:	bf00      	nop
 800b0fc:	0800c74b 	.word	0x0800c74b
 800b100:	0800c75c 	.word	0x0800c75c

0800b104 <__pow5mult>:
 800b104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b108:	4615      	mov	r5, r2
 800b10a:	f012 0203 	ands.w	r2, r2, #3
 800b10e:	4606      	mov	r6, r0
 800b110:	460f      	mov	r7, r1
 800b112:	d007      	beq.n	800b124 <__pow5mult+0x20>
 800b114:	4c25      	ldr	r4, [pc, #148]	; (800b1ac <__pow5mult+0xa8>)
 800b116:	3a01      	subs	r2, #1
 800b118:	2300      	movs	r3, #0
 800b11a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b11e:	f7ff fe9b 	bl	800ae58 <__multadd>
 800b122:	4607      	mov	r7, r0
 800b124:	10ad      	asrs	r5, r5, #2
 800b126:	d03d      	beq.n	800b1a4 <__pow5mult+0xa0>
 800b128:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b12a:	b97c      	cbnz	r4, 800b14c <__pow5mult+0x48>
 800b12c:	2010      	movs	r0, #16
 800b12e:	f7ff fe29 	bl	800ad84 <malloc>
 800b132:	4602      	mov	r2, r0
 800b134:	6270      	str	r0, [r6, #36]	; 0x24
 800b136:	b928      	cbnz	r0, 800b144 <__pow5mult+0x40>
 800b138:	4b1d      	ldr	r3, [pc, #116]	; (800b1b0 <__pow5mult+0xac>)
 800b13a:	481e      	ldr	r0, [pc, #120]	; (800b1b4 <__pow5mult+0xb0>)
 800b13c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b140:	f000 fc0e 	bl	800b960 <__assert_func>
 800b144:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b148:	6004      	str	r4, [r0, #0]
 800b14a:	60c4      	str	r4, [r0, #12]
 800b14c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b150:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b154:	b94c      	cbnz	r4, 800b16a <__pow5mult+0x66>
 800b156:	f240 2171 	movw	r1, #625	; 0x271
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7ff ff12 	bl	800af84 <__i2b>
 800b160:	2300      	movs	r3, #0
 800b162:	f8c8 0008 	str.w	r0, [r8, #8]
 800b166:	4604      	mov	r4, r0
 800b168:	6003      	str	r3, [r0, #0]
 800b16a:	f04f 0900 	mov.w	r9, #0
 800b16e:	07eb      	lsls	r3, r5, #31
 800b170:	d50a      	bpl.n	800b188 <__pow5mult+0x84>
 800b172:	4639      	mov	r1, r7
 800b174:	4622      	mov	r2, r4
 800b176:	4630      	mov	r0, r6
 800b178:	f7ff ff1a 	bl	800afb0 <__multiply>
 800b17c:	4639      	mov	r1, r7
 800b17e:	4680      	mov	r8, r0
 800b180:	4630      	mov	r0, r6
 800b182:	f7ff fe47 	bl	800ae14 <_Bfree>
 800b186:	4647      	mov	r7, r8
 800b188:	106d      	asrs	r5, r5, #1
 800b18a:	d00b      	beq.n	800b1a4 <__pow5mult+0xa0>
 800b18c:	6820      	ldr	r0, [r4, #0]
 800b18e:	b938      	cbnz	r0, 800b1a0 <__pow5mult+0x9c>
 800b190:	4622      	mov	r2, r4
 800b192:	4621      	mov	r1, r4
 800b194:	4630      	mov	r0, r6
 800b196:	f7ff ff0b 	bl	800afb0 <__multiply>
 800b19a:	6020      	str	r0, [r4, #0]
 800b19c:	f8c0 9000 	str.w	r9, [r0]
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	e7e4      	b.n	800b16e <__pow5mult+0x6a>
 800b1a4:	4638      	mov	r0, r7
 800b1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1aa:	bf00      	nop
 800b1ac:	0800c8a8 	.word	0x0800c8a8
 800b1b0:	0800c6d9 	.word	0x0800c6d9
 800b1b4:	0800c75c 	.word	0x0800c75c

0800b1b8 <__lshift>:
 800b1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1bc:	460c      	mov	r4, r1
 800b1be:	6849      	ldr	r1, [r1, #4]
 800b1c0:	6923      	ldr	r3, [r4, #16]
 800b1c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1c6:	68a3      	ldr	r3, [r4, #8]
 800b1c8:	4607      	mov	r7, r0
 800b1ca:	4691      	mov	r9, r2
 800b1cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1d0:	f108 0601 	add.w	r6, r8, #1
 800b1d4:	42b3      	cmp	r3, r6
 800b1d6:	db0b      	blt.n	800b1f0 <__lshift+0x38>
 800b1d8:	4638      	mov	r0, r7
 800b1da:	f7ff fddb 	bl	800ad94 <_Balloc>
 800b1de:	4605      	mov	r5, r0
 800b1e0:	b948      	cbnz	r0, 800b1f6 <__lshift+0x3e>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	4b2a      	ldr	r3, [pc, #168]	; (800b290 <__lshift+0xd8>)
 800b1e6:	482b      	ldr	r0, [pc, #172]	; (800b294 <__lshift+0xdc>)
 800b1e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b1ec:	f000 fbb8 	bl	800b960 <__assert_func>
 800b1f0:	3101      	adds	r1, #1
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	e7ee      	b.n	800b1d4 <__lshift+0x1c>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f100 0114 	add.w	r1, r0, #20
 800b1fc:	f100 0210 	add.w	r2, r0, #16
 800b200:	4618      	mov	r0, r3
 800b202:	4553      	cmp	r3, sl
 800b204:	db37      	blt.n	800b276 <__lshift+0xbe>
 800b206:	6920      	ldr	r0, [r4, #16]
 800b208:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b20c:	f104 0314 	add.w	r3, r4, #20
 800b210:	f019 091f 	ands.w	r9, r9, #31
 800b214:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b218:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b21c:	d02f      	beq.n	800b27e <__lshift+0xc6>
 800b21e:	f1c9 0e20 	rsb	lr, r9, #32
 800b222:	468a      	mov	sl, r1
 800b224:	f04f 0c00 	mov.w	ip, #0
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	fa02 f209 	lsl.w	r2, r2, r9
 800b22e:	ea42 020c 	orr.w	r2, r2, ip
 800b232:	f84a 2b04 	str.w	r2, [sl], #4
 800b236:	f853 2b04 	ldr.w	r2, [r3], #4
 800b23a:	4298      	cmp	r0, r3
 800b23c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b240:	d8f2      	bhi.n	800b228 <__lshift+0x70>
 800b242:	1b03      	subs	r3, r0, r4
 800b244:	3b15      	subs	r3, #21
 800b246:	f023 0303 	bic.w	r3, r3, #3
 800b24a:	3304      	adds	r3, #4
 800b24c:	f104 0215 	add.w	r2, r4, #21
 800b250:	4290      	cmp	r0, r2
 800b252:	bf38      	it	cc
 800b254:	2304      	movcc	r3, #4
 800b256:	f841 c003 	str.w	ip, [r1, r3]
 800b25a:	f1bc 0f00 	cmp.w	ip, #0
 800b25e:	d001      	beq.n	800b264 <__lshift+0xac>
 800b260:	f108 0602 	add.w	r6, r8, #2
 800b264:	3e01      	subs	r6, #1
 800b266:	4638      	mov	r0, r7
 800b268:	612e      	str	r6, [r5, #16]
 800b26a:	4621      	mov	r1, r4
 800b26c:	f7ff fdd2 	bl	800ae14 <_Bfree>
 800b270:	4628      	mov	r0, r5
 800b272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b276:	f842 0f04 	str.w	r0, [r2, #4]!
 800b27a:	3301      	adds	r3, #1
 800b27c:	e7c1      	b.n	800b202 <__lshift+0x4a>
 800b27e:	3904      	subs	r1, #4
 800b280:	f853 2b04 	ldr.w	r2, [r3], #4
 800b284:	f841 2f04 	str.w	r2, [r1, #4]!
 800b288:	4298      	cmp	r0, r3
 800b28a:	d8f9      	bhi.n	800b280 <__lshift+0xc8>
 800b28c:	e7ea      	b.n	800b264 <__lshift+0xac>
 800b28e:	bf00      	nop
 800b290:	0800c74b 	.word	0x0800c74b
 800b294:	0800c75c 	.word	0x0800c75c

0800b298 <__mcmp>:
 800b298:	b530      	push	{r4, r5, lr}
 800b29a:	6902      	ldr	r2, [r0, #16]
 800b29c:	690c      	ldr	r4, [r1, #16]
 800b29e:	1b12      	subs	r2, r2, r4
 800b2a0:	d10e      	bne.n	800b2c0 <__mcmp+0x28>
 800b2a2:	f100 0314 	add.w	r3, r0, #20
 800b2a6:	3114      	adds	r1, #20
 800b2a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b2b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b2b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b2b8:	42a5      	cmp	r5, r4
 800b2ba:	d003      	beq.n	800b2c4 <__mcmp+0x2c>
 800b2bc:	d305      	bcc.n	800b2ca <__mcmp+0x32>
 800b2be:	2201      	movs	r2, #1
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	bd30      	pop	{r4, r5, pc}
 800b2c4:	4283      	cmp	r3, r0
 800b2c6:	d3f3      	bcc.n	800b2b0 <__mcmp+0x18>
 800b2c8:	e7fa      	b.n	800b2c0 <__mcmp+0x28>
 800b2ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2ce:	e7f7      	b.n	800b2c0 <__mcmp+0x28>

0800b2d0 <__mdiff>:
 800b2d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d4:	460c      	mov	r4, r1
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4620      	mov	r0, r4
 800b2dc:	4690      	mov	r8, r2
 800b2de:	f7ff ffdb 	bl	800b298 <__mcmp>
 800b2e2:	1e05      	subs	r5, r0, #0
 800b2e4:	d110      	bne.n	800b308 <__mdiff+0x38>
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7ff fd53 	bl	800ad94 <_Balloc>
 800b2ee:	b930      	cbnz	r0, 800b2fe <__mdiff+0x2e>
 800b2f0:	4b3a      	ldr	r3, [pc, #232]	; (800b3dc <__mdiff+0x10c>)
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	f240 2132 	movw	r1, #562	; 0x232
 800b2f8:	4839      	ldr	r0, [pc, #228]	; (800b3e0 <__mdiff+0x110>)
 800b2fa:	f000 fb31 	bl	800b960 <__assert_func>
 800b2fe:	2301      	movs	r3, #1
 800b300:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b308:	bfa4      	itt	ge
 800b30a:	4643      	movge	r3, r8
 800b30c:	46a0      	movge	r8, r4
 800b30e:	4630      	mov	r0, r6
 800b310:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b314:	bfa6      	itte	ge
 800b316:	461c      	movge	r4, r3
 800b318:	2500      	movge	r5, #0
 800b31a:	2501      	movlt	r5, #1
 800b31c:	f7ff fd3a 	bl	800ad94 <_Balloc>
 800b320:	b920      	cbnz	r0, 800b32c <__mdiff+0x5c>
 800b322:	4b2e      	ldr	r3, [pc, #184]	; (800b3dc <__mdiff+0x10c>)
 800b324:	4602      	mov	r2, r0
 800b326:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b32a:	e7e5      	b.n	800b2f8 <__mdiff+0x28>
 800b32c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b330:	6926      	ldr	r6, [r4, #16]
 800b332:	60c5      	str	r5, [r0, #12]
 800b334:	f104 0914 	add.w	r9, r4, #20
 800b338:	f108 0514 	add.w	r5, r8, #20
 800b33c:	f100 0e14 	add.w	lr, r0, #20
 800b340:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b344:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b348:	f108 0210 	add.w	r2, r8, #16
 800b34c:	46f2      	mov	sl, lr
 800b34e:	2100      	movs	r1, #0
 800b350:	f859 3b04 	ldr.w	r3, [r9], #4
 800b354:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b358:	fa1f f883 	uxth.w	r8, r3
 800b35c:	fa11 f18b 	uxtah	r1, r1, fp
 800b360:	0c1b      	lsrs	r3, r3, #16
 800b362:	eba1 0808 	sub.w	r8, r1, r8
 800b366:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b36a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b36e:	fa1f f888 	uxth.w	r8, r8
 800b372:	1419      	asrs	r1, r3, #16
 800b374:	454e      	cmp	r6, r9
 800b376:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b37a:	f84a 3b04 	str.w	r3, [sl], #4
 800b37e:	d8e7      	bhi.n	800b350 <__mdiff+0x80>
 800b380:	1b33      	subs	r3, r6, r4
 800b382:	3b15      	subs	r3, #21
 800b384:	f023 0303 	bic.w	r3, r3, #3
 800b388:	3304      	adds	r3, #4
 800b38a:	3415      	adds	r4, #21
 800b38c:	42a6      	cmp	r6, r4
 800b38e:	bf38      	it	cc
 800b390:	2304      	movcc	r3, #4
 800b392:	441d      	add	r5, r3
 800b394:	4473      	add	r3, lr
 800b396:	469e      	mov	lr, r3
 800b398:	462e      	mov	r6, r5
 800b39a:	4566      	cmp	r6, ip
 800b39c:	d30e      	bcc.n	800b3bc <__mdiff+0xec>
 800b39e:	f10c 0203 	add.w	r2, ip, #3
 800b3a2:	1b52      	subs	r2, r2, r5
 800b3a4:	f022 0203 	bic.w	r2, r2, #3
 800b3a8:	3d03      	subs	r5, #3
 800b3aa:	45ac      	cmp	ip, r5
 800b3ac:	bf38      	it	cc
 800b3ae:	2200      	movcc	r2, #0
 800b3b0:	441a      	add	r2, r3
 800b3b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b3b6:	b17b      	cbz	r3, 800b3d8 <__mdiff+0x108>
 800b3b8:	6107      	str	r7, [r0, #16]
 800b3ba:	e7a3      	b.n	800b304 <__mdiff+0x34>
 800b3bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b3c0:	fa11 f288 	uxtah	r2, r1, r8
 800b3c4:	1414      	asrs	r4, r2, #16
 800b3c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b3ca:	b292      	uxth	r2, r2
 800b3cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b3d0:	f84e 2b04 	str.w	r2, [lr], #4
 800b3d4:	1421      	asrs	r1, r4, #16
 800b3d6:	e7e0      	b.n	800b39a <__mdiff+0xca>
 800b3d8:	3f01      	subs	r7, #1
 800b3da:	e7ea      	b.n	800b3b2 <__mdiff+0xe2>
 800b3dc:	0800c74b 	.word	0x0800c74b
 800b3e0:	0800c75c 	.word	0x0800c75c

0800b3e4 <__d2b>:
 800b3e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3e8:	4689      	mov	r9, r1
 800b3ea:	2101      	movs	r1, #1
 800b3ec:	ec57 6b10 	vmov	r6, r7, d0
 800b3f0:	4690      	mov	r8, r2
 800b3f2:	f7ff fccf 	bl	800ad94 <_Balloc>
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	b930      	cbnz	r0, 800b408 <__d2b+0x24>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	4b25      	ldr	r3, [pc, #148]	; (800b494 <__d2b+0xb0>)
 800b3fe:	4826      	ldr	r0, [pc, #152]	; (800b498 <__d2b+0xb4>)
 800b400:	f240 310a 	movw	r1, #778	; 0x30a
 800b404:	f000 faac 	bl	800b960 <__assert_func>
 800b408:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b40c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b410:	bb35      	cbnz	r5, 800b460 <__d2b+0x7c>
 800b412:	2e00      	cmp	r6, #0
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	d028      	beq.n	800b46a <__d2b+0x86>
 800b418:	4668      	mov	r0, sp
 800b41a:	9600      	str	r6, [sp, #0]
 800b41c:	f7ff fd82 	bl	800af24 <__lo0bits>
 800b420:	9900      	ldr	r1, [sp, #0]
 800b422:	b300      	cbz	r0, 800b466 <__d2b+0x82>
 800b424:	9a01      	ldr	r2, [sp, #4]
 800b426:	f1c0 0320 	rsb	r3, r0, #32
 800b42a:	fa02 f303 	lsl.w	r3, r2, r3
 800b42e:	430b      	orrs	r3, r1
 800b430:	40c2      	lsrs	r2, r0
 800b432:	6163      	str	r3, [r4, #20]
 800b434:	9201      	str	r2, [sp, #4]
 800b436:	9b01      	ldr	r3, [sp, #4]
 800b438:	61a3      	str	r3, [r4, #24]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	bf14      	ite	ne
 800b43e:	2202      	movne	r2, #2
 800b440:	2201      	moveq	r2, #1
 800b442:	6122      	str	r2, [r4, #16]
 800b444:	b1d5      	cbz	r5, 800b47c <__d2b+0x98>
 800b446:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b44a:	4405      	add	r5, r0
 800b44c:	f8c9 5000 	str.w	r5, [r9]
 800b450:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b454:	f8c8 0000 	str.w	r0, [r8]
 800b458:	4620      	mov	r0, r4
 800b45a:	b003      	add	sp, #12
 800b45c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b464:	e7d5      	b.n	800b412 <__d2b+0x2e>
 800b466:	6161      	str	r1, [r4, #20]
 800b468:	e7e5      	b.n	800b436 <__d2b+0x52>
 800b46a:	a801      	add	r0, sp, #4
 800b46c:	f7ff fd5a 	bl	800af24 <__lo0bits>
 800b470:	9b01      	ldr	r3, [sp, #4]
 800b472:	6163      	str	r3, [r4, #20]
 800b474:	2201      	movs	r2, #1
 800b476:	6122      	str	r2, [r4, #16]
 800b478:	3020      	adds	r0, #32
 800b47a:	e7e3      	b.n	800b444 <__d2b+0x60>
 800b47c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b480:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b484:	f8c9 0000 	str.w	r0, [r9]
 800b488:	6918      	ldr	r0, [r3, #16]
 800b48a:	f7ff fd2b 	bl	800aee4 <__hi0bits>
 800b48e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b492:	e7df      	b.n	800b454 <__d2b+0x70>
 800b494:	0800c74b 	.word	0x0800c74b
 800b498:	0800c75c 	.word	0x0800c75c

0800b49c <_calloc_r>:
 800b49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b49e:	fba1 2402 	umull	r2, r4, r1, r2
 800b4a2:	b94c      	cbnz	r4, 800b4b8 <_calloc_r+0x1c>
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	9201      	str	r2, [sp, #4]
 800b4a8:	f000 f87a 	bl	800b5a0 <_malloc_r>
 800b4ac:	9a01      	ldr	r2, [sp, #4]
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	b930      	cbnz	r0, 800b4c0 <_calloc_r+0x24>
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	b003      	add	sp, #12
 800b4b6:	bd30      	pop	{r4, r5, pc}
 800b4b8:	220c      	movs	r2, #12
 800b4ba:	6002      	str	r2, [r0, #0]
 800b4bc:	2500      	movs	r5, #0
 800b4be:	e7f8      	b.n	800b4b2 <_calloc_r+0x16>
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	f7fe f93b 	bl	800973c <memset>
 800b4c6:	e7f4      	b.n	800b4b2 <_calloc_r+0x16>

0800b4c8 <_free_r>:
 800b4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4ca:	2900      	cmp	r1, #0
 800b4cc:	d044      	beq.n	800b558 <_free_r+0x90>
 800b4ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4d2:	9001      	str	r0, [sp, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b4da:	bfb8      	it	lt
 800b4dc:	18e4      	addlt	r4, r4, r3
 800b4de:	f000 fa9b 	bl	800ba18 <__malloc_lock>
 800b4e2:	4a1e      	ldr	r2, [pc, #120]	; (800b55c <_free_r+0x94>)
 800b4e4:	9801      	ldr	r0, [sp, #4]
 800b4e6:	6813      	ldr	r3, [r2, #0]
 800b4e8:	b933      	cbnz	r3, 800b4f8 <_free_r+0x30>
 800b4ea:	6063      	str	r3, [r4, #4]
 800b4ec:	6014      	str	r4, [r2, #0]
 800b4ee:	b003      	add	sp, #12
 800b4f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4f4:	f000 ba96 	b.w	800ba24 <__malloc_unlock>
 800b4f8:	42a3      	cmp	r3, r4
 800b4fa:	d908      	bls.n	800b50e <_free_r+0x46>
 800b4fc:	6825      	ldr	r5, [r4, #0]
 800b4fe:	1961      	adds	r1, r4, r5
 800b500:	428b      	cmp	r3, r1
 800b502:	bf01      	itttt	eq
 800b504:	6819      	ldreq	r1, [r3, #0]
 800b506:	685b      	ldreq	r3, [r3, #4]
 800b508:	1949      	addeq	r1, r1, r5
 800b50a:	6021      	streq	r1, [r4, #0]
 800b50c:	e7ed      	b.n	800b4ea <_free_r+0x22>
 800b50e:	461a      	mov	r2, r3
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	b10b      	cbz	r3, 800b518 <_free_r+0x50>
 800b514:	42a3      	cmp	r3, r4
 800b516:	d9fa      	bls.n	800b50e <_free_r+0x46>
 800b518:	6811      	ldr	r1, [r2, #0]
 800b51a:	1855      	adds	r5, r2, r1
 800b51c:	42a5      	cmp	r5, r4
 800b51e:	d10b      	bne.n	800b538 <_free_r+0x70>
 800b520:	6824      	ldr	r4, [r4, #0]
 800b522:	4421      	add	r1, r4
 800b524:	1854      	adds	r4, r2, r1
 800b526:	42a3      	cmp	r3, r4
 800b528:	6011      	str	r1, [r2, #0]
 800b52a:	d1e0      	bne.n	800b4ee <_free_r+0x26>
 800b52c:	681c      	ldr	r4, [r3, #0]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	6053      	str	r3, [r2, #4]
 800b532:	4421      	add	r1, r4
 800b534:	6011      	str	r1, [r2, #0]
 800b536:	e7da      	b.n	800b4ee <_free_r+0x26>
 800b538:	d902      	bls.n	800b540 <_free_r+0x78>
 800b53a:	230c      	movs	r3, #12
 800b53c:	6003      	str	r3, [r0, #0]
 800b53e:	e7d6      	b.n	800b4ee <_free_r+0x26>
 800b540:	6825      	ldr	r5, [r4, #0]
 800b542:	1961      	adds	r1, r4, r5
 800b544:	428b      	cmp	r3, r1
 800b546:	bf04      	itt	eq
 800b548:	6819      	ldreq	r1, [r3, #0]
 800b54a:	685b      	ldreq	r3, [r3, #4]
 800b54c:	6063      	str	r3, [r4, #4]
 800b54e:	bf04      	itt	eq
 800b550:	1949      	addeq	r1, r1, r5
 800b552:	6021      	streq	r1, [r4, #0]
 800b554:	6054      	str	r4, [r2, #4]
 800b556:	e7ca      	b.n	800b4ee <_free_r+0x26>
 800b558:	b003      	add	sp, #12
 800b55a:	bd30      	pop	{r4, r5, pc}
 800b55c:	20000650 	.word	0x20000650

0800b560 <sbrk_aligned>:
 800b560:	b570      	push	{r4, r5, r6, lr}
 800b562:	4e0e      	ldr	r6, [pc, #56]	; (800b59c <sbrk_aligned+0x3c>)
 800b564:	460c      	mov	r4, r1
 800b566:	6831      	ldr	r1, [r6, #0]
 800b568:	4605      	mov	r5, r0
 800b56a:	b911      	cbnz	r1, 800b572 <sbrk_aligned+0x12>
 800b56c:	f000 f9e8 	bl	800b940 <_sbrk_r>
 800b570:	6030      	str	r0, [r6, #0]
 800b572:	4621      	mov	r1, r4
 800b574:	4628      	mov	r0, r5
 800b576:	f000 f9e3 	bl	800b940 <_sbrk_r>
 800b57a:	1c43      	adds	r3, r0, #1
 800b57c:	d00a      	beq.n	800b594 <sbrk_aligned+0x34>
 800b57e:	1cc4      	adds	r4, r0, #3
 800b580:	f024 0403 	bic.w	r4, r4, #3
 800b584:	42a0      	cmp	r0, r4
 800b586:	d007      	beq.n	800b598 <sbrk_aligned+0x38>
 800b588:	1a21      	subs	r1, r4, r0
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 f9d8 	bl	800b940 <_sbrk_r>
 800b590:	3001      	adds	r0, #1
 800b592:	d101      	bne.n	800b598 <sbrk_aligned+0x38>
 800b594:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b598:	4620      	mov	r0, r4
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	20000654 	.word	0x20000654

0800b5a0 <_malloc_r>:
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	1ccd      	adds	r5, r1, #3
 800b5a6:	f025 0503 	bic.w	r5, r5, #3
 800b5aa:	3508      	adds	r5, #8
 800b5ac:	2d0c      	cmp	r5, #12
 800b5ae:	bf38      	it	cc
 800b5b0:	250c      	movcc	r5, #12
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	db01      	blt.n	800b5bc <_malloc_r+0x1c>
 800b5b8:	42a9      	cmp	r1, r5
 800b5ba:	d905      	bls.n	800b5c8 <_malloc_r+0x28>
 800b5bc:	230c      	movs	r3, #12
 800b5be:	603b      	str	r3, [r7, #0]
 800b5c0:	2600      	movs	r6, #0
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c8:	4e2e      	ldr	r6, [pc, #184]	; (800b684 <_malloc_r+0xe4>)
 800b5ca:	f000 fa25 	bl	800ba18 <__malloc_lock>
 800b5ce:	6833      	ldr	r3, [r6, #0]
 800b5d0:	461c      	mov	r4, r3
 800b5d2:	bb34      	cbnz	r4, 800b622 <_malloc_r+0x82>
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	f7ff ffc2 	bl	800b560 <sbrk_aligned>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	4604      	mov	r4, r0
 800b5e0:	d14d      	bne.n	800b67e <_malloc_r+0xde>
 800b5e2:	6834      	ldr	r4, [r6, #0]
 800b5e4:	4626      	mov	r6, r4
 800b5e6:	2e00      	cmp	r6, #0
 800b5e8:	d140      	bne.n	800b66c <_malloc_r+0xcc>
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	4631      	mov	r1, r6
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	eb04 0803 	add.w	r8, r4, r3
 800b5f4:	f000 f9a4 	bl	800b940 <_sbrk_r>
 800b5f8:	4580      	cmp	r8, r0
 800b5fa:	d13a      	bne.n	800b672 <_malloc_r+0xd2>
 800b5fc:	6821      	ldr	r1, [r4, #0]
 800b5fe:	3503      	adds	r5, #3
 800b600:	1a6d      	subs	r5, r5, r1
 800b602:	f025 0503 	bic.w	r5, r5, #3
 800b606:	3508      	adds	r5, #8
 800b608:	2d0c      	cmp	r5, #12
 800b60a:	bf38      	it	cc
 800b60c:	250c      	movcc	r5, #12
 800b60e:	4629      	mov	r1, r5
 800b610:	4638      	mov	r0, r7
 800b612:	f7ff ffa5 	bl	800b560 <sbrk_aligned>
 800b616:	3001      	adds	r0, #1
 800b618:	d02b      	beq.n	800b672 <_malloc_r+0xd2>
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	442b      	add	r3, r5
 800b61e:	6023      	str	r3, [r4, #0]
 800b620:	e00e      	b.n	800b640 <_malloc_r+0xa0>
 800b622:	6822      	ldr	r2, [r4, #0]
 800b624:	1b52      	subs	r2, r2, r5
 800b626:	d41e      	bmi.n	800b666 <_malloc_r+0xc6>
 800b628:	2a0b      	cmp	r2, #11
 800b62a:	d916      	bls.n	800b65a <_malloc_r+0xba>
 800b62c:	1961      	adds	r1, r4, r5
 800b62e:	42a3      	cmp	r3, r4
 800b630:	6025      	str	r5, [r4, #0]
 800b632:	bf18      	it	ne
 800b634:	6059      	strne	r1, [r3, #4]
 800b636:	6863      	ldr	r3, [r4, #4]
 800b638:	bf08      	it	eq
 800b63a:	6031      	streq	r1, [r6, #0]
 800b63c:	5162      	str	r2, [r4, r5]
 800b63e:	604b      	str	r3, [r1, #4]
 800b640:	4638      	mov	r0, r7
 800b642:	f104 060b 	add.w	r6, r4, #11
 800b646:	f000 f9ed 	bl	800ba24 <__malloc_unlock>
 800b64a:	f026 0607 	bic.w	r6, r6, #7
 800b64e:	1d23      	adds	r3, r4, #4
 800b650:	1af2      	subs	r2, r6, r3
 800b652:	d0b6      	beq.n	800b5c2 <_malloc_r+0x22>
 800b654:	1b9b      	subs	r3, r3, r6
 800b656:	50a3      	str	r3, [r4, r2]
 800b658:	e7b3      	b.n	800b5c2 <_malloc_r+0x22>
 800b65a:	6862      	ldr	r2, [r4, #4]
 800b65c:	42a3      	cmp	r3, r4
 800b65e:	bf0c      	ite	eq
 800b660:	6032      	streq	r2, [r6, #0]
 800b662:	605a      	strne	r2, [r3, #4]
 800b664:	e7ec      	b.n	800b640 <_malloc_r+0xa0>
 800b666:	4623      	mov	r3, r4
 800b668:	6864      	ldr	r4, [r4, #4]
 800b66a:	e7b2      	b.n	800b5d2 <_malloc_r+0x32>
 800b66c:	4634      	mov	r4, r6
 800b66e:	6876      	ldr	r6, [r6, #4]
 800b670:	e7b9      	b.n	800b5e6 <_malloc_r+0x46>
 800b672:	230c      	movs	r3, #12
 800b674:	603b      	str	r3, [r7, #0]
 800b676:	4638      	mov	r0, r7
 800b678:	f000 f9d4 	bl	800ba24 <__malloc_unlock>
 800b67c:	e7a1      	b.n	800b5c2 <_malloc_r+0x22>
 800b67e:	6025      	str	r5, [r4, #0]
 800b680:	e7de      	b.n	800b640 <_malloc_r+0xa0>
 800b682:	bf00      	nop
 800b684:	20000650 	.word	0x20000650

0800b688 <__ssputs_r>:
 800b688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b68c:	688e      	ldr	r6, [r1, #8]
 800b68e:	429e      	cmp	r6, r3
 800b690:	4682      	mov	sl, r0
 800b692:	460c      	mov	r4, r1
 800b694:	4690      	mov	r8, r2
 800b696:	461f      	mov	r7, r3
 800b698:	d838      	bhi.n	800b70c <__ssputs_r+0x84>
 800b69a:	898a      	ldrh	r2, [r1, #12]
 800b69c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6a0:	d032      	beq.n	800b708 <__ssputs_r+0x80>
 800b6a2:	6825      	ldr	r5, [r4, #0]
 800b6a4:	6909      	ldr	r1, [r1, #16]
 800b6a6:	eba5 0901 	sub.w	r9, r5, r1
 800b6aa:	6965      	ldr	r5, [r4, #20]
 800b6ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	444b      	add	r3, r9
 800b6b8:	106d      	asrs	r5, r5, #1
 800b6ba:	429d      	cmp	r5, r3
 800b6bc:	bf38      	it	cc
 800b6be:	461d      	movcc	r5, r3
 800b6c0:	0553      	lsls	r3, r2, #21
 800b6c2:	d531      	bpl.n	800b728 <__ssputs_r+0xa0>
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	f7ff ff6b 	bl	800b5a0 <_malloc_r>
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	b950      	cbnz	r0, 800b6e4 <__ssputs_r+0x5c>
 800b6ce:	230c      	movs	r3, #12
 800b6d0:	f8ca 3000 	str.w	r3, [sl]
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e4:	6921      	ldr	r1, [r4, #16]
 800b6e6:	464a      	mov	r2, r9
 800b6e8:	f7fe f81a 	bl	8009720 <memcpy>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f6:	81a3      	strh	r3, [r4, #12]
 800b6f8:	6126      	str	r6, [r4, #16]
 800b6fa:	6165      	str	r5, [r4, #20]
 800b6fc:	444e      	add	r6, r9
 800b6fe:	eba5 0509 	sub.w	r5, r5, r9
 800b702:	6026      	str	r6, [r4, #0]
 800b704:	60a5      	str	r5, [r4, #8]
 800b706:	463e      	mov	r6, r7
 800b708:	42be      	cmp	r6, r7
 800b70a:	d900      	bls.n	800b70e <__ssputs_r+0x86>
 800b70c:	463e      	mov	r6, r7
 800b70e:	6820      	ldr	r0, [r4, #0]
 800b710:	4632      	mov	r2, r6
 800b712:	4641      	mov	r1, r8
 800b714:	f000 f966 	bl	800b9e4 <memmove>
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	1b9b      	subs	r3, r3, r6
 800b71c:	60a3      	str	r3, [r4, #8]
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	4433      	add	r3, r6
 800b722:	6023      	str	r3, [r4, #0]
 800b724:	2000      	movs	r0, #0
 800b726:	e7db      	b.n	800b6e0 <__ssputs_r+0x58>
 800b728:	462a      	mov	r2, r5
 800b72a:	f000 f981 	bl	800ba30 <_realloc_r>
 800b72e:	4606      	mov	r6, r0
 800b730:	2800      	cmp	r0, #0
 800b732:	d1e1      	bne.n	800b6f8 <__ssputs_r+0x70>
 800b734:	6921      	ldr	r1, [r4, #16]
 800b736:	4650      	mov	r0, sl
 800b738:	f7ff fec6 	bl	800b4c8 <_free_r>
 800b73c:	e7c7      	b.n	800b6ce <__ssputs_r+0x46>
	...

0800b740 <_svfiprintf_r>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	4698      	mov	r8, r3
 800b746:	898b      	ldrh	r3, [r1, #12]
 800b748:	061b      	lsls	r3, r3, #24
 800b74a:	b09d      	sub	sp, #116	; 0x74
 800b74c:	4607      	mov	r7, r0
 800b74e:	460d      	mov	r5, r1
 800b750:	4614      	mov	r4, r2
 800b752:	d50e      	bpl.n	800b772 <_svfiprintf_r+0x32>
 800b754:	690b      	ldr	r3, [r1, #16]
 800b756:	b963      	cbnz	r3, 800b772 <_svfiprintf_r+0x32>
 800b758:	2140      	movs	r1, #64	; 0x40
 800b75a:	f7ff ff21 	bl	800b5a0 <_malloc_r>
 800b75e:	6028      	str	r0, [r5, #0]
 800b760:	6128      	str	r0, [r5, #16]
 800b762:	b920      	cbnz	r0, 800b76e <_svfiprintf_r+0x2e>
 800b764:	230c      	movs	r3, #12
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b76c:	e0d1      	b.n	800b912 <_svfiprintf_r+0x1d2>
 800b76e:	2340      	movs	r3, #64	; 0x40
 800b770:	616b      	str	r3, [r5, #20]
 800b772:	2300      	movs	r3, #0
 800b774:	9309      	str	r3, [sp, #36]	; 0x24
 800b776:	2320      	movs	r3, #32
 800b778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b77c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b780:	2330      	movs	r3, #48	; 0x30
 800b782:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b92c <_svfiprintf_r+0x1ec>
 800b786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b78a:	f04f 0901 	mov.w	r9, #1
 800b78e:	4623      	mov	r3, r4
 800b790:	469a      	mov	sl, r3
 800b792:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b796:	b10a      	cbz	r2, 800b79c <_svfiprintf_r+0x5c>
 800b798:	2a25      	cmp	r2, #37	; 0x25
 800b79a:	d1f9      	bne.n	800b790 <_svfiprintf_r+0x50>
 800b79c:	ebba 0b04 	subs.w	fp, sl, r4
 800b7a0:	d00b      	beq.n	800b7ba <_svfiprintf_r+0x7a>
 800b7a2:	465b      	mov	r3, fp
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f7ff ff6d 	bl	800b688 <__ssputs_r>
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	f000 80aa 	beq.w	800b908 <_svfiprintf_r+0x1c8>
 800b7b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7b6:	445a      	add	r2, fp
 800b7b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 80a2 	beq.w	800b908 <_svfiprintf_r+0x1c8>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ce:	f10a 0a01 	add.w	sl, sl, #1
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	9307      	str	r3, [sp, #28]
 800b7d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7da:	931a      	str	r3, [sp, #104]	; 0x68
 800b7dc:	4654      	mov	r4, sl
 800b7de:	2205      	movs	r2, #5
 800b7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e4:	4851      	ldr	r0, [pc, #324]	; (800b92c <_svfiprintf_r+0x1ec>)
 800b7e6:	f7f4 fd23 	bl	8000230 <memchr>
 800b7ea:	9a04      	ldr	r2, [sp, #16]
 800b7ec:	b9d8      	cbnz	r0, 800b826 <_svfiprintf_r+0xe6>
 800b7ee:	06d0      	lsls	r0, r2, #27
 800b7f0:	bf44      	itt	mi
 800b7f2:	2320      	movmi	r3, #32
 800b7f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f8:	0711      	lsls	r1, r2, #28
 800b7fa:	bf44      	itt	mi
 800b7fc:	232b      	movmi	r3, #43	; 0x2b
 800b7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b802:	f89a 3000 	ldrb.w	r3, [sl]
 800b806:	2b2a      	cmp	r3, #42	; 0x2a
 800b808:	d015      	beq.n	800b836 <_svfiprintf_r+0xf6>
 800b80a:	9a07      	ldr	r2, [sp, #28]
 800b80c:	4654      	mov	r4, sl
 800b80e:	2000      	movs	r0, #0
 800b810:	f04f 0c0a 	mov.w	ip, #10
 800b814:	4621      	mov	r1, r4
 800b816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b81a:	3b30      	subs	r3, #48	; 0x30
 800b81c:	2b09      	cmp	r3, #9
 800b81e:	d94e      	bls.n	800b8be <_svfiprintf_r+0x17e>
 800b820:	b1b0      	cbz	r0, 800b850 <_svfiprintf_r+0x110>
 800b822:	9207      	str	r2, [sp, #28]
 800b824:	e014      	b.n	800b850 <_svfiprintf_r+0x110>
 800b826:	eba0 0308 	sub.w	r3, r0, r8
 800b82a:	fa09 f303 	lsl.w	r3, r9, r3
 800b82e:	4313      	orrs	r3, r2
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	46a2      	mov	sl, r4
 800b834:	e7d2      	b.n	800b7dc <_svfiprintf_r+0x9c>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	1d19      	adds	r1, r3, #4
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	9103      	str	r1, [sp, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	bfbb      	ittet	lt
 800b842:	425b      	neglt	r3, r3
 800b844:	f042 0202 	orrlt.w	r2, r2, #2
 800b848:	9307      	strge	r3, [sp, #28]
 800b84a:	9307      	strlt	r3, [sp, #28]
 800b84c:	bfb8      	it	lt
 800b84e:	9204      	strlt	r2, [sp, #16]
 800b850:	7823      	ldrb	r3, [r4, #0]
 800b852:	2b2e      	cmp	r3, #46	; 0x2e
 800b854:	d10c      	bne.n	800b870 <_svfiprintf_r+0x130>
 800b856:	7863      	ldrb	r3, [r4, #1]
 800b858:	2b2a      	cmp	r3, #42	; 0x2a
 800b85a:	d135      	bne.n	800b8c8 <_svfiprintf_r+0x188>
 800b85c:	9b03      	ldr	r3, [sp, #12]
 800b85e:	1d1a      	adds	r2, r3, #4
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	9203      	str	r2, [sp, #12]
 800b864:	2b00      	cmp	r3, #0
 800b866:	bfb8      	it	lt
 800b868:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b86c:	3402      	adds	r4, #2
 800b86e:	9305      	str	r3, [sp, #20]
 800b870:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b93c <_svfiprintf_r+0x1fc>
 800b874:	7821      	ldrb	r1, [r4, #0]
 800b876:	2203      	movs	r2, #3
 800b878:	4650      	mov	r0, sl
 800b87a:	f7f4 fcd9 	bl	8000230 <memchr>
 800b87e:	b140      	cbz	r0, 800b892 <_svfiprintf_r+0x152>
 800b880:	2340      	movs	r3, #64	; 0x40
 800b882:	eba0 000a 	sub.w	r0, r0, sl
 800b886:	fa03 f000 	lsl.w	r0, r3, r0
 800b88a:	9b04      	ldr	r3, [sp, #16]
 800b88c:	4303      	orrs	r3, r0
 800b88e:	3401      	adds	r4, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b896:	4826      	ldr	r0, [pc, #152]	; (800b930 <_svfiprintf_r+0x1f0>)
 800b898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b89c:	2206      	movs	r2, #6
 800b89e:	f7f4 fcc7 	bl	8000230 <memchr>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d038      	beq.n	800b918 <_svfiprintf_r+0x1d8>
 800b8a6:	4b23      	ldr	r3, [pc, #140]	; (800b934 <_svfiprintf_r+0x1f4>)
 800b8a8:	bb1b      	cbnz	r3, 800b8f2 <_svfiprintf_r+0x1b2>
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	3307      	adds	r3, #7
 800b8ae:	f023 0307 	bic.w	r3, r3, #7
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	9303      	str	r3, [sp, #12]
 800b8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b8:	4433      	add	r3, r6
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	e767      	b.n	800b78e <_svfiprintf_r+0x4e>
 800b8be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	2001      	movs	r0, #1
 800b8c6:	e7a5      	b.n	800b814 <_svfiprintf_r+0xd4>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	3401      	adds	r4, #1
 800b8cc:	9305      	str	r3, [sp, #20]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	f04f 0c0a 	mov.w	ip, #10
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8da:	3a30      	subs	r2, #48	; 0x30
 800b8dc:	2a09      	cmp	r2, #9
 800b8de:	d903      	bls.n	800b8e8 <_svfiprintf_r+0x1a8>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d0c5      	beq.n	800b870 <_svfiprintf_r+0x130>
 800b8e4:	9105      	str	r1, [sp, #20]
 800b8e6:	e7c3      	b.n	800b870 <_svfiprintf_r+0x130>
 800b8e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e7f0      	b.n	800b8d4 <_svfiprintf_r+0x194>
 800b8f2:	ab03      	add	r3, sp, #12
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	462a      	mov	r2, r5
 800b8f8:	4b0f      	ldr	r3, [pc, #60]	; (800b938 <_svfiprintf_r+0x1f8>)
 800b8fa:	a904      	add	r1, sp, #16
 800b8fc:	4638      	mov	r0, r7
 800b8fe:	f7fd ffc5 	bl	800988c <_printf_float>
 800b902:	1c42      	adds	r2, r0, #1
 800b904:	4606      	mov	r6, r0
 800b906:	d1d6      	bne.n	800b8b6 <_svfiprintf_r+0x176>
 800b908:	89ab      	ldrh	r3, [r5, #12]
 800b90a:	065b      	lsls	r3, r3, #25
 800b90c:	f53f af2c 	bmi.w	800b768 <_svfiprintf_r+0x28>
 800b910:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b912:	b01d      	add	sp, #116	; 0x74
 800b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b918:	ab03      	add	r3, sp, #12
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	462a      	mov	r2, r5
 800b91e:	4b06      	ldr	r3, [pc, #24]	; (800b938 <_svfiprintf_r+0x1f8>)
 800b920:	a904      	add	r1, sp, #16
 800b922:	4638      	mov	r0, r7
 800b924:	f7fe fa56 	bl	8009dd4 <_printf_i>
 800b928:	e7eb      	b.n	800b902 <_svfiprintf_r+0x1c2>
 800b92a:	bf00      	nop
 800b92c:	0800c8b4 	.word	0x0800c8b4
 800b930:	0800c8be 	.word	0x0800c8be
 800b934:	0800988d 	.word	0x0800988d
 800b938:	0800b689 	.word	0x0800b689
 800b93c:	0800c8ba 	.word	0x0800c8ba

0800b940 <_sbrk_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d06      	ldr	r5, [pc, #24]	; (800b95c <_sbrk_r+0x1c>)
 800b944:	2300      	movs	r3, #0
 800b946:	4604      	mov	r4, r0
 800b948:	4608      	mov	r0, r1
 800b94a:	602b      	str	r3, [r5, #0]
 800b94c:	f7f6 ff50 	bl	80027f0 <_sbrk>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_sbrk_r+0x1a>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	b103      	cbz	r3, 800b95a <_sbrk_r+0x1a>
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	20000658 	.word	0x20000658

0800b960 <__assert_func>:
 800b960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b962:	4614      	mov	r4, r2
 800b964:	461a      	mov	r2, r3
 800b966:	4b09      	ldr	r3, [pc, #36]	; (800b98c <__assert_func+0x2c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4605      	mov	r5, r0
 800b96c:	68d8      	ldr	r0, [r3, #12]
 800b96e:	b14c      	cbz	r4, 800b984 <__assert_func+0x24>
 800b970:	4b07      	ldr	r3, [pc, #28]	; (800b990 <__assert_func+0x30>)
 800b972:	9100      	str	r1, [sp, #0]
 800b974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b978:	4906      	ldr	r1, [pc, #24]	; (800b994 <__assert_func+0x34>)
 800b97a:	462b      	mov	r3, r5
 800b97c:	f000 f80e 	bl	800b99c <fiprintf>
 800b980:	f000 faac 	bl	800bedc <abort>
 800b984:	4b04      	ldr	r3, [pc, #16]	; (800b998 <__assert_func+0x38>)
 800b986:	461c      	mov	r4, r3
 800b988:	e7f3      	b.n	800b972 <__assert_func+0x12>
 800b98a:	bf00      	nop
 800b98c:	200000ec 	.word	0x200000ec
 800b990:	0800c8c5 	.word	0x0800c8c5
 800b994:	0800c8d2 	.word	0x0800c8d2
 800b998:	0800c900 	.word	0x0800c900

0800b99c <fiprintf>:
 800b99c:	b40e      	push	{r1, r2, r3}
 800b99e:	b503      	push	{r0, r1, lr}
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	ab03      	add	r3, sp, #12
 800b9a4:	4805      	ldr	r0, [pc, #20]	; (800b9bc <fiprintf+0x20>)
 800b9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9aa:	6800      	ldr	r0, [r0, #0]
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	f000 f897 	bl	800bae0 <_vfiprintf_r>
 800b9b2:	b002      	add	sp, #8
 800b9b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9b8:	b003      	add	sp, #12
 800b9ba:	4770      	bx	lr
 800b9bc:	200000ec 	.word	0x200000ec

0800b9c0 <__ascii_mbtowc>:
 800b9c0:	b082      	sub	sp, #8
 800b9c2:	b901      	cbnz	r1, 800b9c6 <__ascii_mbtowc+0x6>
 800b9c4:	a901      	add	r1, sp, #4
 800b9c6:	b142      	cbz	r2, 800b9da <__ascii_mbtowc+0x1a>
 800b9c8:	b14b      	cbz	r3, 800b9de <__ascii_mbtowc+0x1e>
 800b9ca:	7813      	ldrb	r3, [r2, #0]
 800b9cc:	600b      	str	r3, [r1, #0]
 800b9ce:	7812      	ldrb	r2, [r2, #0]
 800b9d0:	1e10      	subs	r0, r2, #0
 800b9d2:	bf18      	it	ne
 800b9d4:	2001      	movne	r0, #1
 800b9d6:	b002      	add	sp, #8
 800b9d8:	4770      	bx	lr
 800b9da:	4610      	mov	r0, r2
 800b9dc:	e7fb      	b.n	800b9d6 <__ascii_mbtowc+0x16>
 800b9de:	f06f 0001 	mvn.w	r0, #1
 800b9e2:	e7f8      	b.n	800b9d6 <__ascii_mbtowc+0x16>

0800b9e4 <memmove>:
 800b9e4:	4288      	cmp	r0, r1
 800b9e6:	b510      	push	{r4, lr}
 800b9e8:	eb01 0402 	add.w	r4, r1, r2
 800b9ec:	d902      	bls.n	800b9f4 <memmove+0x10>
 800b9ee:	4284      	cmp	r4, r0
 800b9f0:	4623      	mov	r3, r4
 800b9f2:	d807      	bhi.n	800ba04 <memmove+0x20>
 800b9f4:	1e43      	subs	r3, r0, #1
 800b9f6:	42a1      	cmp	r1, r4
 800b9f8:	d008      	beq.n	800ba0c <memmove+0x28>
 800b9fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba02:	e7f8      	b.n	800b9f6 <memmove+0x12>
 800ba04:	4402      	add	r2, r0
 800ba06:	4601      	mov	r1, r0
 800ba08:	428a      	cmp	r2, r1
 800ba0a:	d100      	bne.n	800ba0e <memmove+0x2a>
 800ba0c:	bd10      	pop	{r4, pc}
 800ba0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba16:	e7f7      	b.n	800ba08 <memmove+0x24>

0800ba18 <__malloc_lock>:
 800ba18:	4801      	ldr	r0, [pc, #4]	; (800ba20 <__malloc_lock+0x8>)
 800ba1a:	f000 bc1f 	b.w	800c25c <__retarget_lock_acquire_recursive>
 800ba1e:	bf00      	nop
 800ba20:	2000065c 	.word	0x2000065c

0800ba24 <__malloc_unlock>:
 800ba24:	4801      	ldr	r0, [pc, #4]	; (800ba2c <__malloc_unlock+0x8>)
 800ba26:	f000 bc1a 	b.w	800c25e <__retarget_lock_release_recursive>
 800ba2a:	bf00      	nop
 800ba2c:	2000065c 	.word	0x2000065c

0800ba30 <_realloc_r>:
 800ba30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba34:	4680      	mov	r8, r0
 800ba36:	4614      	mov	r4, r2
 800ba38:	460e      	mov	r6, r1
 800ba3a:	b921      	cbnz	r1, 800ba46 <_realloc_r+0x16>
 800ba3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba40:	4611      	mov	r1, r2
 800ba42:	f7ff bdad 	b.w	800b5a0 <_malloc_r>
 800ba46:	b92a      	cbnz	r2, 800ba54 <_realloc_r+0x24>
 800ba48:	f7ff fd3e 	bl	800b4c8 <_free_r>
 800ba4c:	4625      	mov	r5, r4
 800ba4e:	4628      	mov	r0, r5
 800ba50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba54:	f000 fc6a 	bl	800c32c <_malloc_usable_size_r>
 800ba58:	4284      	cmp	r4, r0
 800ba5a:	4607      	mov	r7, r0
 800ba5c:	d802      	bhi.n	800ba64 <_realloc_r+0x34>
 800ba5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba62:	d812      	bhi.n	800ba8a <_realloc_r+0x5a>
 800ba64:	4621      	mov	r1, r4
 800ba66:	4640      	mov	r0, r8
 800ba68:	f7ff fd9a 	bl	800b5a0 <_malloc_r>
 800ba6c:	4605      	mov	r5, r0
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d0ed      	beq.n	800ba4e <_realloc_r+0x1e>
 800ba72:	42bc      	cmp	r4, r7
 800ba74:	4622      	mov	r2, r4
 800ba76:	4631      	mov	r1, r6
 800ba78:	bf28      	it	cs
 800ba7a:	463a      	movcs	r2, r7
 800ba7c:	f7fd fe50 	bl	8009720 <memcpy>
 800ba80:	4631      	mov	r1, r6
 800ba82:	4640      	mov	r0, r8
 800ba84:	f7ff fd20 	bl	800b4c8 <_free_r>
 800ba88:	e7e1      	b.n	800ba4e <_realloc_r+0x1e>
 800ba8a:	4635      	mov	r5, r6
 800ba8c:	e7df      	b.n	800ba4e <_realloc_r+0x1e>

0800ba8e <__sfputc_r>:
 800ba8e:	6893      	ldr	r3, [r2, #8]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	b410      	push	{r4}
 800ba96:	6093      	str	r3, [r2, #8]
 800ba98:	da08      	bge.n	800baac <__sfputc_r+0x1e>
 800ba9a:	6994      	ldr	r4, [r2, #24]
 800ba9c:	42a3      	cmp	r3, r4
 800ba9e:	db01      	blt.n	800baa4 <__sfputc_r+0x16>
 800baa0:	290a      	cmp	r1, #10
 800baa2:	d103      	bne.n	800baac <__sfputc_r+0x1e>
 800baa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa8:	f000 b94a 	b.w	800bd40 <__swbuf_r>
 800baac:	6813      	ldr	r3, [r2, #0]
 800baae:	1c58      	adds	r0, r3, #1
 800bab0:	6010      	str	r0, [r2, #0]
 800bab2:	7019      	strb	r1, [r3, #0]
 800bab4:	4608      	mov	r0, r1
 800bab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baba:	4770      	bx	lr

0800babc <__sfputs_r>:
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babe:	4606      	mov	r6, r0
 800bac0:	460f      	mov	r7, r1
 800bac2:	4614      	mov	r4, r2
 800bac4:	18d5      	adds	r5, r2, r3
 800bac6:	42ac      	cmp	r4, r5
 800bac8:	d101      	bne.n	800bace <__sfputs_r+0x12>
 800baca:	2000      	movs	r0, #0
 800bacc:	e007      	b.n	800bade <__sfputs_r+0x22>
 800bace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad2:	463a      	mov	r2, r7
 800bad4:	4630      	mov	r0, r6
 800bad6:	f7ff ffda 	bl	800ba8e <__sfputc_r>
 800bada:	1c43      	adds	r3, r0, #1
 800badc:	d1f3      	bne.n	800bac6 <__sfputs_r+0xa>
 800bade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bae0 <_vfiprintf_r>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	460d      	mov	r5, r1
 800bae6:	b09d      	sub	sp, #116	; 0x74
 800bae8:	4614      	mov	r4, r2
 800baea:	4698      	mov	r8, r3
 800baec:	4606      	mov	r6, r0
 800baee:	b118      	cbz	r0, 800baf8 <_vfiprintf_r+0x18>
 800baf0:	6983      	ldr	r3, [r0, #24]
 800baf2:	b90b      	cbnz	r3, 800baf8 <_vfiprintf_r+0x18>
 800baf4:	f000 fb14 	bl	800c120 <__sinit>
 800baf8:	4b89      	ldr	r3, [pc, #548]	; (800bd20 <_vfiprintf_r+0x240>)
 800bafa:	429d      	cmp	r5, r3
 800bafc:	d11b      	bne.n	800bb36 <_vfiprintf_r+0x56>
 800bafe:	6875      	ldr	r5, [r6, #4]
 800bb00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb02:	07d9      	lsls	r1, r3, #31
 800bb04:	d405      	bmi.n	800bb12 <_vfiprintf_r+0x32>
 800bb06:	89ab      	ldrh	r3, [r5, #12]
 800bb08:	059a      	lsls	r2, r3, #22
 800bb0a:	d402      	bmi.n	800bb12 <_vfiprintf_r+0x32>
 800bb0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb0e:	f000 fba5 	bl	800c25c <__retarget_lock_acquire_recursive>
 800bb12:	89ab      	ldrh	r3, [r5, #12]
 800bb14:	071b      	lsls	r3, r3, #28
 800bb16:	d501      	bpl.n	800bb1c <_vfiprintf_r+0x3c>
 800bb18:	692b      	ldr	r3, [r5, #16]
 800bb1a:	b9eb      	cbnz	r3, 800bb58 <_vfiprintf_r+0x78>
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	4630      	mov	r0, r6
 800bb20:	f000 f96e 	bl	800be00 <__swsetup_r>
 800bb24:	b1c0      	cbz	r0, 800bb58 <_vfiprintf_r+0x78>
 800bb26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb28:	07dc      	lsls	r4, r3, #31
 800bb2a:	d50e      	bpl.n	800bb4a <_vfiprintf_r+0x6a>
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb30:	b01d      	add	sp, #116	; 0x74
 800bb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb36:	4b7b      	ldr	r3, [pc, #492]	; (800bd24 <_vfiprintf_r+0x244>)
 800bb38:	429d      	cmp	r5, r3
 800bb3a:	d101      	bne.n	800bb40 <_vfiprintf_r+0x60>
 800bb3c:	68b5      	ldr	r5, [r6, #8]
 800bb3e:	e7df      	b.n	800bb00 <_vfiprintf_r+0x20>
 800bb40:	4b79      	ldr	r3, [pc, #484]	; (800bd28 <_vfiprintf_r+0x248>)
 800bb42:	429d      	cmp	r5, r3
 800bb44:	bf08      	it	eq
 800bb46:	68f5      	ldreq	r5, [r6, #12]
 800bb48:	e7da      	b.n	800bb00 <_vfiprintf_r+0x20>
 800bb4a:	89ab      	ldrh	r3, [r5, #12]
 800bb4c:	0598      	lsls	r0, r3, #22
 800bb4e:	d4ed      	bmi.n	800bb2c <_vfiprintf_r+0x4c>
 800bb50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb52:	f000 fb84 	bl	800c25e <__retarget_lock_release_recursive>
 800bb56:	e7e9      	b.n	800bb2c <_vfiprintf_r+0x4c>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5c:	2320      	movs	r3, #32
 800bb5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb62:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb66:	2330      	movs	r3, #48	; 0x30
 800bb68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd2c <_vfiprintf_r+0x24c>
 800bb6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb70:	f04f 0901 	mov.w	r9, #1
 800bb74:	4623      	mov	r3, r4
 800bb76:	469a      	mov	sl, r3
 800bb78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb7c:	b10a      	cbz	r2, 800bb82 <_vfiprintf_r+0xa2>
 800bb7e:	2a25      	cmp	r2, #37	; 0x25
 800bb80:	d1f9      	bne.n	800bb76 <_vfiprintf_r+0x96>
 800bb82:	ebba 0b04 	subs.w	fp, sl, r4
 800bb86:	d00b      	beq.n	800bba0 <_vfiprintf_r+0xc0>
 800bb88:	465b      	mov	r3, fp
 800bb8a:	4622      	mov	r2, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4630      	mov	r0, r6
 800bb90:	f7ff ff94 	bl	800babc <__sfputs_r>
 800bb94:	3001      	adds	r0, #1
 800bb96:	f000 80aa 	beq.w	800bcee <_vfiprintf_r+0x20e>
 800bb9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb9c:	445a      	add	r2, fp
 800bb9e:	9209      	str	r2, [sp, #36]	; 0x24
 800bba0:	f89a 3000 	ldrb.w	r3, [sl]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 80a2 	beq.w	800bcee <_vfiprintf_r+0x20e>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbb4:	f10a 0a01 	add.w	sl, sl, #1
 800bbb8:	9304      	str	r3, [sp, #16]
 800bbba:	9307      	str	r3, [sp, #28]
 800bbbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbc0:	931a      	str	r3, [sp, #104]	; 0x68
 800bbc2:	4654      	mov	r4, sl
 800bbc4:	2205      	movs	r2, #5
 800bbc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbca:	4858      	ldr	r0, [pc, #352]	; (800bd2c <_vfiprintf_r+0x24c>)
 800bbcc:	f7f4 fb30 	bl	8000230 <memchr>
 800bbd0:	9a04      	ldr	r2, [sp, #16]
 800bbd2:	b9d8      	cbnz	r0, 800bc0c <_vfiprintf_r+0x12c>
 800bbd4:	06d1      	lsls	r1, r2, #27
 800bbd6:	bf44      	itt	mi
 800bbd8:	2320      	movmi	r3, #32
 800bbda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbde:	0713      	lsls	r3, r2, #28
 800bbe0:	bf44      	itt	mi
 800bbe2:	232b      	movmi	r3, #43	; 0x2b
 800bbe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbe8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbec:	2b2a      	cmp	r3, #42	; 0x2a
 800bbee:	d015      	beq.n	800bc1c <_vfiprintf_r+0x13c>
 800bbf0:	9a07      	ldr	r2, [sp, #28]
 800bbf2:	4654      	mov	r4, sl
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	f04f 0c0a 	mov.w	ip, #10
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc00:	3b30      	subs	r3, #48	; 0x30
 800bc02:	2b09      	cmp	r3, #9
 800bc04:	d94e      	bls.n	800bca4 <_vfiprintf_r+0x1c4>
 800bc06:	b1b0      	cbz	r0, 800bc36 <_vfiprintf_r+0x156>
 800bc08:	9207      	str	r2, [sp, #28]
 800bc0a:	e014      	b.n	800bc36 <_vfiprintf_r+0x156>
 800bc0c:	eba0 0308 	sub.w	r3, r0, r8
 800bc10:	fa09 f303 	lsl.w	r3, r9, r3
 800bc14:	4313      	orrs	r3, r2
 800bc16:	9304      	str	r3, [sp, #16]
 800bc18:	46a2      	mov	sl, r4
 800bc1a:	e7d2      	b.n	800bbc2 <_vfiprintf_r+0xe2>
 800bc1c:	9b03      	ldr	r3, [sp, #12]
 800bc1e:	1d19      	adds	r1, r3, #4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	9103      	str	r1, [sp, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	bfbb      	ittet	lt
 800bc28:	425b      	neglt	r3, r3
 800bc2a:	f042 0202 	orrlt.w	r2, r2, #2
 800bc2e:	9307      	strge	r3, [sp, #28]
 800bc30:	9307      	strlt	r3, [sp, #28]
 800bc32:	bfb8      	it	lt
 800bc34:	9204      	strlt	r2, [sp, #16]
 800bc36:	7823      	ldrb	r3, [r4, #0]
 800bc38:	2b2e      	cmp	r3, #46	; 0x2e
 800bc3a:	d10c      	bne.n	800bc56 <_vfiprintf_r+0x176>
 800bc3c:	7863      	ldrb	r3, [r4, #1]
 800bc3e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc40:	d135      	bne.n	800bcae <_vfiprintf_r+0x1ce>
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	1d1a      	adds	r2, r3, #4
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	9203      	str	r2, [sp, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	bfb8      	it	lt
 800bc4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc52:	3402      	adds	r4, #2
 800bc54:	9305      	str	r3, [sp, #20]
 800bc56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd3c <_vfiprintf_r+0x25c>
 800bc5a:	7821      	ldrb	r1, [r4, #0]
 800bc5c:	2203      	movs	r2, #3
 800bc5e:	4650      	mov	r0, sl
 800bc60:	f7f4 fae6 	bl	8000230 <memchr>
 800bc64:	b140      	cbz	r0, 800bc78 <_vfiprintf_r+0x198>
 800bc66:	2340      	movs	r3, #64	; 0x40
 800bc68:	eba0 000a 	sub.w	r0, r0, sl
 800bc6c:	fa03 f000 	lsl.w	r0, r3, r0
 800bc70:	9b04      	ldr	r3, [sp, #16]
 800bc72:	4303      	orrs	r3, r0
 800bc74:	3401      	adds	r4, #1
 800bc76:	9304      	str	r3, [sp, #16]
 800bc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc7c:	482c      	ldr	r0, [pc, #176]	; (800bd30 <_vfiprintf_r+0x250>)
 800bc7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc82:	2206      	movs	r2, #6
 800bc84:	f7f4 fad4 	bl	8000230 <memchr>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d03f      	beq.n	800bd0c <_vfiprintf_r+0x22c>
 800bc8c:	4b29      	ldr	r3, [pc, #164]	; (800bd34 <_vfiprintf_r+0x254>)
 800bc8e:	bb1b      	cbnz	r3, 800bcd8 <_vfiprintf_r+0x1f8>
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	3307      	adds	r3, #7
 800bc94:	f023 0307 	bic.w	r3, r3, #7
 800bc98:	3308      	adds	r3, #8
 800bc9a:	9303      	str	r3, [sp, #12]
 800bc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc9e:	443b      	add	r3, r7
 800bca0:	9309      	str	r3, [sp, #36]	; 0x24
 800bca2:	e767      	b.n	800bb74 <_vfiprintf_r+0x94>
 800bca4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bca8:	460c      	mov	r4, r1
 800bcaa:	2001      	movs	r0, #1
 800bcac:	e7a5      	b.n	800bbfa <_vfiprintf_r+0x11a>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	3401      	adds	r4, #1
 800bcb2:	9305      	str	r3, [sp, #20]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	f04f 0c0a 	mov.w	ip, #10
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcc0:	3a30      	subs	r2, #48	; 0x30
 800bcc2:	2a09      	cmp	r2, #9
 800bcc4:	d903      	bls.n	800bcce <_vfiprintf_r+0x1ee>
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d0c5      	beq.n	800bc56 <_vfiprintf_r+0x176>
 800bcca:	9105      	str	r1, [sp, #20]
 800bccc:	e7c3      	b.n	800bc56 <_vfiprintf_r+0x176>
 800bcce:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e7f0      	b.n	800bcba <_vfiprintf_r+0x1da>
 800bcd8:	ab03      	add	r3, sp, #12
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	462a      	mov	r2, r5
 800bcde:	4b16      	ldr	r3, [pc, #88]	; (800bd38 <_vfiprintf_r+0x258>)
 800bce0:	a904      	add	r1, sp, #16
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7fd fdd2 	bl	800988c <_printf_float>
 800bce8:	4607      	mov	r7, r0
 800bcea:	1c78      	adds	r0, r7, #1
 800bcec:	d1d6      	bne.n	800bc9c <_vfiprintf_r+0x1bc>
 800bcee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf0:	07d9      	lsls	r1, r3, #31
 800bcf2:	d405      	bmi.n	800bd00 <_vfiprintf_r+0x220>
 800bcf4:	89ab      	ldrh	r3, [r5, #12]
 800bcf6:	059a      	lsls	r2, r3, #22
 800bcf8:	d402      	bmi.n	800bd00 <_vfiprintf_r+0x220>
 800bcfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcfc:	f000 faaf 	bl	800c25e <__retarget_lock_release_recursive>
 800bd00:	89ab      	ldrh	r3, [r5, #12]
 800bd02:	065b      	lsls	r3, r3, #25
 800bd04:	f53f af12 	bmi.w	800bb2c <_vfiprintf_r+0x4c>
 800bd08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd0a:	e711      	b.n	800bb30 <_vfiprintf_r+0x50>
 800bd0c:	ab03      	add	r3, sp, #12
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	462a      	mov	r2, r5
 800bd12:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <_vfiprintf_r+0x258>)
 800bd14:	a904      	add	r1, sp, #16
 800bd16:	4630      	mov	r0, r6
 800bd18:	f7fe f85c 	bl	8009dd4 <_printf_i>
 800bd1c:	e7e4      	b.n	800bce8 <_vfiprintf_r+0x208>
 800bd1e:	bf00      	nop
 800bd20:	0800ca2c 	.word	0x0800ca2c
 800bd24:	0800ca4c 	.word	0x0800ca4c
 800bd28:	0800ca0c 	.word	0x0800ca0c
 800bd2c:	0800c8b4 	.word	0x0800c8b4
 800bd30:	0800c8be 	.word	0x0800c8be
 800bd34:	0800988d 	.word	0x0800988d
 800bd38:	0800babd 	.word	0x0800babd
 800bd3c:	0800c8ba 	.word	0x0800c8ba

0800bd40 <__swbuf_r>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	460e      	mov	r6, r1
 800bd44:	4614      	mov	r4, r2
 800bd46:	4605      	mov	r5, r0
 800bd48:	b118      	cbz	r0, 800bd52 <__swbuf_r+0x12>
 800bd4a:	6983      	ldr	r3, [r0, #24]
 800bd4c:	b90b      	cbnz	r3, 800bd52 <__swbuf_r+0x12>
 800bd4e:	f000 f9e7 	bl	800c120 <__sinit>
 800bd52:	4b21      	ldr	r3, [pc, #132]	; (800bdd8 <__swbuf_r+0x98>)
 800bd54:	429c      	cmp	r4, r3
 800bd56:	d12b      	bne.n	800bdb0 <__swbuf_r+0x70>
 800bd58:	686c      	ldr	r4, [r5, #4]
 800bd5a:	69a3      	ldr	r3, [r4, #24]
 800bd5c:	60a3      	str	r3, [r4, #8]
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	071a      	lsls	r2, r3, #28
 800bd62:	d52f      	bpl.n	800bdc4 <__swbuf_r+0x84>
 800bd64:	6923      	ldr	r3, [r4, #16]
 800bd66:	b36b      	cbz	r3, 800bdc4 <__swbuf_r+0x84>
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	6820      	ldr	r0, [r4, #0]
 800bd6c:	1ac0      	subs	r0, r0, r3
 800bd6e:	6963      	ldr	r3, [r4, #20]
 800bd70:	b2f6      	uxtb	r6, r6
 800bd72:	4283      	cmp	r3, r0
 800bd74:	4637      	mov	r7, r6
 800bd76:	dc04      	bgt.n	800bd82 <__swbuf_r+0x42>
 800bd78:	4621      	mov	r1, r4
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f000 f93c 	bl	800bff8 <_fflush_r>
 800bd80:	bb30      	cbnz	r0, 800bdd0 <__swbuf_r+0x90>
 800bd82:	68a3      	ldr	r3, [r4, #8]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	60a3      	str	r3, [r4, #8]
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	1c5a      	adds	r2, r3, #1
 800bd8c:	6022      	str	r2, [r4, #0]
 800bd8e:	701e      	strb	r6, [r3, #0]
 800bd90:	6963      	ldr	r3, [r4, #20]
 800bd92:	3001      	adds	r0, #1
 800bd94:	4283      	cmp	r3, r0
 800bd96:	d004      	beq.n	800bda2 <__swbuf_r+0x62>
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	07db      	lsls	r3, r3, #31
 800bd9c:	d506      	bpl.n	800bdac <__swbuf_r+0x6c>
 800bd9e:	2e0a      	cmp	r6, #10
 800bda0:	d104      	bne.n	800bdac <__swbuf_r+0x6c>
 800bda2:	4621      	mov	r1, r4
 800bda4:	4628      	mov	r0, r5
 800bda6:	f000 f927 	bl	800bff8 <_fflush_r>
 800bdaa:	b988      	cbnz	r0, 800bdd0 <__swbuf_r+0x90>
 800bdac:	4638      	mov	r0, r7
 800bdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb0:	4b0a      	ldr	r3, [pc, #40]	; (800bddc <__swbuf_r+0x9c>)
 800bdb2:	429c      	cmp	r4, r3
 800bdb4:	d101      	bne.n	800bdba <__swbuf_r+0x7a>
 800bdb6:	68ac      	ldr	r4, [r5, #8]
 800bdb8:	e7cf      	b.n	800bd5a <__swbuf_r+0x1a>
 800bdba:	4b09      	ldr	r3, [pc, #36]	; (800bde0 <__swbuf_r+0xa0>)
 800bdbc:	429c      	cmp	r4, r3
 800bdbe:	bf08      	it	eq
 800bdc0:	68ec      	ldreq	r4, [r5, #12]
 800bdc2:	e7ca      	b.n	800bd5a <__swbuf_r+0x1a>
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	f000 f81a 	bl	800be00 <__swsetup_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d0cb      	beq.n	800bd68 <__swbuf_r+0x28>
 800bdd0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bdd4:	e7ea      	b.n	800bdac <__swbuf_r+0x6c>
 800bdd6:	bf00      	nop
 800bdd8:	0800ca2c 	.word	0x0800ca2c
 800bddc:	0800ca4c 	.word	0x0800ca4c
 800bde0:	0800ca0c 	.word	0x0800ca0c

0800bde4 <__ascii_wctomb>:
 800bde4:	b149      	cbz	r1, 800bdfa <__ascii_wctomb+0x16>
 800bde6:	2aff      	cmp	r2, #255	; 0xff
 800bde8:	bf85      	ittet	hi
 800bdea:	238a      	movhi	r3, #138	; 0x8a
 800bdec:	6003      	strhi	r3, [r0, #0]
 800bdee:	700a      	strbls	r2, [r1, #0]
 800bdf0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bdf4:	bf98      	it	ls
 800bdf6:	2001      	movls	r0, #1
 800bdf8:	4770      	bx	lr
 800bdfa:	4608      	mov	r0, r1
 800bdfc:	4770      	bx	lr
	...

0800be00 <__swsetup_r>:
 800be00:	4b32      	ldr	r3, [pc, #200]	; (800becc <__swsetup_r+0xcc>)
 800be02:	b570      	push	{r4, r5, r6, lr}
 800be04:	681d      	ldr	r5, [r3, #0]
 800be06:	4606      	mov	r6, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	b125      	cbz	r5, 800be16 <__swsetup_r+0x16>
 800be0c:	69ab      	ldr	r3, [r5, #24]
 800be0e:	b913      	cbnz	r3, 800be16 <__swsetup_r+0x16>
 800be10:	4628      	mov	r0, r5
 800be12:	f000 f985 	bl	800c120 <__sinit>
 800be16:	4b2e      	ldr	r3, [pc, #184]	; (800bed0 <__swsetup_r+0xd0>)
 800be18:	429c      	cmp	r4, r3
 800be1a:	d10f      	bne.n	800be3c <__swsetup_r+0x3c>
 800be1c:	686c      	ldr	r4, [r5, #4]
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be24:	0719      	lsls	r1, r3, #28
 800be26:	d42c      	bmi.n	800be82 <__swsetup_r+0x82>
 800be28:	06dd      	lsls	r5, r3, #27
 800be2a:	d411      	bmi.n	800be50 <__swsetup_r+0x50>
 800be2c:	2309      	movs	r3, #9
 800be2e:	6033      	str	r3, [r6, #0]
 800be30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be34:	81a3      	strh	r3, [r4, #12]
 800be36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be3a:	e03e      	b.n	800beba <__swsetup_r+0xba>
 800be3c:	4b25      	ldr	r3, [pc, #148]	; (800bed4 <__swsetup_r+0xd4>)
 800be3e:	429c      	cmp	r4, r3
 800be40:	d101      	bne.n	800be46 <__swsetup_r+0x46>
 800be42:	68ac      	ldr	r4, [r5, #8]
 800be44:	e7eb      	b.n	800be1e <__swsetup_r+0x1e>
 800be46:	4b24      	ldr	r3, [pc, #144]	; (800bed8 <__swsetup_r+0xd8>)
 800be48:	429c      	cmp	r4, r3
 800be4a:	bf08      	it	eq
 800be4c:	68ec      	ldreq	r4, [r5, #12]
 800be4e:	e7e6      	b.n	800be1e <__swsetup_r+0x1e>
 800be50:	0758      	lsls	r0, r3, #29
 800be52:	d512      	bpl.n	800be7a <__swsetup_r+0x7a>
 800be54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be56:	b141      	cbz	r1, 800be6a <__swsetup_r+0x6a>
 800be58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be5c:	4299      	cmp	r1, r3
 800be5e:	d002      	beq.n	800be66 <__swsetup_r+0x66>
 800be60:	4630      	mov	r0, r6
 800be62:	f7ff fb31 	bl	800b4c8 <_free_r>
 800be66:	2300      	movs	r3, #0
 800be68:	6363      	str	r3, [r4, #52]	; 0x34
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be70:	81a3      	strh	r3, [r4, #12]
 800be72:	2300      	movs	r3, #0
 800be74:	6063      	str	r3, [r4, #4]
 800be76:	6923      	ldr	r3, [r4, #16]
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	89a3      	ldrh	r3, [r4, #12]
 800be7c:	f043 0308 	orr.w	r3, r3, #8
 800be80:	81a3      	strh	r3, [r4, #12]
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	b94b      	cbnz	r3, 800be9a <__swsetup_r+0x9a>
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be90:	d003      	beq.n	800be9a <__swsetup_r+0x9a>
 800be92:	4621      	mov	r1, r4
 800be94:	4630      	mov	r0, r6
 800be96:	f000 fa09 	bl	800c2ac <__smakebuf_r>
 800be9a:	89a0      	ldrh	r0, [r4, #12]
 800be9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bea0:	f010 0301 	ands.w	r3, r0, #1
 800bea4:	d00a      	beq.n	800bebc <__swsetup_r+0xbc>
 800bea6:	2300      	movs	r3, #0
 800bea8:	60a3      	str	r3, [r4, #8]
 800beaa:	6963      	ldr	r3, [r4, #20]
 800beac:	425b      	negs	r3, r3
 800beae:	61a3      	str	r3, [r4, #24]
 800beb0:	6923      	ldr	r3, [r4, #16]
 800beb2:	b943      	cbnz	r3, 800bec6 <__swsetup_r+0xc6>
 800beb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800beb8:	d1ba      	bne.n	800be30 <__swsetup_r+0x30>
 800beba:	bd70      	pop	{r4, r5, r6, pc}
 800bebc:	0781      	lsls	r1, r0, #30
 800bebe:	bf58      	it	pl
 800bec0:	6963      	ldrpl	r3, [r4, #20]
 800bec2:	60a3      	str	r3, [r4, #8]
 800bec4:	e7f4      	b.n	800beb0 <__swsetup_r+0xb0>
 800bec6:	2000      	movs	r0, #0
 800bec8:	e7f7      	b.n	800beba <__swsetup_r+0xba>
 800beca:	bf00      	nop
 800becc:	200000ec 	.word	0x200000ec
 800bed0:	0800ca2c 	.word	0x0800ca2c
 800bed4:	0800ca4c 	.word	0x0800ca4c
 800bed8:	0800ca0c 	.word	0x0800ca0c

0800bedc <abort>:
 800bedc:	b508      	push	{r3, lr}
 800bede:	2006      	movs	r0, #6
 800bee0:	f000 fa54 	bl	800c38c <raise>
 800bee4:	2001      	movs	r0, #1
 800bee6:	f7f6 fc0b 	bl	8002700 <_exit>
	...

0800beec <__sflush_r>:
 800beec:	898a      	ldrh	r2, [r1, #12]
 800beee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef2:	4605      	mov	r5, r0
 800bef4:	0710      	lsls	r0, r2, #28
 800bef6:	460c      	mov	r4, r1
 800bef8:	d458      	bmi.n	800bfac <__sflush_r+0xc0>
 800befa:	684b      	ldr	r3, [r1, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	dc05      	bgt.n	800bf0c <__sflush_r+0x20>
 800bf00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	dc02      	bgt.n	800bf0c <__sflush_r+0x20>
 800bf06:	2000      	movs	r0, #0
 800bf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf0e:	2e00      	cmp	r6, #0
 800bf10:	d0f9      	beq.n	800bf06 <__sflush_r+0x1a>
 800bf12:	2300      	movs	r3, #0
 800bf14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf18:	682f      	ldr	r7, [r5, #0]
 800bf1a:	602b      	str	r3, [r5, #0]
 800bf1c:	d032      	beq.n	800bf84 <__sflush_r+0x98>
 800bf1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	075a      	lsls	r2, r3, #29
 800bf24:	d505      	bpl.n	800bf32 <__sflush_r+0x46>
 800bf26:	6863      	ldr	r3, [r4, #4]
 800bf28:	1ac0      	subs	r0, r0, r3
 800bf2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf2c:	b10b      	cbz	r3, 800bf32 <__sflush_r+0x46>
 800bf2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf30:	1ac0      	subs	r0, r0, r3
 800bf32:	2300      	movs	r3, #0
 800bf34:	4602      	mov	r2, r0
 800bf36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf38:	6a21      	ldr	r1, [r4, #32]
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	47b0      	blx	r6
 800bf3e:	1c43      	adds	r3, r0, #1
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	d106      	bne.n	800bf52 <__sflush_r+0x66>
 800bf44:	6829      	ldr	r1, [r5, #0]
 800bf46:	291d      	cmp	r1, #29
 800bf48:	d82c      	bhi.n	800bfa4 <__sflush_r+0xb8>
 800bf4a:	4a2a      	ldr	r2, [pc, #168]	; (800bff4 <__sflush_r+0x108>)
 800bf4c:	40ca      	lsrs	r2, r1
 800bf4e:	07d6      	lsls	r6, r2, #31
 800bf50:	d528      	bpl.n	800bfa4 <__sflush_r+0xb8>
 800bf52:	2200      	movs	r2, #0
 800bf54:	6062      	str	r2, [r4, #4]
 800bf56:	04d9      	lsls	r1, r3, #19
 800bf58:	6922      	ldr	r2, [r4, #16]
 800bf5a:	6022      	str	r2, [r4, #0]
 800bf5c:	d504      	bpl.n	800bf68 <__sflush_r+0x7c>
 800bf5e:	1c42      	adds	r2, r0, #1
 800bf60:	d101      	bne.n	800bf66 <__sflush_r+0x7a>
 800bf62:	682b      	ldr	r3, [r5, #0]
 800bf64:	b903      	cbnz	r3, 800bf68 <__sflush_r+0x7c>
 800bf66:	6560      	str	r0, [r4, #84]	; 0x54
 800bf68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf6a:	602f      	str	r7, [r5, #0]
 800bf6c:	2900      	cmp	r1, #0
 800bf6e:	d0ca      	beq.n	800bf06 <__sflush_r+0x1a>
 800bf70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf74:	4299      	cmp	r1, r3
 800bf76:	d002      	beq.n	800bf7e <__sflush_r+0x92>
 800bf78:	4628      	mov	r0, r5
 800bf7a:	f7ff faa5 	bl	800b4c8 <_free_r>
 800bf7e:	2000      	movs	r0, #0
 800bf80:	6360      	str	r0, [r4, #52]	; 0x34
 800bf82:	e7c1      	b.n	800bf08 <__sflush_r+0x1c>
 800bf84:	6a21      	ldr	r1, [r4, #32]
 800bf86:	2301      	movs	r3, #1
 800bf88:	4628      	mov	r0, r5
 800bf8a:	47b0      	blx	r6
 800bf8c:	1c41      	adds	r1, r0, #1
 800bf8e:	d1c7      	bne.n	800bf20 <__sflush_r+0x34>
 800bf90:	682b      	ldr	r3, [r5, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0c4      	beq.n	800bf20 <__sflush_r+0x34>
 800bf96:	2b1d      	cmp	r3, #29
 800bf98:	d001      	beq.n	800bf9e <__sflush_r+0xb2>
 800bf9a:	2b16      	cmp	r3, #22
 800bf9c:	d101      	bne.n	800bfa2 <__sflush_r+0xb6>
 800bf9e:	602f      	str	r7, [r5, #0]
 800bfa0:	e7b1      	b.n	800bf06 <__sflush_r+0x1a>
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfa8:	81a3      	strh	r3, [r4, #12]
 800bfaa:	e7ad      	b.n	800bf08 <__sflush_r+0x1c>
 800bfac:	690f      	ldr	r7, [r1, #16]
 800bfae:	2f00      	cmp	r7, #0
 800bfb0:	d0a9      	beq.n	800bf06 <__sflush_r+0x1a>
 800bfb2:	0793      	lsls	r3, r2, #30
 800bfb4:	680e      	ldr	r6, [r1, #0]
 800bfb6:	bf08      	it	eq
 800bfb8:	694b      	ldreq	r3, [r1, #20]
 800bfba:	600f      	str	r7, [r1, #0]
 800bfbc:	bf18      	it	ne
 800bfbe:	2300      	movne	r3, #0
 800bfc0:	eba6 0807 	sub.w	r8, r6, r7
 800bfc4:	608b      	str	r3, [r1, #8]
 800bfc6:	f1b8 0f00 	cmp.w	r8, #0
 800bfca:	dd9c      	ble.n	800bf06 <__sflush_r+0x1a>
 800bfcc:	6a21      	ldr	r1, [r4, #32]
 800bfce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfd0:	4643      	mov	r3, r8
 800bfd2:	463a      	mov	r2, r7
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	47b0      	blx	r6
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	dc06      	bgt.n	800bfea <__sflush_r+0xfe>
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe2:	81a3      	strh	r3, [r4, #12]
 800bfe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfe8:	e78e      	b.n	800bf08 <__sflush_r+0x1c>
 800bfea:	4407      	add	r7, r0
 800bfec:	eba8 0800 	sub.w	r8, r8, r0
 800bff0:	e7e9      	b.n	800bfc6 <__sflush_r+0xda>
 800bff2:	bf00      	nop
 800bff4:	20400001 	.word	0x20400001

0800bff8 <_fflush_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	690b      	ldr	r3, [r1, #16]
 800bffc:	4605      	mov	r5, r0
 800bffe:	460c      	mov	r4, r1
 800c000:	b913      	cbnz	r3, 800c008 <_fflush_r+0x10>
 800c002:	2500      	movs	r5, #0
 800c004:	4628      	mov	r0, r5
 800c006:	bd38      	pop	{r3, r4, r5, pc}
 800c008:	b118      	cbz	r0, 800c012 <_fflush_r+0x1a>
 800c00a:	6983      	ldr	r3, [r0, #24]
 800c00c:	b90b      	cbnz	r3, 800c012 <_fflush_r+0x1a>
 800c00e:	f000 f887 	bl	800c120 <__sinit>
 800c012:	4b14      	ldr	r3, [pc, #80]	; (800c064 <_fflush_r+0x6c>)
 800c014:	429c      	cmp	r4, r3
 800c016:	d11b      	bne.n	800c050 <_fflush_r+0x58>
 800c018:	686c      	ldr	r4, [r5, #4]
 800c01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0ef      	beq.n	800c002 <_fflush_r+0xa>
 800c022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c024:	07d0      	lsls	r0, r2, #31
 800c026:	d404      	bmi.n	800c032 <_fflush_r+0x3a>
 800c028:	0599      	lsls	r1, r3, #22
 800c02a:	d402      	bmi.n	800c032 <_fflush_r+0x3a>
 800c02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c02e:	f000 f915 	bl	800c25c <__retarget_lock_acquire_recursive>
 800c032:	4628      	mov	r0, r5
 800c034:	4621      	mov	r1, r4
 800c036:	f7ff ff59 	bl	800beec <__sflush_r>
 800c03a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c03c:	07da      	lsls	r2, r3, #31
 800c03e:	4605      	mov	r5, r0
 800c040:	d4e0      	bmi.n	800c004 <_fflush_r+0xc>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	059b      	lsls	r3, r3, #22
 800c046:	d4dd      	bmi.n	800c004 <_fflush_r+0xc>
 800c048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c04a:	f000 f908 	bl	800c25e <__retarget_lock_release_recursive>
 800c04e:	e7d9      	b.n	800c004 <_fflush_r+0xc>
 800c050:	4b05      	ldr	r3, [pc, #20]	; (800c068 <_fflush_r+0x70>)
 800c052:	429c      	cmp	r4, r3
 800c054:	d101      	bne.n	800c05a <_fflush_r+0x62>
 800c056:	68ac      	ldr	r4, [r5, #8]
 800c058:	e7df      	b.n	800c01a <_fflush_r+0x22>
 800c05a:	4b04      	ldr	r3, [pc, #16]	; (800c06c <_fflush_r+0x74>)
 800c05c:	429c      	cmp	r4, r3
 800c05e:	bf08      	it	eq
 800c060:	68ec      	ldreq	r4, [r5, #12]
 800c062:	e7da      	b.n	800c01a <_fflush_r+0x22>
 800c064:	0800ca2c 	.word	0x0800ca2c
 800c068:	0800ca4c 	.word	0x0800ca4c
 800c06c:	0800ca0c 	.word	0x0800ca0c

0800c070 <std>:
 800c070:	2300      	movs	r3, #0
 800c072:	b510      	push	{r4, lr}
 800c074:	4604      	mov	r4, r0
 800c076:	e9c0 3300 	strd	r3, r3, [r0]
 800c07a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c07e:	6083      	str	r3, [r0, #8]
 800c080:	8181      	strh	r1, [r0, #12]
 800c082:	6643      	str	r3, [r0, #100]	; 0x64
 800c084:	81c2      	strh	r2, [r0, #14]
 800c086:	6183      	str	r3, [r0, #24]
 800c088:	4619      	mov	r1, r3
 800c08a:	2208      	movs	r2, #8
 800c08c:	305c      	adds	r0, #92	; 0x5c
 800c08e:	f7fd fb55 	bl	800973c <memset>
 800c092:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <std+0x38>)
 800c094:	6263      	str	r3, [r4, #36]	; 0x24
 800c096:	4b05      	ldr	r3, [pc, #20]	; (800c0ac <std+0x3c>)
 800c098:	62a3      	str	r3, [r4, #40]	; 0x28
 800c09a:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <std+0x40>)
 800c09c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c09e:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <std+0x44>)
 800c0a0:	6224      	str	r4, [r4, #32]
 800c0a2:	6323      	str	r3, [r4, #48]	; 0x30
 800c0a4:	bd10      	pop	{r4, pc}
 800c0a6:	bf00      	nop
 800c0a8:	0800c3c5 	.word	0x0800c3c5
 800c0ac:	0800c3e7 	.word	0x0800c3e7
 800c0b0:	0800c41f 	.word	0x0800c41f
 800c0b4:	0800c443 	.word	0x0800c443

0800c0b8 <_cleanup_r>:
 800c0b8:	4901      	ldr	r1, [pc, #4]	; (800c0c0 <_cleanup_r+0x8>)
 800c0ba:	f000 b8af 	b.w	800c21c <_fwalk_reent>
 800c0be:	bf00      	nop
 800c0c0:	0800bff9 	.word	0x0800bff9

0800c0c4 <__sfmoreglue>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	2268      	movs	r2, #104	; 0x68
 800c0c8:	1e4d      	subs	r5, r1, #1
 800c0ca:	4355      	muls	r5, r2
 800c0cc:	460e      	mov	r6, r1
 800c0ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0d2:	f7ff fa65 	bl	800b5a0 <_malloc_r>
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	b140      	cbz	r0, 800c0ec <__sfmoreglue+0x28>
 800c0da:	2100      	movs	r1, #0
 800c0dc:	e9c0 1600 	strd	r1, r6, [r0]
 800c0e0:	300c      	adds	r0, #12
 800c0e2:	60a0      	str	r0, [r4, #8]
 800c0e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0e8:	f7fd fb28 	bl	800973c <memset>
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}

0800c0f0 <__sfp_lock_acquire>:
 800c0f0:	4801      	ldr	r0, [pc, #4]	; (800c0f8 <__sfp_lock_acquire+0x8>)
 800c0f2:	f000 b8b3 	b.w	800c25c <__retarget_lock_acquire_recursive>
 800c0f6:	bf00      	nop
 800c0f8:	2000065d 	.word	0x2000065d

0800c0fc <__sfp_lock_release>:
 800c0fc:	4801      	ldr	r0, [pc, #4]	; (800c104 <__sfp_lock_release+0x8>)
 800c0fe:	f000 b8ae 	b.w	800c25e <__retarget_lock_release_recursive>
 800c102:	bf00      	nop
 800c104:	2000065d 	.word	0x2000065d

0800c108 <__sinit_lock_acquire>:
 800c108:	4801      	ldr	r0, [pc, #4]	; (800c110 <__sinit_lock_acquire+0x8>)
 800c10a:	f000 b8a7 	b.w	800c25c <__retarget_lock_acquire_recursive>
 800c10e:	bf00      	nop
 800c110:	2000065e 	.word	0x2000065e

0800c114 <__sinit_lock_release>:
 800c114:	4801      	ldr	r0, [pc, #4]	; (800c11c <__sinit_lock_release+0x8>)
 800c116:	f000 b8a2 	b.w	800c25e <__retarget_lock_release_recursive>
 800c11a:	bf00      	nop
 800c11c:	2000065e 	.word	0x2000065e

0800c120 <__sinit>:
 800c120:	b510      	push	{r4, lr}
 800c122:	4604      	mov	r4, r0
 800c124:	f7ff fff0 	bl	800c108 <__sinit_lock_acquire>
 800c128:	69a3      	ldr	r3, [r4, #24]
 800c12a:	b11b      	cbz	r3, 800c134 <__sinit+0x14>
 800c12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c130:	f7ff bff0 	b.w	800c114 <__sinit_lock_release>
 800c134:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c138:	6523      	str	r3, [r4, #80]	; 0x50
 800c13a:	4b13      	ldr	r3, [pc, #76]	; (800c188 <__sinit+0x68>)
 800c13c:	4a13      	ldr	r2, [pc, #76]	; (800c18c <__sinit+0x6c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	62a2      	str	r2, [r4, #40]	; 0x28
 800c142:	42a3      	cmp	r3, r4
 800c144:	bf04      	itt	eq
 800c146:	2301      	moveq	r3, #1
 800c148:	61a3      	streq	r3, [r4, #24]
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 f820 	bl	800c190 <__sfp>
 800c150:	6060      	str	r0, [r4, #4]
 800c152:	4620      	mov	r0, r4
 800c154:	f000 f81c 	bl	800c190 <__sfp>
 800c158:	60a0      	str	r0, [r4, #8]
 800c15a:	4620      	mov	r0, r4
 800c15c:	f000 f818 	bl	800c190 <__sfp>
 800c160:	2200      	movs	r2, #0
 800c162:	60e0      	str	r0, [r4, #12]
 800c164:	2104      	movs	r1, #4
 800c166:	6860      	ldr	r0, [r4, #4]
 800c168:	f7ff ff82 	bl	800c070 <std>
 800c16c:	68a0      	ldr	r0, [r4, #8]
 800c16e:	2201      	movs	r2, #1
 800c170:	2109      	movs	r1, #9
 800c172:	f7ff ff7d 	bl	800c070 <std>
 800c176:	68e0      	ldr	r0, [r4, #12]
 800c178:	2202      	movs	r2, #2
 800c17a:	2112      	movs	r1, #18
 800c17c:	f7ff ff78 	bl	800c070 <std>
 800c180:	2301      	movs	r3, #1
 800c182:	61a3      	str	r3, [r4, #24]
 800c184:	e7d2      	b.n	800c12c <__sinit+0xc>
 800c186:	bf00      	nop
 800c188:	0800c694 	.word	0x0800c694
 800c18c:	0800c0b9 	.word	0x0800c0b9

0800c190 <__sfp>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	4607      	mov	r7, r0
 800c194:	f7ff ffac 	bl	800c0f0 <__sfp_lock_acquire>
 800c198:	4b1e      	ldr	r3, [pc, #120]	; (800c214 <__sfp+0x84>)
 800c19a:	681e      	ldr	r6, [r3, #0]
 800c19c:	69b3      	ldr	r3, [r6, #24]
 800c19e:	b913      	cbnz	r3, 800c1a6 <__sfp+0x16>
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f7ff ffbd 	bl	800c120 <__sinit>
 800c1a6:	3648      	adds	r6, #72	; 0x48
 800c1a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	d503      	bpl.n	800c1b8 <__sfp+0x28>
 800c1b0:	6833      	ldr	r3, [r6, #0]
 800c1b2:	b30b      	cbz	r3, 800c1f8 <__sfp+0x68>
 800c1b4:	6836      	ldr	r6, [r6, #0]
 800c1b6:	e7f7      	b.n	800c1a8 <__sfp+0x18>
 800c1b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1bc:	b9d5      	cbnz	r5, 800c1f4 <__sfp+0x64>
 800c1be:	4b16      	ldr	r3, [pc, #88]	; (800c218 <__sfp+0x88>)
 800c1c0:	60e3      	str	r3, [r4, #12]
 800c1c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1c6:	6665      	str	r5, [r4, #100]	; 0x64
 800c1c8:	f000 f847 	bl	800c25a <__retarget_lock_init_recursive>
 800c1cc:	f7ff ff96 	bl	800c0fc <__sfp_lock_release>
 800c1d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1d8:	6025      	str	r5, [r4, #0]
 800c1da:	61a5      	str	r5, [r4, #24]
 800c1dc:	2208      	movs	r2, #8
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1e4:	f7fd faaa 	bl	800973c <memset>
 800c1e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1f4:	3468      	adds	r4, #104	; 0x68
 800c1f6:	e7d9      	b.n	800c1ac <__sfp+0x1c>
 800c1f8:	2104      	movs	r1, #4
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	f7ff ff62 	bl	800c0c4 <__sfmoreglue>
 800c200:	4604      	mov	r4, r0
 800c202:	6030      	str	r0, [r6, #0]
 800c204:	2800      	cmp	r0, #0
 800c206:	d1d5      	bne.n	800c1b4 <__sfp+0x24>
 800c208:	f7ff ff78 	bl	800c0fc <__sfp_lock_release>
 800c20c:	230c      	movs	r3, #12
 800c20e:	603b      	str	r3, [r7, #0]
 800c210:	e7ee      	b.n	800c1f0 <__sfp+0x60>
 800c212:	bf00      	nop
 800c214:	0800c694 	.word	0x0800c694
 800c218:	ffff0001 	.word	0xffff0001

0800c21c <_fwalk_reent>:
 800c21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c220:	4606      	mov	r6, r0
 800c222:	4688      	mov	r8, r1
 800c224:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c228:	2700      	movs	r7, #0
 800c22a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c22e:	f1b9 0901 	subs.w	r9, r9, #1
 800c232:	d505      	bpl.n	800c240 <_fwalk_reent+0x24>
 800c234:	6824      	ldr	r4, [r4, #0]
 800c236:	2c00      	cmp	r4, #0
 800c238:	d1f7      	bne.n	800c22a <_fwalk_reent+0xe>
 800c23a:	4638      	mov	r0, r7
 800c23c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c240:	89ab      	ldrh	r3, [r5, #12]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d907      	bls.n	800c256 <_fwalk_reent+0x3a>
 800c246:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c24a:	3301      	adds	r3, #1
 800c24c:	d003      	beq.n	800c256 <_fwalk_reent+0x3a>
 800c24e:	4629      	mov	r1, r5
 800c250:	4630      	mov	r0, r6
 800c252:	47c0      	blx	r8
 800c254:	4307      	orrs	r7, r0
 800c256:	3568      	adds	r5, #104	; 0x68
 800c258:	e7e9      	b.n	800c22e <_fwalk_reent+0x12>

0800c25a <__retarget_lock_init_recursive>:
 800c25a:	4770      	bx	lr

0800c25c <__retarget_lock_acquire_recursive>:
 800c25c:	4770      	bx	lr

0800c25e <__retarget_lock_release_recursive>:
 800c25e:	4770      	bx	lr

0800c260 <__swhatbuf_r>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	460e      	mov	r6, r1
 800c264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c268:	2900      	cmp	r1, #0
 800c26a:	b096      	sub	sp, #88	; 0x58
 800c26c:	4614      	mov	r4, r2
 800c26e:	461d      	mov	r5, r3
 800c270:	da08      	bge.n	800c284 <__swhatbuf_r+0x24>
 800c272:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	602a      	str	r2, [r5, #0]
 800c27a:	061a      	lsls	r2, r3, #24
 800c27c:	d410      	bmi.n	800c2a0 <__swhatbuf_r+0x40>
 800c27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c282:	e00e      	b.n	800c2a2 <__swhatbuf_r+0x42>
 800c284:	466a      	mov	r2, sp
 800c286:	f000 f903 	bl	800c490 <_fstat_r>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	dbf1      	blt.n	800c272 <__swhatbuf_r+0x12>
 800c28e:	9a01      	ldr	r2, [sp, #4]
 800c290:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c294:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c298:	425a      	negs	r2, r3
 800c29a:	415a      	adcs	r2, r3
 800c29c:	602a      	str	r2, [r5, #0]
 800c29e:	e7ee      	b.n	800c27e <__swhatbuf_r+0x1e>
 800c2a0:	2340      	movs	r3, #64	; 0x40
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	b016      	add	sp, #88	; 0x58
 800c2a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c2ac <__smakebuf_r>:
 800c2ac:	898b      	ldrh	r3, [r1, #12]
 800c2ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2b0:	079d      	lsls	r5, r3, #30
 800c2b2:	4606      	mov	r6, r0
 800c2b4:	460c      	mov	r4, r1
 800c2b6:	d507      	bpl.n	800c2c8 <__smakebuf_r+0x1c>
 800c2b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	6123      	str	r3, [r4, #16]
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	6163      	str	r3, [r4, #20]
 800c2c4:	b002      	add	sp, #8
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}
 800c2c8:	ab01      	add	r3, sp, #4
 800c2ca:	466a      	mov	r2, sp
 800c2cc:	f7ff ffc8 	bl	800c260 <__swhatbuf_r>
 800c2d0:	9900      	ldr	r1, [sp, #0]
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	4630      	mov	r0, r6
 800c2d6:	f7ff f963 	bl	800b5a0 <_malloc_r>
 800c2da:	b948      	cbnz	r0, 800c2f0 <__smakebuf_r+0x44>
 800c2dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2e0:	059a      	lsls	r2, r3, #22
 800c2e2:	d4ef      	bmi.n	800c2c4 <__smakebuf_r+0x18>
 800c2e4:	f023 0303 	bic.w	r3, r3, #3
 800c2e8:	f043 0302 	orr.w	r3, r3, #2
 800c2ec:	81a3      	strh	r3, [r4, #12]
 800c2ee:	e7e3      	b.n	800c2b8 <__smakebuf_r+0xc>
 800c2f0:	4b0d      	ldr	r3, [pc, #52]	; (800c328 <__smakebuf_r+0x7c>)
 800c2f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	6020      	str	r0, [r4, #0]
 800c2f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2fc:	81a3      	strh	r3, [r4, #12]
 800c2fe:	9b00      	ldr	r3, [sp, #0]
 800c300:	6163      	str	r3, [r4, #20]
 800c302:	9b01      	ldr	r3, [sp, #4]
 800c304:	6120      	str	r0, [r4, #16]
 800c306:	b15b      	cbz	r3, 800c320 <__smakebuf_r+0x74>
 800c308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c30c:	4630      	mov	r0, r6
 800c30e:	f000 f8d1 	bl	800c4b4 <_isatty_r>
 800c312:	b128      	cbz	r0, 800c320 <__smakebuf_r+0x74>
 800c314:	89a3      	ldrh	r3, [r4, #12]
 800c316:	f023 0303 	bic.w	r3, r3, #3
 800c31a:	f043 0301 	orr.w	r3, r3, #1
 800c31e:	81a3      	strh	r3, [r4, #12]
 800c320:	89a0      	ldrh	r0, [r4, #12]
 800c322:	4305      	orrs	r5, r0
 800c324:	81a5      	strh	r5, [r4, #12]
 800c326:	e7cd      	b.n	800c2c4 <__smakebuf_r+0x18>
 800c328:	0800c0b9 	.word	0x0800c0b9

0800c32c <_malloc_usable_size_r>:
 800c32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c330:	1f18      	subs	r0, r3, #4
 800c332:	2b00      	cmp	r3, #0
 800c334:	bfbc      	itt	lt
 800c336:	580b      	ldrlt	r3, [r1, r0]
 800c338:	18c0      	addlt	r0, r0, r3
 800c33a:	4770      	bx	lr

0800c33c <_raise_r>:
 800c33c:	291f      	cmp	r1, #31
 800c33e:	b538      	push	{r3, r4, r5, lr}
 800c340:	4604      	mov	r4, r0
 800c342:	460d      	mov	r5, r1
 800c344:	d904      	bls.n	800c350 <_raise_r+0x14>
 800c346:	2316      	movs	r3, #22
 800c348:	6003      	str	r3, [r0, #0]
 800c34a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c352:	b112      	cbz	r2, 800c35a <_raise_r+0x1e>
 800c354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c358:	b94b      	cbnz	r3, 800c36e <_raise_r+0x32>
 800c35a:	4620      	mov	r0, r4
 800c35c:	f000 f830 	bl	800c3c0 <_getpid_r>
 800c360:	462a      	mov	r2, r5
 800c362:	4601      	mov	r1, r0
 800c364:	4620      	mov	r0, r4
 800c366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c36a:	f000 b817 	b.w	800c39c <_kill_r>
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d00a      	beq.n	800c388 <_raise_r+0x4c>
 800c372:	1c59      	adds	r1, r3, #1
 800c374:	d103      	bne.n	800c37e <_raise_r+0x42>
 800c376:	2316      	movs	r3, #22
 800c378:	6003      	str	r3, [r0, #0]
 800c37a:	2001      	movs	r0, #1
 800c37c:	e7e7      	b.n	800c34e <_raise_r+0x12>
 800c37e:	2400      	movs	r4, #0
 800c380:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c384:	4628      	mov	r0, r5
 800c386:	4798      	blx	r3
 800c388:	2000      	movs	r0, #0
 800c38a:	e7e0      	b.n	800c34e <_raise_r+0x12>

0800c38c <raise>:
 800c38c:	4b02      	ldr	r3, [pc, #8]	; (800c398 <raise+0xc>)
 800c38e:	4601      	mov	r1, r0
 800c390:	6818      	ldr	r0, [r3, #0]
 800c392:	f7ff bfd3 	b.w	800c33c <_raise_r>
 800c396:	bf00      	nop
 800c398:	200000ec 	.word	0x200000ec

0800c39c <_kill_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4d07      	ldr	r5, [pc, #28]	; (800c3bc <_kill_r+0x20>)
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	4608      	mov	r0, r1
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	602b      	str	r3, [r5, #0]
 800c3aa:	f7f6 f999 	bl	80026e0 <_kill>
 800c3ae:	1c43      	adds	r3, r0, #1
 800c3b0:	d102      	bne.n	800c3b8 <_kill_r+0x1c>
 800c3b2:	682b      	ldr	r3, [r5, #0]
 800c3b4:	b103      	cbz	r3, 800c3b8 <_kill_r+0x1c>
 800c3b6:	6023      	str	r3, [r4, #0]
 800c3b8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ba:	bf00      	nop
 800c3bc:	20000658 	.word	0x20000658

0800c3c0 <_getpid_r>:
 800c3c0:	f7f6 b986 	b.w	80026d0 <_getpid>

0800c3c4 <__sread>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3cc:	f000 f894 	bl	800c4f8 <_read_r>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	bfab      	itete	ge
 800c3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c3d8:	181b      	addge	r3, r3, r0
 800c3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3de:	bfac      	ite	ge
 800c3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3e2:	81a3      	strhlt	r3, [r4, #12]
 800c3e4:	bd10      	pop	{r4, pc}

0800c3e6 <__swrite>:
 800c3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ea:	461f      	mov	r7, r3
 800c3ec:	898b      	ldrh	r3, [r1, #12]
 800c3ee:	05db      	lsls	r3, r3, #23
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	4616      	mov	r6, r2
 800c3f6:	d505      	bpl.n	800c404 <__swrite+0x1e>
 800c3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	2200      	movs	r2, #0
 800c400:	f000 f868 	bl	800c4d4 <_lseek_r>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c40a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	4632      	mov	r2, r6
 800c412:	463b      	mov	r3, r7
 800c414:	4628      	mov	r0, r5
 800c416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c41a:	f000 b817 	b.w	800c44c <_write_r>

0800c41e <__sseek>:
 800c41e:	b510      	push	{r4, lr}
 800c420:	460c      	mov	r4, r1
 800c422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c426:	f000 f855 	bl	800c4d4 <_lseek_r>
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	89a3      	ldrh	r3, [r4, #12]
 800c42e:	bf15      	itete	ne
 800c430:	6560      	strne	r0, [r4, #84]	; 0x54
 800c432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c43a:	81a3      	strheq	r3, [r4, #12]
 800c43c:	bf18      	it	ne
 800c43e:	81a3      	strhne	r3, [r4, #12]
 800c440:	bd10      	pop	{r4, pc}

0800c442 <__sclose>:
 800c442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c446:	f000 b813 	b.w	800c470 <_close_r>
	...

0800c44c <_write_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4d07      	ldr	r5, [pc, #28]	; (800c46c <_write_r+0x20>)
 800c450:	4604      	mov	r4, r0
 800c452:	4608      	mov	r0, r1
 800c454:	4611      	mov	r1, r2
 800c456:	2200      	movs	r2, #0
 800c458:	602a      	str	r2, [r5, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	f7f6 f977 	bl	800274e <_write>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_write_r+0x1e>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_write_r+0x1e>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	20000658 	.word	0x20000658

0800c470 <_close_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4d06      	ldr	r5, [pc, #24]	; (800c48c <_close_r+0x1c>)
 800c474:	2300      	movs	r3, #0
 800c476:	4604      	mov	r4, r0
 800c478:	4608      	mov	r0, r1
 800c47a:	602b      	str	r3, [r5, #0]
 800c47c:	f7f6 f983 	bl	8002786 <_close>
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	d102      	bne.n	800c48a <_close_r+0x1a>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	b103      	cbz	r3, 800c48a <_close_r+0x1a>
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	bd38      	pop	{r3, r4, r5, pc}
 800c48c:	20000658 	.word	0x20000658

0800c490 <_fstat_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	4d07      	ldr	r5, [pc, #28]	; (800c4b0 <_fstat_r+0x20>)
 800c494:	2300      	movs	r3, #0
 800c496:	4604      	mov	r4, r0
 800c498:	4608      	mov	r0, r1
 800c49a:	4611      	mov	r1, r2
 800c49c:	602b      	str	r3, [r5, #0]
 800c49e:	f7f6 f97e 	bl	800279e <_fstat>
 800c4a2:	1c43      	adds	r3, r0, #1
 800c4a4:	d102      	bne.n	800c4ac <_fstat_r+0x1c>
 800c4a6:	682b      	ldr	r3, [r5, #0]
 800c4a8:	b103      	cbz	r3, 800c4ac <_fstat_r+0x1c>
 800c4aa:	6023      	str	r3, [r4, #0]
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20000658 	.word	0x20000658

0800c4b4 <_isatty_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4d06      	ldr	r5, [pc, #24]	; (800c4d0 <_isatty_r+0x1c>)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	602b      	str	r3, [r5, #0]
 800c4c0:	f7f6 f97d 	bl	80027be <_isatty>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d102      	bne.n	800c4ce <_isatty_r+0x1a>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	b103      	cbz	r3, 800c4ce <_isatty_r+0x1a>
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	20000658 	.word	0x20000658

0800c4d4 <_lseek_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	4d07      	ldr	r5, [pc, #28]	; (800c4f4 <_lseek_r+0x20>)
 800c4d8:	4604      	mov	r4, r0
 800c4da:	4608      	mov	r0, r1
 800c4dc:	4611      	mov	r1, r2
 800c4de:	2200      	movs	r2, #0
 800c4e0:	602a      	str	r2, [r5, #0]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	f7f6 f976 	bl	80027d4 <_lseek>
 800c4e8:	1c43      	adds	r3, r0, #1
 800c4ea:	d102      	bne.n	800c4f2 <_lseek_r+0x1e>
 800c4ec:	682b      	ldr	r3, [r5, #0]
 800c4ee:	b103      	cbz	r3, 800c4f2 <_lseek_r+0x1e>
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	20000658 	.word	0x20000658

0800c4f8 <_read_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d07      	ldr	r5, [pc, #28]	; (800c518 <_read_r+0x20>)
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	4608      	mov	r0, r1
 800c500:	4611      	mov	r1, r2
 800c502:	2200      	movs	r2, #0
 800c504:	602a      	str	r2, [r5, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	f7f6 f904 	bl	8002714 <_read>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_read_r+0x1e>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_read_r+0x1e>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	20000658 	.word	0x20000658

0800c51c <_init>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	bf00      	nop
 800c520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c522:	bc08      	pop	{r3}
 800c524:	469e      	mov	lr, r3
 800c526:	4770      	bx	lr

0800c528 <_fini>:
 800c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52a:	bf00      	nop
 800c52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52e:	bc08      	pop	{r3}
 800c530:	469e      	mov	lr, r3
 800c532:	4770      	bx	lr
